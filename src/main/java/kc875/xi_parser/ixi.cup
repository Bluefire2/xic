package kc875.xi_parser;
// A stub for a Xi CUP specification.

import kc875.ast.*;
import kc875.lexer.XiLexer;
import kc875.lexer.XiToken;
import polyglot.util.Pair;

import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.Collections;

import kc875.lexer.XiTokenFactory;
import java_cup.runtime.Symbol;
import kc875.xic_error.LexicalError;
import kc875.xic_error.SyntaxError;

parser code
{:
    XiLexer lexer;

    public IxiParser (XiLexer l, XiTokenFactory xtf) {
        super(l,xtf);
        this.lexer = l;
    }

    public void syntax_error(Symbol s) {
        XiToken t = (XiToken) s;
        String message = String.format(
            "Unexpected token %s", t.getValue()
        );
        throw new SyntaxError(message, t.getLocation());
    }
:};

scan with
{:
    Symbol s = lexer.next_token(); // s is an XiToken wrapped as a Symbol
    XiToken t = (XiToken) s;
    if (t.sym == sym.ERROR) {
        throw new LexicalError(t.getValue().toString(), t.getLocation());
    } else {
        return s;
    }
:};

terminal String ID_LOWER;
terminal String ID_UPPER;
terminal String STRING_LIT;
terminal Character CHAR_LIT;
terminal Long INT_LIT;
terminal Boolean BOOL_LIT;
terminal INT_TYPE, BOOL_TYPE;

terminal
    UNDERSCORE,
    USE,
    IF,
    WHILE,
    ELSE,
    RETURN,
    LENGTH,

    NULL,
    THIS,
    NEW,
    EXTENDS,
    CLASS,
    DOT,
    BREAK,

    EQ,
    MINUS,
    PLUS,
    NOT,
    MULT,
    HI_MULT,
    DIV,
    MOD,
    EQEQ,
    NEQ,
    GT,
    LT,
    GTEQ,
    LTEQ,
    AND,
    OR,
    UMINUS, //maybe not necessary

    COLON,
    SEMICOLON,
    COMMA,
    LPAREN,
    RPAREN,
    LBRAC,
    RBRAC,
    LCURL,
    RCURL,
    ERROR;
terminal String ID;

nonterminal FileInterface interface;
nonterminal interface_file;
nonterminal List<String> id_list;
nonterminal Expr expr;
nonterminal List<Expr> expr_list, indices;
nonterminal UseInterface use_interface;
nonterminal List<UseInterface> import_list;

nonterminal Pair<String, TypeTTau> annotated_var, decl_annotated_var;
nonterminal TypeTTau type, basic_type, init_list_type, list_type;
nonterminal FuncDecl func_decl;

nonterminal List<TypeTTau> type_list;
nonterminal List<Pair<String, TypeTTau>> annotated_var_list, func_args;

//pa7 new stuff
nonterminal ClassDecl class_decl;
nonterminal List<DeclOrDefn> field_list;
nonterminal StmtDeclMulti multi_var_decl;
nonterminal List<DeclOrDefn> decl_or_defn_list;
nonterminal List<FuncDecl> func_decl_list;

precedence left COMMA;
precedence left LBRAC, RBRAC, LPAREN, RPAREN;

start with interface_file;

id_list ::=
  ID:i1 COMMA ID:i2 {:
    ArrayList<String> l = new ArrayList<>();
    l.add(i1);
    l.add(i2);
    RESULT = l; :}
| id_list:l COMMA ID:i {:
    l.add(i);
    RESULT = l;
  :}
;
// TYPES

basic_type ::=
  BOOL_TYPE:t {: RESULT = new TypeTTauBool(); :}
| INT_TYPE:t {: RESULT = new TypeTTauInt(); :}
| ID:i {: RESULT = new TypeTTauClass(i); :}
;

// Types legal for use everywhere
// Does not allow list types with initialized length
// No need to unwrap
type ::=
  basic_type:b {: RESULT = b; :}
| list_type:t {: RESULT = t; :}
;

list_type ::=
  basic_type:t LBRAC RBRAC {: RESULT = new TypeTTauArray(t); :}
| list_type:t LBRAC RBRAC {: RESULT = new TypeTTauArray(t); :}
;

indices ::=
  LBRAC expr:e RBRAC {: ArrayList<Expr> l = new ArrayList<>(); l.add(e); RESULT = l; :}
| indices:l LBRAC expr:e RBRAC {: l.add(e); RESULT = l; :}
;

type_list ::=
  type:t {:
    ArrayList<TypeTTau> l = new ArrayList<>();
    l.add(t);
    RESULT = l; :}
| type_list:l COMMA type:t {: l.add(t); RESULT = l; :}
;

decl_annotated_var ::=
  ID:i COLON init_list_type:t {: RESULT = new Pair<String, TypeTTau>(i, t); :}
;


// List types with initialized lengths, can only be used in decl w/o assign
// Example: int[3][n]
init_list_type ::=
  basic_type:t indices:i {:
    TypeTTau curr = t;
    List<Expr> lengths = i;
    Collections.reverse(lengths);
    for (Expr e : lengths){
        curr = new TypeTTauArray(curr, e);
    }
    RESULT = curr;
  :}
| basic_type:t indices:i LBRAC RBRAC {:
    TypeTTau curr = new TypeTTauArray(t);
    List<Expr> lengths = i;
    Collections.reverse(lengths);
    for (Expr e : lengths){
        curr = new TypeTTauArray(curr, e);
    }
    RESULT = curr;
  :}
| init_list_type:t LBRAC RBRAC {:
    TypeTTauArray curr = (TypeTTauArray) t;
    while (curr.getTypeTTau() instanceof TypeTTauArray){
        curr = (TypeTTauArray) curr.getTypeTTau();
    }
    curr.setTypeTTau(new TypeTTauArray(curr.getTypeTTau()));
    RESULT = t;
  :}
;

annotated_var_list ::=
  annotated_var:a {:
    ArrayList<Pair<String, TypeTTau>> l = new ArrayList<>();
    l.add(a);
    RESULT = l; :}
| annotated_var_list:l COMMA annotated_var:a {: l.add(a); RESULT = l; :}
;

annotated_var ::=
  ID:i COLON type:t {: RESULT = new Pair<String, TypeTTau>(i, t); :}
;

// FUNCTION DECLARATIONS

func_args ::=
  LPAREN RPAREN {: RESULT = new ArrayList<Pair<String, TypeTTau>>(); :}
| LPAREN annotated_var_list:a RPAREN {: RESULT = a; :}
;

func_decl ::=
  ID:n func_args:p {: RESULT = new FuncDecl(n, p, nxleft); :}
| ID:n func_args:p COLON type_list:r {:
    // r.size() >= 1
    TypeT rt;
    if (r.size() == 1) {
        rt = r.get(0);
    } else {
        rt = new TypeTList(r);
    }
    RESULT = new FuncDecl(n, p, rt, nxleft); :}
;


//CLASSES

func_decl_list ::=
  func_decl:d {:
      ArrayList<FuncDecl> l = new ArrayList<>();
      l.add(d);
      RESULT = l; :}
| func_decl_list:l func_decl:d {: l.add(d); RESULT = l; :}
;

field_list ::=
  decl_annotated_var:d {:
    ArrayList<DeclOrDefn> l = new ArrayList<>();
    l.add(new StmtDecl(new TypeDeclVar(d), dxleft));
    RESULT = l; :}
| annotated_var:d {:
    ArrayList<DeclOrDefn> l = new ArrayList<>();
    l.add(new StmtDecl(new TypeDeclVar(d), dxleft));
    RESULT = l; :}
| multi_var_decl:m {:
    ArrayList<DeclOrDefn> l = new ArrayList<>();
    for (
    l.add(m);
    RESULT = l; :}
| field_list:l multi_var_decl:m {: l.add(m); RESULT = l; :}
| field_list:l annotated_var:d {:
    l.add(new StmtDecl(new TypeDeclVar(d), dxleft)); RESULT = l; :}
| field_list:l decl_annotated_var:d {:
    l.add(new StmtDecl(new TypeDeclVar(d), dxleft)); RESULT = l; :}
;

class_decl ::=
  CLASS ID:c LBRAC field_list:fl func_decl_list:dl RBRAC {:
    RESULT = new ClassDecl(c, fl, dl, cxleft) :}
| CLASS ID:c LBRAC func_decl_list:dl RBRAC {:
    RESULT = new ClassDecl(c, new ArrayList<>(), dl, cxleft) :}
| CLASS ID:c LBRAC field_list:fl RBRAC {:
      RESULT = new ClassDecl(c, fl, new ArrayList<>(), cxleft) :}
| CLASS ID:c LBRAC  RBRAC {:
      RESULT = new ClassDefn(c, new ArrayList<>(), new ArrayList<>(), cxleft) :}
| CLASS ID:c EXTENDS ID:e LBRAC field_list:fl func_decl_list:dl RBRAC {:
    RESULT = new ClassDecl(c, e, fl, dl, cxleft) :}
| CLASS ID:c EXTENDS ID:e LBRAC func_decl_list:dl RBRAC {:
    RESULT = new ClassDecl(c, e, new ArrayList<>(), dl, cxleft) :}
| CLASS ID:c EXTENDS ID:e LBRAC field_list:fl RBRAC {:
      RESULT = new ClassDecl(c, e, fl, new ArrayList<>(), cxleft) :}
| CLASS ID:c EXTENDS ID:e LBRAC  RBRAC {:
      RESULT = new ClassDecl(c, e, new ArrayList<>(), new ArrayList<>(), cxleft) :}
;

// unordered list of global variable decl/defn, function defn, or class defns...
decl_or_defn_list ::=
  class_decl:c {:
    ArrayList<DeclOrDefn> l = new ArrayList<>();
    l.add(c);
    RESULT = l; :}
| func_decl:d {:
      ArrayList<DeclOrDefn> l = new ArrayList<>();
      l.add(d);
      RESULT = l; :}
| decl_or_defn_list:l func_decl:d {: l.add(d); RESULT = l; :}
| decl_or_defn_list:l class_decl:c {: l.add(c); RESULT = l; :}
;

// IMPORTS

use_interface ::=
  USE ID:i {: RESULT = new UseInterface(i, ixleft); :}
| USE ID:i SEMICOLON {: RESULT = new UseInterface(i, ixleft); :}
;

import_list ::=
  use_interface:i {:
      ArrayList<UseInterface> l = new ArrayList<>();
      l.add(i);
      RESULT = l; :}
| import_list:l use_interface:i {: l.add(i); RESULT = l; :}
;

// HIGHEST LEVEL
interface ::=
  import_list:il decl_or_defn_list:dl {:
    RESULT = new FileInterface(il, dl, ilxleft) ; :}
| decl_or_defn_list:dl {:
    RESULT = new FileInterface(new ArrayList<UseInterface>(), dl, dlxleft); :}
;

interface_file ::=
  {: // do nothing, empty interface file :}
| interface:i {: RESULT = i; :};
