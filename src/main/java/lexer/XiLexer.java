/* The following code was generated by JFlex 1.7.0 */

package lexer;

import java_cup.runtime.*;
import xi_parser.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/java/lexer/xilexer.flex</tt>
 */
public class XiLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\70\1\71\1\1\22\0\1\3\1\36\1\32"+
    "\2\0\1\41\1\43\1\7\1\50\1\51\1\37\1\35\1\47\1\34"+
    "\1\0\1\10\1\11\1\4\1\57\1\60\1\65\1\64\1\62\1\61"+
    "\1\63\1\56\1\45\1\46\1\42\1\33\1\40\2\0\6\6\24\5"+
    "\1\52\1\66\1\53\1\0\1\12\1\0\1\31\1\27\2\6\1\15"+
    "\1\17\1\26\1\21\1\16\2\5\1\22\1\5\1\25\1\30\2\5"+
    "\1\23\1\14\1\24\1\13\1\5\1\20\1\67\2\5\1\54\1\44"+
    "\1\55\7\0\1\70\u1fa2\0\1\70\1\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\11\4\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\2\35"+
    "\1\36\1\1\2\37\1\40\2\37\1\2\2\4\1\41"+
    "\7\4\1\42\1\0\1\43\1\0\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\46\1\55"+
    "\1\56\1\0\1\57\5\0\1\60\1\4\1\61\6\4"+
    "\1\0\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\0\1\71\4\4\1\72\1\73\1\0\1\63\1\0"+
    "\1\74\1\75\1\76\2\4\1\0\1\63\1\0\1\77"+
    "\1\100\1\0\1\63\16\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\256\0\u0122\0\u015c"+
    "\0\256\0\u0196\0\256\0\256\0\u01d0\0\u020a\0\u0244\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\256\0\u03da\0\u0414"+
    "\0\256\0\u044e\0\u0488\0\u04c2\0\256\0\u04fc\0\256\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\u0536\0\u0570\0\256\0\256\0\u05aa\0\u05e4\0\256"+
    "\0\256\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u015c\0\u0740"+
    "\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\256\0\u08d6"+
    "\0\256\0\u0910\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\u094a\0\256\0\256\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u061e\0\u0aa6\0\u015c\0\u0ae0\0\u015c"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\256"+
    "\0\u0cb0\0\256\0\256\0\256\0\256\0\256\0\u0cea\0\u015c"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u015c\0\u015c\0\u0e0c\0\u0e46"+
    "\0\u0e80\0\256\0\u015c\0\u015c\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u015c\0\u015c\0\u0fdc\0\256\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\256";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\2\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\10\1\16\1\17\1\20\1\21\1\10"+
    "\1\22\1\23\1\24\2\10\1\25\2\10\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\10\7\1\4\1\10\1\4\1\6\1\52"+
    "\1\53\1\54\27\52\1\55\33\52\1\56\3\52\1\57"+
    "\2\60\4\57\1\61\22\57\1\62\33\57\1\63\3\57"+
    "\74\0\1\6\73\0\1\7\4\0\1\7\44\0\10\7"+
    "\10\0\4\10\1\0\21\10\24\0\10\10\1\0\1\10"+
    "\12\0\1\64\65\0\4\10\1\0\3\10\1\65\15\10"+
    "\24\0\10\10\1\0\1\10\6\0\4\10\1\0\11\10"+
    "\1\66\7\10\24\0\10\10\1\0\1\10\6\0\4\10"+
    "\1\0\6\10\1\67\5\10\1\70\4\10\24\0\10\10"+
    "\1\0\1\10\6\0\4\10\1\0\20\10\1\71\24\0"+
    "\10\10\1\0\1\10\6\0\4\10\1\0\10\10\1\72"+
    "\10\10\24\0\10\10\1\0\1\10\6\0\4\10\1\0"+
    "\4\10\1\73\14\10\24\0\10\10\1\0\1\10\6\0"+
    "\4\10\1\0\4\10\1\74\14\10\24\0\10\10\1\0"+
    "\1\10\6\0\4\10\1\0\12\10\1\75\6\10\24\0"+
    "\10\10\1\0\1\10\6\0\4\10\1\0\17\10\1\76"+
    "\1\10\24\0\10\10\1\0\1\10\35\0\1\77\114\0"+
    "\1\100\46\0\1\101\76\0\1\102\64\0\1\103\71\0"+
    "\1\104\36\0\1\52\2\0\27\52\1\0\33\52\1\0"+
    "\3\52\2\0\1\54\67\0\1\105\2\0\4\105\1\106"+
    "\13\105\1\107\1\110\1\111\4\105\1\112\33\105\1\113"+
    "\1\114\11\0\1\115\71\0\1\116\62\0\1\117\2\0"+
    "\4\117\1\120\13\117\1\121\1\122\1\123\4\117\1\124"+
    "\34\117\1\125\2\0\1\64\1\5\1\6\67\64\4\0"+
    "\4\10\1\0\4\10\1\126\14\10\24\0\10\10\1\0"+
    "\1\10\6\0\4\10\1\0\3\10\1\127\15\10\24\0"+
    "\10\10\1\0\1\10\6\0\4\10\1\0\13\10\1\130"+
    "\5\10\24\0\10\10\1\0\1\10\6\0\4\10\1\0"+
    "\11\10\1\131\7\10\24\0\10\10\1\0\1\10\6\0"+
    "\4\10\1\0\5\10\1\132\13\10\24\0\10\10\1\0"+
    "\1\10\6\0\4\10\1\0\14\10\1\133\4\10\24\0"+
    "\10\10\1\0\1\10\6\0\4\10\1\0\13\10\1\134"+
    "\5\10\24\0\10\10\1\0\1\10\6\0\4\10\1\0"+
    "\2\10\1\135\16\10\24\0\10\10\1\0\1\10\6\0"+
    "\4\10\1\0\17\10\1\136\1\10\24\0\10\10\1\0"+
    "\1\10\61\0\1\137\52\0\1\140\35\0\1\141\1\0"+
    "\1\141\2\0\1\141\3\0\1\141\1\0\1\141\7\0"+
    "\1\141\1\0\1\141\24\0\10\141\13\0\1\142\71\0"+
    "\1\143\71\0\1\144\71\0\1\145\71\0\1\146\66\0"+
    "\1\147\1\0\1\147\1\142\1\0\1\147\3\0\1\147"+
    "\1\0\1\147\7\0\1\147\1\0\1\147\24\0\10\147"+
    "\10\0\4\10\1\0\4\10\1\150\14\10\24\0\10\10"+
    "\1\0\1\10\6\0\4\10\1\0\3\10\1\151\15\10"+
    "\24\0\10\10\1\0\1\10\6\0\4\10\1\0\11\10"+
    "\1\152\7\10\24\0\10\10\1\0\1\10\6\0\4\10"+
    "\1\0\15\10\1\153\3\10\24\0\10\10\1\0\1\10"+
    "\6\0\4\10\1\0\2\10\1\154\16\10\24\0\10\10"+
    "\1\0\1\10\6\0\4\10\1\0\4\10\1\155\14\10"+
    "\24\0\10\10\1\0\1\10\6\0\4\10\1\0\11\10"+
    "\1\156\7\10\24\0\10\10\1\0\1\10\61\0\1\157"+
    "\16\0\1\160\1\0\1\160\2\0\1\160\3\0\1\160"+
    "\1\0\1\160\7\0\1\160\1\0\1\160\24\0\10\160"+
    "\10\0\1\161\1\0\1\161\1\162\1\0\1\161\3\0"+
    "\1\161\1\0\1\161\7\0\1\161\1\0\1\161\24\0"+
    "\10\161\10\0\4\10\1\0\4\10\1\163\14\10\24\0"+
    "\10\10\1\0\1\10\6\0\4\10\1\0\4\10\1\164"+
    "\14\10\24\0\10\10\1\0\1\10\6\0\4\10\1\0"+
    "\13\10\1\165\5\10\24\0\10\10\1\0\1\10\6\0"+
    "\4\10\1\0\12\10\1\166\6\10\24\0\10\10\1\0"+
    "\1\10\62\0\1\167\15\0\1\170\1\0\1\170\2\0"+
    "\1\170\3\0\1\170\1\0\1\170\7\0\1\170\1\0"+
    "\1\170\24\0\10\170\10\0\1\171\1\0\1\171\1\162"+
    "\1\0\1\171\3\0\1\171\1\0\1\171\7\0\1\171"+
    "\1\0\1\171\24\0\10\171\10\0\4\10\1\0\10\10"+
    "\1\172\10\10\24\0\10\10\1\0\1\10\6\0\4\10"+
    "\1\0\14\10\1\173\4\10\24\0\10\10\1\0\1\10"+
    "\62\0\1\174\15\0\1\175\1\0\1\175\2\0\1\175"+
    "\3\0\1\175\1\0\1\175\7\0\1\175\1\0\1\175"+
    "\24\0\10\175\10\0\1\176\1\0\1\176\1\162\1\0"+
    "\1\176\3\0\1\176\1\0\1\176\7\0\1\176\1\0"+
    "\1\176\24\0\10\176\65\0\1\177\17\0\1\162\141\0"+
    "\1\200\23\0\1\201\140\0\1\202\73\0\1\203\72\0"+
    "\1\204\72\0\1\205\72\0\1\206\65\0\1\207\71\0"+
    "\1\210\74\0\1\211\70\0\1\212\17\0\1\213\143\0"+
    "\1\214\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4930];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\1\1\2\11"+
    "\11\1\1\11\2\1\1\11\3\1\1\11\1\1\13\11"+
    "\2\1\2\11\2\1\2\11\15\1\1\11\1\0\1\11"+
    "\1\0\11\11\1\1\2\11\1\0\1\1\5\0\11\1"+
    "\1\0\1\11\1\1\5\11\1\0\7\1\1\0\1\1"+
    "\1\0\1\11\4\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\11\16\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    // A buffer to start and store strings when lexing
    private StringBuffer stringLiteral = new StringBuffer();
    private XiTokenFactory symFactory;

    // Store the col where the string or char literal starts
    private int stringLiteralStartCol = 0;
    private int charLiteralStartCol = 0;

    private String errorString = "error:";

    public XiLexer(java.io.Reader in, XiTokenFactory tf){
    	this(in);
    	symFactory = tf;
    }

    // flex generates 0-indexed line, col, we need 1-indexed
    private XiToken symbol(String name, int id, int line, int col, Object val) {
        XiTokenLocation loc = new XiTokenLocation(line+1, col+1);
        return symFactory.newSymbol(name, id, loc, val);
    }

    private XiToken symbol(String name, int id, int line, int col) {
        return symbol(name, id, line, col, name);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public XiLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol("EOF", sym.EOF, yyline, yycolumn);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String message = "illegal symbol <" + yytext() + ">";
    return symbol (errorString + message, sym.ERROR, yyline, yycolumn,
     message);
            } 
            // fall through
          case 66: break;
          case 2: 
            { 
            } 
            // fall through
          case 67: break;
          case 3: 
            { try {
            return symbol("integer " + yytext(), sym.INT_LIT,
                yyline, yycolumn, Long.parseLong(yytext()));
        } catch (NumberFormatException e) {
            String message = "invalid integer";
            return symbol(errorString + message, sym.ERROR,
                yyline, yycolumn, message);
        }
            } 
            // fall through
          case 68: break;
          case 4: 
            { return symbol("id " + yytext(), sym.ID, yyline, yycolumn, yytext());
            } 
            // fall through
          case 69: break;
          case 5: 
            { charLiteralStartCol = yycolumn; yybegin(CHAR);
            } 
            // fall through
          case 70: break;
          case 6: 
            { return symbol(yytext(), sym.DIV, yyline, yycolumn);
            } 
            // fall through
          case 71: break;
          case 7: 
            { return symbol(yytext(), sym.UNDERSCORE, yyline, yycolumn);
            } 
            // fall through
          case 72: break;
          case 8: 
            { stringLiteral.setLength(0);
                stringLiteralStartCol = yycolumn;
                yybegin(STRING);
            } 
            // fall through
          case 73: break;
          case 9: 
            { return symbol(yytext(), sym.EQ, yyline, yycolumn);
            } 
            // fall through
          case 74: break;
          case 10: 
            { return symbol(yytext(), sym.MINUS, yyline, yycolumn);
            } 
            // fall through
          case 75: break;
          case 11: 
            { return symbol(yytext(), sym.PLUS, yyline, yycolumn);
            } 
            // fall through
          case 76: break;
          case 12: 
            { return symbol(yytext(), sym.NOT, yyline, yycolumn);
            } 
            // fall through
          case 77: break;
          case 13: 
            { return symbol(yytext(), sym.MULT, yyline, yycolumn);
            } 
            // fall through
          case 78: break;
          case 14: 
            { return symbol(yytext(), sym.GT, yyline, yycolumn);
            } 
            // fall through
          case 79: break;
          case 15: 
            { return symbol(yytext(), sym.MOD, yyline, yycolumn);
            } 
            // fall through
          case 80: break;
          case 16: 
            { return symbol(yytext(), sym.LT, yyline, yycolumn);
            } 
            // fall through
          case 81: break;
          case 17: 
            { return symbol(yytext(), sym.AND, yyline, yycolumn);
            } 
            // fall through
          case 82: break;
          case 18: 
            { return symbol(yytext(), sym.OR, yyline, yycolumn);
            } 
            // fall through
          case 83: break;
          case 19: 
            { return symbol(yytext(), sym.COLON, yyline, yycolumn);
            } 
            // fall through
          case 84: break;
          case 20: 
            { return symbol(yytext(), sym.SEMICOLON, yyline, yycolumn);
            } 
            // fall through
          case 85: break;
          case 21: 
            { return symbol(yytext(), sym.COMMA, yyline, yycolumn);
            } 
            // fall through
          case 86: break;
          case 22: 
            { return symbol(yytext(), sym.LPAREN, yyline, yycolumn);
            } 
            // fall through
          case 87: break;
          case 23: 
            { return symbol(yytext(), sym.RPAREN, yyline, yycolumn);
            } 
            // fall through
          case 88: break;
          case 24: 
            { return symbol(yytext(), sym.LBRAC, yyline, yycolumn);
            } 
            // fall through
          case 89: break;
          case 25: 
            { return symbol(yytext(), sym.RBRAC, yyline, yycolumn);
            } 
            // fall through
          case 90: break;
          case 26: 
            { return symbol(yytext(), sym.LCURL, yyline, yycolumn);
            } 
            // fall through
          case 91: break;
          case 27: 
            { return symbol(yytext(), sym.RCURL, yyline, yycolumn);
            } 
            // fall through
          case 92: break;
          case 28: 
            { stringLiteral.append( yytext() );
            } 
            // fall through
          case 93: break;
          case 29: 
            { yybegin(YYINITIAL);
                      String message = "missing ending double quotes";
                      return symbol(
              errorString + message, sym.ERROR, yyline, stringLiteralStartCol,
              message);
            } 
            // fall through
          case 94: break;
          case 30: 
            { yybegin(YYINITIAL);
                      String s = stringLiteral.toString();
                      return symbol("string " + s, sym.STRING_LIT, yyline,
                        stringLiteralStartCol, s);
            } 
            // fall through
          case 95: break;
          case 31: 
            { yybegin(YYINITIAL);
                      String message = "invalid character";
                      return symbol(
              errorString + message, sym.ERROR, yyline, charLiteralStartCol,
              message);
            } 
            // fall through
          case 96: break;
          case 32: 
            { yybegin(YYINITIAL);
                      String message = "empty character literal";
                      return symbol(
              errorString + message, sym.ERROR, yyline, charLiteralStartCol,
              message);
            } 
            // fall through
          case 97: break;
          case 33: 
            { return symbol(yytext(), sym.IF, yyline, yycolumn);
            } 
            // fall through
          case 98: break;
          case 34: 
            { return symbol(yytext(), sym.EQEQ, yyline, yycolumn);
            } 
            // fall through
          case 99: break;
          case 35: 
            { return symbol(yytext(), sym.NEQ, yyline, yycolumn);
            } 
            // fall through
          case 100: break;
          case 36: 
            { return symbol(yytext(), sym.GTEQ, yyline, yycolumn);
            } 
            // fall through
          case 101: break;
          case 37: 
            { return symbol(yytext(), sym.LTEQ, yyline, yycolumn);
            } 
            // fall through
          case 102: break;
          case 38: 
            { yybegin(YYINITIAL);
                      String message = "invalid escape character";
                      return symbol(
              errorString + message, sym.ERROR, yyline, yycolumn, message);
            } 
            // fall through
          case 103: break;
          case 39: 
            { stringLiteral.append( "\'" );
            } 
            // fall through
          case 104: break;
          case 40: 
            { stringLiteral.append( "\r" );
            } 
            // fall through
          case 105: break;
          case 41: 
            { stringLiteral.append( "\t" );
            } 
            // fall through
          case 106: break;
          case 42: 
            { stringLiteral.append( "\n" );
            } 
            // fall through
          case 107: break;
          case 43: 
            { stringLiteral.append( "\"" );
            } 
            // fall through
          case 108: break;
          case 44: 
            { stringLiteral.append( "\\" );
            } 
            // fall through
          case 109: break;
          case 45: 
            { yybegin(YYINITIAL);
                      Character c = yytext().charAt(0);
                      return symbol("character " + c, sym.CHAR_LIT,
                        yyline, charLiteralStartCol, c);
            } 
            // fall through
          case 110: break;
          case 46: 
            { yybegin(YYINITIAL);
                      char c = '\"';
                      return symbol("character " + c, sym.CHAR_LIT,
                        yyline, charLiteralStartCol, c);
            } 
            // fall through
          case 111: break;
          case 47: 
            { yybegin(YYINITIAL);
                      char c = '\\';
                      return symbol("character " + c, sym.CHAR_LIT,
                        yyline, charLiteralStartCol, c);
            } 
            // fall through
          case 112: break;
          case 48: 
            { return symbol(yytext(), sym.USE, yyline, yycolumn);
            } 
            // fall through
          case 113: break;
          case 49: 
            { return symbol(yytext(), sym.INT_TYPE, yyline, yycolumn);
            } 
            // fall through
          case 114: break;
          case 50: 
            { return symbol(yytext(), sym.HI_MULT, yyline, yycolumn);
            } 
            // fall through
          case 115: break;
          case 51: 
            { stringLiteral.append( (char) Integer.parseInt(
                        yytext().substring(2, yylength()), 16
                    ));
            } 
            // fall through
          case 116: break;
          case 52: 
            { yybegin(YYINITIAL);
                      String message = "invalid escape character";
                      return symbol(
              errorString + message, sym.ERROR, yyline, charLiteralStartCol,
              message);
            } 
            // fall through
          case 117: break;
          case 53: 
            { yybegin(YYINITIAL);
                      char c = '\'';
                      return symbol("character " + c, sym.CHAR_LIT,
                        yyline, charLiteralStartCol, c);
            } 
            // fall through
          case 118: break;
          case 54: 
            { yybegin(YYINITIAL);
                      char c = '\r';
                      return symbol("character " + c, sym.CHAR_LIT,
                        yyline, charLiteralStartCol, c);
            } 
            // fall through
          case 119: break;
          case 55: 
            { yybegin(YYINITIAL);
                      char c = '\t';
                      return symbol("character " + c, sym.CHAR_LIT,
                        yyline, charLiteralStartCol, c);
            } 
            // fall through
          case 120: break;
          case 56: 
            { yybegin(YYINITIAL);
                      char c = '\n';
                      return symbol("character " + c, sym.CHAR_LIT,
                        yyline, charLiteralStartCol, c);
            } 
            // fall through
          case 121: break;
          case 57: 
            { return symbol(yytext(), sym.ELSE, yyline, yycolumn);
            } 
            // fall through
          case 122: break;
          case 58: 
            { return symbol(yytext(), sym.BOOL_LIT, yyline, yycolumn,
        true);
            } 
            // fall through
          case 123: break;
          case 59: 
            { return symbol(yytext(), sym.BOOL_TYPE, yyline, yycolumn);
            } 
            // fall through
          case 124: break;
          case 60: 
            { yybegin(YYINITIAL);
                      char c = Character.forDigit(
                              Integer.parseInt(
                                      yytext().substring(2, yylength()), 16
                              ), 10
                      );
                      return symbol("character " + c, sym.CHAR_LIT,
                        yyline, charLiteralStartCol, c);
            } 
            // fall through
          case 125: break;
          case 61: 
            { return symbol(yytext(), sym.BOOL_LIT, yyline, yycolumn,
        false);
            } 
            // fall through
          case 126: break;
          case 62: 
            { return symbol(yytext(), sym.WHILE, yyline, yycolumn);
            } 
            // fall through
          case 127: break;
          case 63: 
            { return symbol(yytext(), sym.LENGTH, yyline, yycolumn);
            } 
            // fall through
          case 128: break;
          case 64: 
            { return symbol(yytext(), sym.RETURN, yyline, yycolumn);
            } 
            // fall through
          case 129: break;
          case 65: 
            { return symbol("integer " + yytext(), sym.INT_LIT,
        yyline, yycolumn, Long.MIN_VALUE);
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
