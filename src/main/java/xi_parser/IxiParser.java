
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package xi_parser;

import ast.*;
import lexer.XiLexer;
import lexer.XiToken;
import polyglot.util.Pair;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.Collections;
import lexer.XiTokenFactory;
import java_cup.runtime.Symbol;
import xic_error.LexicalError;
import xic_error.SyntaxError;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b 20150326 generated parser.
  */
public class IxiParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public IxiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public IxiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public IxiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\006\003\000\002\006" +
    "\003\000\002\005\003\000\002\005\003\000\002\007\005" +
    "\000\002\007\005\000\002\011\003\000\002\011\005\000" +
    "\002\012\003\000\002\012\005\000\002\004\005\000\002" +
    "\013\004\000\002\013\005\000\002\010\004\000\002\010" +
    "\006\000\002\002\003\000\002\002\004\000\002\003\002" +
    "\000\002\003\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\006\002\uffef\004\006\001\002\000\006\002" +
    "\ufff1\004\ufff1\001\002\000\004\002\041\001\002\000\004" +
    "\046\011\001\002\000\006\002\uffee\004\006\001\002\000" +
    "\006\002\ufff0\004\ufff0\001\002\000\006\004\032\047\033" +
    "\001\002\000\010\002\ufff3\004\ufff3\043\013\001\002\000" +
    "\006\011\020\012\021\001\002\000\014\002\ufffd\004\ufffd" +
    "\045\ufffd\047\ufffd\050\026\001\002\000\010\002\ufff2\004" +
    "\ufff2\045\024\001\002\000\014\002\ufffe\004\ufffe\045\ufffe" +
    "\047\ufffe\050\022\001\002\000\010\002\ufffa\004\ufffa\045" +
    "\ufffa\001\002\000\014\002\uffff\004\uffff\045\uffff\047\uffff" +
    "\050\uffff\001\002\000\014\002\000\004\000\045\000\047" +
    "\000\050\000\001\002\000\004\051\023\001\002\000\014" +
    "\002\ufffc\004\ufffc\045\ufffc\047\ufffc\050\ufffc\001\002\000" +
    "\006\011\020\012\021\001\002\000\010\002\ufff9\004\ufff9" +
    "\045\ufff9\001\002\000\004\051\027\001\002\000\014\002" +
    "\ufffb\004\ufffb\045\ufffb\047\ufffb\050\ufffb\001\002\000\006" +
    "\045\ufff8\047\ufff8\001\002\000\006\045\036\047\037\001" +
    "\002\000\004\043\034\001\002\000\010\002\ufff5\004\ufff5" +
    "\043\ufff5\001\002\000\006\011\020\012\021\001\002\000" +
    "\006\045\ufff6\047\ufff6\001\002\000\004\004\032\001\002" +
    "\000\010\002\ufff4\004\ufff4\043\ufff4\001\002\000\006\045" +
    "\ufff7\047\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\010\002\006\003\004\010\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\011\001\001" +
    "\000\004\010\007\001\001\000\002\001\001\000\006\004" +
    "\027\012\030\001\001\000\002\001\001\000\012\005\016" +
    "\006\015\007\013\011\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\024\006\015\007\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\034\006\015\007\013\001\001\000\002\001" +
    "\001\000\004\004\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IxiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$IxiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IxiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = lexer.next_token(); // s is an XiToken wrapped as a Symbol
    XiToken t = (XiToken) s;
    if (t.sym == sym.ERROR) {
        throw new LexicalError(t.getValue().toString(), t.getLocation());
    } else {
        return s;
    }

    }


    XiLexer lexer;

    public IxiParser (XiLexer l, XiTokenFactory xtf) {
        super(l,xtf);
        this.lexer = l;
    }

    public void syntax_error(Symbol s) {
        XiToken t = (XiToken) s;
        String message = String.format(
            "Unexpected token %s", t.getValue()
        );
        throw new SyntaxError(message, t.getLocation());
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$IxiParser$actions {
    private final IxiParser parser;

    /** Constructor */
    CUP$IxiParser$actions(IxiParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 19. */
    public final java_cup.runtime.Symbol CUP$IxiParser$do_action_part00000000(
            int                        CUP$IxiParser$act_num,
            java_cup.runtime.lr_parser CUP$IxiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$IxiParser$stack,
            int                        CUP$IxiParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$IxiParser$result;

        /* select the action based on the action number */
        switch (CUP$IxiParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= interface_file EOF 
            {
                Object RESULT = null;
                Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1)).xleft;
                Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1)).xright;
                Object start_val = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1).<Object> value();
                RESULT = start_val;
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1), CUP$IxiParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$IxiParser$parser.done_parsing();
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // basic_type ::= BOOL_TYPE 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                Object t = CUP$IxiParser$stack.peek().<Object> value();
                 RESULT = new TypeTTauBool(); 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("basic_type",4, CUP$IxiParser$stack.peek(), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // basic_type ::= INT_TYPE 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                Object t = CUP$IxiParser$stack.peek().<Object> value();
                 RESULT = new TypeTTauInt(); 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("basic_type",4, CUP$IxiParser$stack.peek(), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // type ::= basic_type 
            {
                TypeTTau RESULT = null;
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                TypeTTau b = CUP$IxiParser$stack.peek().<TypeTTau> value();
                 RESULT = b; 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("type",3, CUP$IxiParser$stack.peek(), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // type ::= list_type 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                TypeTTau t = CUP$IxiParser$stack.peek().<TypeTTau> value();
                 RESULT = t; 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("type",3, CUP$IxiParser$stack.peek(), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // list_type ::= basic_type LBRAC RBRAC 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xright;
                TypeTTau t = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2).<TypeTTau> value();
                 RESULT = new TypeTTauArray(t); 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("list_type",5, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // list_type ::= list_type LBRAC RBRAC 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xright;
                TypeTTau t = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2).<TypeTTau> value();
                 RESULT = new TypeTTauArray(t); 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("list_type",5, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // type_list ::= type 
            {
                ArrayList<TypeTTau> RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                TypeTTau t = CUP$IxiParser$stack.peek().<TypeTTau> value();
                
    ArrayList<TypeTTau> l = new ArrayList<>();
    l.add(t);
    RESULT = l; 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("type_list",7, CUP$IxiParser$stack.peek(), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // type_list ::= type_list COMMA type 
            {
                ArrayList<TypeTTau> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xright;
                ArrayList<TypeTTau> l = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2).<ArrayList<TypeTTau>> value();
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                TypeTTau t = CUP$IxiParser$stack.peek().<TypeTTau> value();
                 l.add(t); RESULT = l; 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("type_list",7, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // annotated_var_list ::= annotated_var 
            {
                ArrayList<Pair<String,TypeTTau>> RESULT = null;
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                Pair a = CUP$IxiParser$stack.peek().<Pair> value();
                
    ArrayList<Pair<String, TypeTTau>> l = new ArrayList<>();
    l.add(a);
    RESULT = l; 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("annotated_var_list",8, CUP$IxiParser$stack.peek(), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // annotated_var_list ::= annotated_var_list COMMA annotated_var 
            {
                ArrayList<Pair<String,TypeTTau>> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xright;
                ArrayList<Pair<String,TypeTTau>> l = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2).<ArrayList<Pair<String,TypeTTau>>> value();
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                Pair a = CUP$IxiParser$stack.peek().<Pair> value();
                 l.add(a); RESULT = l; 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("annotated_var_list",8, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // annotated_var ::= ID COLON type 
            {
                Pair RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xright;
                String i = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2).<String> value();
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                TypeTTau t = CUP$IxiParser$stack.peek().<TypeTTau> value();
                 RESULT = new Pair<String, TypeTTau>(i, t); 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("annotated_var",2, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // func_args ::= LPAREN RPAREN 
            {
                ArrayList<Pair<String,TypeTTau>> RESULT = null;
                 RESULT = new ArrayList<Pair<String, TypeTTau>>(); 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("func_args",9, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // func_args ::= LPAREN annotated_var_list RPAREN 
            {
                ArrayList<Pair<String,TypeTTau>> RESULT = null;
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1)).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1)).xright;
                ArrayList<Pair<String,TypeTTau>> a = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1).<ArrayList<Pair<String,TypeTTau>>> value();
                 RESULT = a; 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("func_args",9, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // func_decl ::= ID func_args 
            {
                FuncDecl RESULT = null;
                Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1)).xleft;
                Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1)).xright;
                String n = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1).<String> value();
                Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                ArrayList<Pair<String,TypeTTau>> p = CUP$IxiParser$stack.peek().<ArrayList<Pair<String,TypeTTau>>> value();
                 RESULT = new FuncDecl(n, p, nxleft); 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("func_decl",6, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // func_decl ::= ID func_args COLON type_list 
            {
                FuncDecl RESULT = null;
                Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-3)).xleft;
                Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-3)).xright;
                String n = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-3).<String> value();
                Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xleft;
                Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2)).xright;
                ArrayList<Pair<String,TypeTTau>> p = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-2).<ArrayList<Pair<String,TypeTTau>>> value();
                Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                ArrayList<TypeTTau> r = CUP$IxiParser$stack.peek().<ArrayList<TypeTTau>> value();
                
    // r.size() >= 1
    TypeT rt;
    if (r.size() == 1) {
        rt = r.get(0);
    } else {
        rt = new TypeTList(r);
    }
    RESULT = new FuncDecl(n, p, rt, nxleft); 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("func_decl",6, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-3), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // interface ::= func_decl 
            {
                FileInterface RESULT = null;
                Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                FuncDecl d = CUP$IxiParser$stack.peek().<FuncDecl> value();
                
      ArrayList<FuncDecl> l = new ArrayList<>();
      l.add(d);
      RESULT = new FileInterface(l, dxleft); 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("interface",0, CUP$IxiParser$stack.peek(), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // interface ::= interface func_decl 
            {
                FileInterface RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1)).xright;
                FileInterface i = CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1).<FileInterface> value();
                Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                FuncDecl d = CUP$IxiParser$stack.peek().<FuncDecl> value();
                 i.addFuncDecl(d); RESULT = i; 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("interface",0, CUP$IxiParser$stack.elementAt(CUP$IxiParser$top-1), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // interface_file ::= 
            {
                Object RESULT = null;
                 // do nothing, empty interface file 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("interface_file",1, CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // interface_file ::= interface 
            {
                Object RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IxiParser$stack.peek()).xright;
                FileInterface i = CUP$IxiParser$stack.peek().<FileInterface> value();
                 RESULT = i; 
                CUP$IxiParser$result = parser.getSymbolFactory().newSymbol("interface_file",1, CUP$IxiParser$stack.peek(), CUP$IxiParser$stack.peek(), RESULT);
            }
            return CUP$IxiParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$IxiParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$IxiParser$do_action(
            int                        CUP$IxiParser$act_num,
            java_cup.runtime.lr_parser CUP$IxiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$IxiParser$stack,
            int                        CUP$IxiParser$top)
            throws java.lang.Exception {
            return CUP$IxiParser$do_action_part00000000(
                           CUP$IxiParser$act_num,
                           CUP$IxiParser$parser,
                           CUP$IxiParser$stack,
                           CUP$IxiParser$top);
    }
}

}
