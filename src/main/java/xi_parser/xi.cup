package xi_parser;
// A stub for a Xi CUP specification.

import ast.*;
import lexer.XiLexer;
import lexer.XiToken;
import polyglot.util.Pair;

import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.Collections;

import lexer.XiTokenFactory;
import java_cup.runtime.Symbol;
import xic_error.LexicalError;
import xic_error.SyntaxError;

parser code
{:
    XiLexer lexer;

    public XiParser (XiLexer l, XiTokenFactory xtf) {
        super(l,xtf);
        this.lexer = l;
    }

    public void syntax_error(Symbol s) {
        XiToken t = (XiToken) s;
        String message = String.format(
            "Unexpected token %s", t.getValue()
        );
        throw new SyntaxError(message, t.getLocation());
    }
:};

scan with
{:
    Symbol s = lexer.next_token(); // s is an XiToken wrapped as a Symbol
    XiToken t = (XiToken) s;
    if (t.sym == sym.ERROR) {
        throw new LexicalError(t.getValue().toString(), t.getLocation());
    } else {
        return s;
    }
:};

terminal String ID;
terminal String STRING_LIT;
terminal Character CHAR_LIT;
terminal Long INT_LIT;
terminal Boolean BOOL_LIT;
terminal INT_TYPE, BOOL_TYPE;

terminal
    UNDERSCORE,
    USE,
    IF,
    WHILE,
    ELSE,
    RETURN,
    LENGTH,

    EQ,
    MINUS,
    PLUS,
    NOT,
    MULT,
    HI_MULT,
    DIV,
    MOD,
    EQEQ,
    NEQ,
    GT,
    LT,
    GTEQ,
    LTEQ,
    AND,
    OR,
    UMINUS, //maybe not necessary

    COLON,
    SEMICOLON,
    COMMA,
    LPAREN,
    RPAREN,
    LBRAC,
    RBRAC,
    LCURL,
    RCURL,
    ERROR;

nonterminal FileSource source;
nonterminal FileInterface interface;
nonterminal FileProgram program;

nonterminal Pair annotated_var, decl_annotated_var;
nonterminal TypeTTau type, basic_type, init_list_type, list_type;
nonterminal FuncDecl func_decl;
nonterminal FuncDefn func_defn;
nonterminal UseInterface use_interface;

nonterminal Expr expr, assignable_expr;
nonterminal Assignable assignable;

nonterminal Stmt statement, matchedstmt, unmatchedstmt;
nonterminal Stmt return;
nonterminal Stmt block;

nonterminal ArrayList<Pair<String, TypeTTau>> annotated_varlist;
nonterminal ArrayList<TypeDecl> underscore_varlist;
nonterminal ArrayList<Expr> exprlist;
nonterminal ArrayList<Stmt> stmtlist;
nonterminal ArrayList<UseInterface> importlist;
nonterminal ArrayList<FuncDefn> func_defnlist;
nonterminal ArrayList<TypeTTau> typelist;
nonterminal ArrayList<Expr> indices;

precedence left COMMA;
precedence left OR;
precedence left AND;
precedence left NEQ, EQEQ;
precedence left LT, GT, LTEQ, GTEQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD, HI_MULT;
precedence nonassoc UMINUS, NOT;
precedence left LBRAC, RBRAC, LPAREN, RPAREN;


start with source;

//TYPES
basic_type ::=
  BOOL_TYPE:t {: RESULT = new TypeTTauBool(); :}
| INT_TYPE:t {: RESULT = new TypeTTauInt(); :}
;

//types legal for use everywhere
//does not allow list types with initialized length
//no need to unwrap
type ::=
  basic_type:b {: RESULT = b; :}
| list_type:t {: RESULT = t; :}
;

list_type ::=
  basic_type:t LBRAC RBRAC {: RESULT = new TypeTTauArray(t); :}
| list_type:t LBRAC RBRAC {: RESULT = new TypeTTauArray(t); :}
;

//list types with initialized lengths, can only be used in decl w/o assign
//example: int[3][n]
init_list_type ::=
  basic_type:t indices:i {:
    TypeTTau curr = t;
    List<Expr> lengths = i;
    Collections.reverse(lengths);
    for (Expr e : lengths){
        curr = new TypeTTauArray(curr, e);
    }
    RESULT = curr;
  :}
| basic_type:t indices:i LBRAC RBRAC {:
    TypeTTau curr = new TypeTTauArray(t);
    List<Expr> lengths = i;
    Collections.reverse(lengths);
    for (Expr e : lengths){
        curr = new TypeTTauArray(curr, e);
    }
    RESULT = curr;
  :}
| init_list_type:t LBRAC RBRAC {:
    TypeTTauArray curr = (TypeTTauArray) t;
    while (curr.getTypeTTau() instanceof TypeTTauArray){
        curr = (TypeTTauArray) curr.getTypeTTau();
    }
    curr.setTypeTTau(new TypeTTauArray(curr.getTypeTTau()));
    RESULT = t;
  :}
;

typelist ::=
  type:t {:
    ArrayList<TypeTTau> l = new ArrayList<>();
    l.add(t);
    RESULT = l; :}
  | typelist:l COMMA type:t {: l.add(t); RESULT = l; :}
;

annotated_varlist ::=
  annotated_var:a {:
    ArrayList<Pair<String, TypeTTau>> l = new ArrayList<>();
    l.add(a);
    RESULT = l; :}
| annotated_varlist:l COMMA annotated_var:a {: l.add(a); RESULT = l; :}
;

annotated_var ::=
  ID:i COLON type:t {: RESULT = new Pair<String, TypeTTau>(i, t); :}
;

decl_annotated_var ::=
  ID:i COLON init_list_type:t {: RESULT = new Pair<String, TypeTTau>(i, t); :}
;

underscore_varlist ::=
  UNDERSCORE COMMA UNDERSCORE {:
    ArrayList<TypeDecl> l = new ArrayList<>();
    l.add(new TypeDeclUnderscore()); l.add(new TypeDeclUnderscore());
    RESULT = l; :}
| annotated_varlist:l COMMA UNDERSCORE {:
    List<TypeDecl> newl = l.stream()
        .map(TypeDeclVar::new).collect(Collectors.toList());
    newl.add(new TypeDeclUnderscore()); RESULT = new ArrayList<>(newl); :}
| UNDERSCORE COMMA annotated_varlist:l {:
    List<TypeDecl> newl = l.stream()
        .map(TypeDeclVar::new).collect(Collectors.toList());
    newl.add(0, new TypeDeclUnderscore()); RESULT = new ArrayList<>(newl); :}
| underscore_varlist:l COMMA UNDERSCORE {:
    l.add(new TypeDeclUnderscore()); RESULT = l; :}
| underscore_varlist:l COMMA annotated_var:a {:
    l.add(new TypeDeclVar(a)); RESULT = l; :}
;

//FUNCTION DECLARATIONS AND DEFINITIONS
// Need to differentiate type and typelist with COMMA, otherwise possible
// shift-shift conflict
func_decl ::=
  ID:n LPAREN RPAREN {:
    ArrayList<Pair<String, TypeTTau>> l = new ArrayList<>();
    RESULT = new FuncDecl(n, l, nxleft); :}
| ID:n LPAREN RPAREN COLON type:t {:
    ArrayList<Pair<String, TypeTTau>> l = new ArrayList<>();
    RESULT = new FuncDecl(n, l, t, nxleft); :}
| ID:n LPAREN RPAREN COLON type:t1 COMMA typelist:t2 {:
    ArrayList<Pair<String, TypeTTau>> l = new ArrayList<>();
    t2.add(0, t1);
    RESULT = new FuncDecl(n, l, new TypeTList(t2), nxleft); :}
| ID:n LPAREN annotated_varlist:p RPAREN {:
    RESULT = new FuncDecl(n, p, nxleft); :}
| ID:n LPAREN annotated_varlist:p RPAREN COLON type:t {:
    RESULT = new FuncDecl(n, p, t, nxleft); :}
| ID:n LPAREN annotated_varlist:p RPAREN COLON type:t1 typelist:t2 {:
    t2.add(0, t1);
    RESULT = new FuncDecl(n, p, new TypeTList(t2), nxleft); :}
;

func_defn ::=
  ID:n LPAREN RPAREN block:b {:
    ArrayList<Pair<String, TypeTTau>> l = new ArrayList<>();
    RESULT = new FuncDefn(n, l, b, nxleft); :}
| ID:n LPAREN RPAREN COLON type:t block:b {:
    ArrayList<Pair<String, TypeTTau>> l = new ArrayList<>();
    RESULT = new FuncDefn(n, l, t, b, nxleft); :}
| ID:n LPAREN RPAREN COLON type:t1 COMMA typelist:t2 block:b {:
    t2.add(0, t1);
    ArrayList<Pair<String, TypeTTau>> l = new ArrayList<>();
    RESULT = new FuncDefn(n, l, new TypeTList(t2), b, nxleft); :}
| ID:n LPAREN annotated_varlist:p RPAREN block:b {:
    RESULT = new FuncDefn(n, p, b, nxleft); :}
| ID:n LPAREN annotated_varlist:p RPAREN COLON type:t block:b {:
    RESULT = new FuncDefn(n, p, t, b, nxleft); :}
| ID:n LPAREN annotated_varlist:p RPAREN COLON type:t1 COMMA typelist:t2 block:b {:
    t2.add(0, t1);
    RESULT = new FuncDefn(n, p, new TypeTList(t2), b, nxleft); :}
;

func_defnlist ::=
  func_defn:d {:
      ArrayList<FuncDefn> l = new ArrayList<>();
      l.add(d);
      RESULT = l; :}
| func_defnlist:l func_defn:d {: l.add(d); RESULT = l; :}
;

//IMPORTS
use_interface ::=
  USE ID:i {: RESULT = new UseInterface(i, ixleft); :}
| USE ID:i SEMICOLON {: RESULT = new UseInterface(i, ixleft); :}
;

importlist ::=
  use_interface:i {:
      ArrayList<UseInterface> l = new ArrayList<>();
      l.add(i);
      RESULT = l; :}
| importlist:l use_interface:i {: l.add(i); RESULT = l; :}
;

//EXPRESSIONS
exprlist ::= //NOTE: THIS DOES NOT SUPPORT COMMAS AT THE END
  expr:e {:
       ArrayList<Expr> l = new ArrayList<>();
       l.add(e);
       RESULT = l; :}
| exprlist:l COMMA expr:e {: l.add(e); RESULT = l; :}
;

//exprs without ( or { on LHS
assignable_expr ::=
  STRING_LIT:s {: RESULT = new ExprArrayLiteral(s, sxleft); :} // strings are really lists of ints
| ID:i {: RESULT = new ExprId(i, ixleft); :}
| ID:i LPAREN exprlist:el RPAREN {:
    RESULT = new ExprFunctionCall(i, el, ixleft); :}
| ID:i LPAREN RPAREN {:
    RESULT = new ExprFunctionCall(i, new ArrayList<Expr>(), ixleft); :}
;

expr ::=
  assignable_expr:e {: RESULT = e; :}
| LCURL:l exprlist:e RCURL {: RESULT = new ExprArrayLiteral(e, lxleft); :}
| LCURL:l exprlist:e COMMA RCURL {: RESULT = new ExprArrayLiteral(e, lxleft); :}
| LCURL:l RCURL {: RESULT = new ExprArrayLiteral(new ArrayList<Expr>(), lxleft); :}
| LPAREN expr:e RPAREN {: RESULT = e; :}//grouping expressions
| LENGTH:l LPAREN expr:e RPAREN {: RESULT = new ExprLength(e, lxleft); :}
| expr:e1 AND:o expr:e2 {: RESULT = new ExprBinop(Binop.AND, e1, e2, oxleft); :}
| expr:e1 OR:o expr:e2 {: RESULT = new ExprBinop(Binop.OR, e1, e2, oxleft); :}
| expr:e1 PLUS:o expr:e2 {: RESULT = new ExprBinop(Binop.PLUS, e1, e2, oxleft); :}
| expr:e1 MINUS:o expr:e2 {: RESULT = new ExprBinop(Binop.MINUS, e1, e2, oxleft); :}
| expr:e1 DIV:o expr:e2 {: RESULT = new ExprBinop(Binop.DIV, e1, e2, oxleft); :}
| expr:e1 MOD:o expr:e2 {: RESULT = new ExprBinop(Binop.MOD, e1, e2, oxleft); :}
| expr:e1 MULT:o expr:e2 {: RESULT = new ExprBinop(Binop.MULT, e1, e2, oxleft); :}
| expr:e1 HI_MULT:o expr:e2 {: RESULT = new ExprBinop(Binop.HI_MULT, e1, e2, oxleft); :}
| expr:e1 EQEQ:o expr:e2 {: RESULT = new ExprBinop(Binop.EQEQ, e1, e2, oxleft); :}
| expr:e1 NEQ:o expr:e2 {: RESULT = new ExprBinop(Binop.NEQ, e1, e2, oxleft); :}
| expr:e1 GT:o expr:e2 {: RESULT = new ExprBinop(Binop.GT, e1, e2, oxleft); :}
| expr:e1 LT:o expr:e2 {: RESULT = new ExprBinop(Binop.LT, e1, e2, oxleft); :}
| expr:e1 GTEQ:o expr:e2 {: RESULT = new ExprBinop(Binop.GTEQ, e1, e2, oxleft); :}
| expr:e1 LTEQ:o expr:e2 {: RESULT = new ExprBinop(Binop.LTEQ, e1, e2, oxleft); :}
| MINUS:o expr:e {: RESULT = new ExprUnop(Unop.UMINUS, e, oxleft); :} %prec UMINUS
| NOT:o expr:e {: RESULT = new ExprUnop(Unop.NOT, e, oxleft); :}
| BOOL_LIT:b {: RESULT = new ExprBoolLiteral(b, bxleft); :}
| INT_LIT:i {: RESULT = new ExprIntLiteral(i, ixleft); :}
| CHAR_LIT:c {: RESULT = new ExprIntLiteral(c, cxleft); :} // chars are really ints
| expr:e1 indices:i {:
    Expr curr = e1;
    for (Expr e : i) {
        curr = new ExprIndex(curr, e, ixleft);
    }
    RESULT = curr; :}
;
//STATEMENTS

assignable ::=
  UNDERSCORE:u {: RESULT = new AssignableUnderscore(uxleft); :}
| assignable_expr:e {: RESULT = new AssignableExpr(e, e.getLocation()); :}
| assignable_expr:e1 indices:l {:
    Expr idx = e1;
    for (Expr e : l){
        idx = new ExprIndex(idx, e, e.getLocation());
    }
    RESULT = new AssignableIndex(idx, e1.getLocation());
    :}
;

indices ::=
  LBRAC expr:e RBRAC {: ArrayList<Expr> l = new ArrayList<>(); l.add(e); RESULT = l; :}
| indices:l LBRAC expr:e RBRAC {: l.add(e); RESULT = l; :}
;

matchedstmt ::=
  IF:i expr:e matchedstmt:s1 ELSE matchedstmt:s2 {:
    RESULT = new StmtIfElse(e,s1,s2, ixleft); :}
| WHILE:w expr:e matchedstmt:s {: RESULT = new StmtWhile(e,s, wxleft); :}
| block:b {: RESULT = b; :}
| assignable:a EQ expr:e {: RESULT = new StmtAssign(a, e, axleft); :}
| underscore_varlist:d EQ expr:e {:
    RESULT = new StmtDeclAssign(d, e, dxleft); :}
| decl_annotated_var:d {:
    RESULT = new StmtDecl(new TypeDeclVar(d), dxleft); :}
| annotated_var:d {:
    RESULT = new StmtDecl(new TypeDeclVar(d), dxleft); :}
| annotated_varlist:d EQ expr:e {:
    List<TypeDecl> newd = d.stream()
        .map(TypeDeclVar::new).collect(Collectors.toList());
    RESULT = new StmtDeclAssign(newd, e, dxleft); :}
| ID:i LPAREN exprlist:el RPAREN {:
    RESULT = new StmtProcedureCall(i, el, ixleft); :}
| ID:i LPAREN RPAREN {:
    RESULT = new StmtProcedureCall(i, new ArrayList<Expr>(), ixleft); :}
;


unmatchedstmt ::=
  IF:i expr:e unmatchedstmt:s {: RESULT = new StmtIf(e,s, ixleft); :}
| IF:i expr:e matchedstmt:s {: RESULT = new StmtIf(e,s, ixleft); :}
| WHILE:w expr:e unmatchedstmt:s {: RESULT = new StmtWhile(e,s, wxleft); :}
;

statement ::=
  matchedstmt:m {: RESULT = m; :}
| unmatchedstmt:u {: RESULT = u; :}
;

return ::= //enforces return statements being at the end of blocks + cannot replace blocks
  RETURN:r {: RESULT = new StmtReturn(rxleft); :}
| RETURN:r exprlist:e {: RESULT = new StmtReturn(e, rxleft); :}
| RETURN:r SEMICOLON {: RESULT = new StmtReturn(rxleft); :}
| RETURN:r exprlist:e SEMICOLON {: RESULT = new StmtReturn(e, rxleft); :}
;

stmtlist ::=
  statement:s {:
     ArrayList<Stmt> l = new ArrayList<>();
     l.add(s);
     RESULT = l; :}
| stmtlist:l SEMICOLON statement:s {: l.add(s); RESULT = l; :}
| stmtlist:l statement:s {: l.add(s); RESULT = l; :}
;

block ::=
  LCURL:c return:r RCURL {:
    ArrayList<Stmt> l = new ArrayList<>(); l.add(r);
    RESULT = new StmtBlock(l, cxleft) ; :}
| LCURL:c stmtlist:l RCURL {: RESULT = new StmtBlock(l, cxleft); :}
| LCURL:c stmtlist:l return:r RCURL {: l.add(r); RESULT = new StmtBlock(l, cxleft); :}
| LCURL:c stmtlist:l SEMICOLON RCURL {: RESULT = new StmtBlock(l, cxleft); :}
| LCURL:c stmtlist:l SEMICOLON return:r RCURL {: l.add(r); RESULT = new StmtBlock(l, cxleft); :}
| LCURL:c RCURL {: RESULT = new StmtBlock(cxleft); :}
;

//HIGHEST LEVEL
source ::=
  interface:i {: RESULT = (FileSource) i; :}
| program:p {: RESULT = (FileSource) p; :}
;

interface ::=
  func_decl:d {:
      ArrayList<FuncDecl> l = new ArrayList<>();
      l.add(d);
      RESULT = new FileInterface(l, dxleft); :}
| interface:i func_decl:d {: i.addFuncDecl(d); RESULT = i; :}
;

program ::=
importlist:il func_defnlist:dl {: RESULT = new FileProgram(il, dl, ilxleft); :}
| func_defnlist:dl {:
    RESULT = new FileProgram(new ArrayList<UseInterface>(), dl, dlxleft); :}
;









