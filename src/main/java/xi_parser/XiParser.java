
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package xi_parser;

import ast.*;
import lexer.XiLexer;
import lexer.XiToken;
import polyglot.util.Pair;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.Collections;
import lexer.XiTokenFactory;
import java_cup.runtime.Symbol;
import xic_error.LexicalError;
import xic_error.SyntaxError;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b 20150326 generated parser.
  */
public class XiParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public XiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public XiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\007\003\000\002\007" +
    "\003\000\002\006\003\000\002\006\003\000\002\011\005" +
    "\000\002\011\005\000\002\032\005\000\002\032\006\000" +
    "\002\010\004\000\002\010\006\000\002\010\005\000\002" +
    "\036\003\000\002\036\005\000\002\003\005\000\002\026" +
    "\003\000\002\026\005\000\002\004\005\000\002\005\003" +
    "\000\002\005\003\000\002\030\003\000\002\030\005\000" +
    "\002\027\004\000\002\027\005\000\002\012\005\000\002" +
    "\012\007\000\002\035\003\000\002\035\004\000\002\031" +
    "\003\000\002\031\005\000\002\016\006\000\002\016\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\006\000\002\014\003\000\002\014\005\000\002" +
    "\014\006\000\002\014\004\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\004\000\002\014\004\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\017\003\000\002\017\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\007\000\002\021\007\000\002\021" +
    "\005\000\002\021\003\000\002\021\005\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\006\000" +
    "\002\021\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\020\003\000\002\020\003\000\002\023" +
    "\003\000\002\023\004\000\002\023\004\000\002\023\005" +
    "\000\002\033\003\000\002\033\005\000\002\033\004\000" +
    "\002\024\005\000\002\024\005\000\002\024\006\000\002" +
    "\024\006\000\002\024\007\000\002\024\004\000\002\013" +
    "\004\000\002\013\005\000\002\034\003\000\002\034\004" +
    "\000\002\002\004\000\002\002\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\006\004\011\014\007\001\002\000\006\002" +
    "\uffe7\004\uffe7\001\002\000\006\004\uffa2\014\uffa2\001\002" +
    "\000\006\004\011\014\007\001\002\000\004\004\262\001" +
    "\002\000\004\002\261\001\002\000\004\046\014\001\002" +
    "\000\006\002\uff9f\004\011\001\002\000\006\002\uffe6\004" +
    "\uffe6\001\002\000\006\004\200\047\255\001\002\000\006" +
    "\043\017\052\016\001\002\000\024\004\056\005\052\013" +
    "\037\015\060\016\054\020\051\021\044\052\016\053\061" +
    "\001\002\000\006\011\025\012\026\001\002\000\006\002" +
    "\uffe9\004\uffe9\001\002\000\040\004\ufffd\005\ufffd\013\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\044" +
    "\ufffd\045\ufffd\047\ufffd\050\034\052\ufffd\053\ufffd\001\002" +
    "\000\006\045\031\052\016\001\002\000\014\022\ufffe\045" +
    "\ufffe\047\ufffe\050\027\052\ufffe\001\002\000\006\045\ufff5" +
    "\052\ufff5\001\002\000\040\004\uffff\005\uffff\013\uffff\015" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\044\uffff" +
    "\045\uffff\047\uffff\050\uffff\052\uffff\053\uffff\001\002\000" +
    "\040\004\000\005\000\013\000\015\000\016\000\017\000" +
    "\020\000\021\000\022\000\044\000\045\000\047\000\050" +
    "\000\052\000\053\000\001\002\000\004\051\030\001\002" +
    "\000\040\004\ufffc\005\ufffc\013\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\044\ufffc\045\ufffc\047\ufffc" +
    "\050\ufffc\052\ufffc\053\ufffc\001\002\000\006\011\025\012" +
    "\026\001\002\000\006\002\uffe8\004\uffe8\001\002\000\006" +
    "\045\ufff4\052\ufff4\001\002\000\004\051\035\001\002\000" +
    "\040\004\ufffb\005\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\044\ufffb\045\ufffb\047\ufffb\050" +
    "\ufffb\052\ufffb\053\ufffb\001\002\000\004\045\uffed\001\002" +
    "\000\006\022\251\045\uffef\001\002\000\026\004\uffb2\005" +
    "\uffb2\013\uffb2\015\uffb2\016\uffb2\020\uffb2\021\uffb2\044\uffb2" +
    "\052\uffb2\053\uffb2\001\002\000\030\004\uffba\005\uffba\013" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\044\uffba" +
    "\052\uffba\053\uffba\001\002\000\074\004\uffdf\005\uffdf\013" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf" +
    "\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\044\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\001\002\000\034\004\uffb9\005\uffb9\013\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\247\044\uffb9\045" +
    "\uffee\052\uffb9\053\uffb9\001\002\000\004\046\244\001\002" +
    "\000\030\004\uffbb\005\uffbb\013\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\044\uffbb\052\uffbb\053\uffbb\001\002" +
    "\000\004\050\111\001\002\000\026\004\uffb3\005\uffb3\013" +
    "\uffb3\015\uffb3\016\uffb3\020\uffb3\021\uffb3\044\uffb3\052\uffb3" +
    "\053\uffb3\001\002\000\004\022\241\001\002\000\032\004" +
    "\076\005\052\006\065\007\071\010\066\021\044\023\072" +
    "\025\073\044\237\046\067\052\074\053\uffb1\001\002\000" +
    "\074\004\uffe1\005\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\023\uffe1\024\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\001\002\000\026\004\056" +
    "\005\052\013\037\015\060\016\054\020\051\021\044\044" +
    "\225\052\016\053\226\001\002\000\026\004\076\005\052" +
    "\006\065\007\071\010\066\021\044\023\072\025\073\046" +
    "\067\052\074\001\002\000\030\004\uffbd\005\uffbd\013\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\044\uffbd\052" +
    "\uffbd\053\uffbd\001\002\000\012\022\uffc4\043\207\046\206" +
    "\050\uffe0\001\002\000\004\045\174\001\002\000\026\004" +
    "\076\005\052\006\065\007\071\010\066\021\044\023\072" +
    "\025\073\046\067\052\074\001\002\000\032\002\uffa5\004" +
    "\uffa5\005\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\044\uffa5\052\uffa5\053\uffa5\001\002\000\004\053" +
    "\064\001\002\000\026\004\uffad\005\uffad\013\uffad\015\uffad" +
    "\016\uffad\020\uffad\021\uffad\044\uffad\052\uffad\053\uffad\001" +
    "\002\000\032\002\uffaa\004\uffaa\005\uffaa\013\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\044\uffaa\052\uffaa\053" +
    "\uffaa\001\002\000\074\004\uffc6\005\uffc6\013\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\044\uffc6\045" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\001\002" +
    "\000\074\004\uffc8\005\uffc8\013\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\044\uffc8\045\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\001\002\000\026\004" +
    "\076\005\052\006\065\007\071\010\066\021\044\023\072" +
    "\025\073\046\067\052\074\001\002\000\074\004\uffdd\005" +
    "\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\053\uffdd\001\002\000\074\004\uffc7\005\uffc7\013\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\024" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\044" +
    "\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\001\002\000\026\004\076\005\052\006\065\007\071\010" +
    "\066\021\044\023\072\025\073\046\067\052\074\001\002" +
    "\000\026\004\076\005\052\006\065\007\071\010\066\021" +
    "\044\023\072\025\073\046\067\052\074\001\002\000\030" +
    "\004\076\005\052\006\065\007\071\010\066\021\044\023" +
    "\072\025\073\046\067\052\074\053\164\001\002\000\056" +
    "\004\056\005\052\013\037\015\060\016\054\021\044\023" +
    "\107\024\121\026\113\027\122\030\110\031\104\032\116" +
    "\033\120\034\106\035\105\036\117\037\114\040\115\041" +
    "\103\050\111\052\016\001\002\000\076\004\uffe0\005\uffe0" +
    "\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\023" +
    "\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\044\uffe0\045\uffe0\046\077\047\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\001\002\000\030\004\076\005\052\006" +
    "\065\007\071\010\066\021\044\023\072\025\073\046\067" +
    "\047\100\052\074\001\002\000\074\004\uffe2\005\uffe2\013" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2" +
    "\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\001\002\000\006\045\146\047\147\001\002\000\050" +
    "\023\107\024\121\026\113\027\122\030\110\031\104\032" +
    "\116\033\120\034\106\035\105\036\117\037\114\040\115" +
    "\041\103\044\uffe5\045\uffe5\047\uffe5\050\111\053\uffe5\001" +
    "\002\000\026\004\076\005\052\006\065\007\071\010\066" +
    "\021\044\023\072\025\073\046\067\052\074\001\002\000" +
    "\026\004\076\005\052\006\065\007\071\010\066\021\044" +
    "\023\072\025\073\046\067\052\074\001\002\000\026\004" +
    "\076\005\052\006\065\007\071\010\066\021\044\023\072" +
    "\025\073\046\067\052\074\001\002\000\026\004\076\005" +
    "\052\006\065\007\071\010\066\021\044\023\072\025\073" +
    "\046\067\052\074\001\002\000\026\004\076\005\052\006" +
    "\065\007\071\010\066\021\044\023\072\025\073\046\067" +
    "\052\074\001\002\000\026\004\076\005\052\006\065\007" +
    "\071\010\066\021\044\023\072\025\073\046\067\052\074" +
    "\001\002\000\026\004\076\005\052\006\065\007\071\010" +
    "\066\021\044\023\072\025\073\046\067\052\074\001\002" +
    "\000\074\004\uffc5\005\uffc5\013\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\044\uffc5\045\uffc5\047\uffc5" +
    "\050\133\051\uffc5\052\uffc5\053\uffc5\001\002\000\026\004" +
    "\076\005\052\006\065\007\071\010\066\021\044\023\072" +
    "\025\073\046\067\052\074\001\002\000\026\004\076\005" +
    "\052\006\065\007\071\010\066\021\044\023\072\025\073" +
    "\046\067\052\074\001\002\000\026\004\076\005\052\006" +
    "\065\007\071\010\066\021\044\023\072\025\073\046\067" +
    "\052\074\001\002\000\026\004\076\005\052\006\065\007" +
    "\071\010\066\021\044\023\072\025\073\046\067\052\074" +
    "\001\002\000\026\004\076\005\052\006\065\007\071\010" +
    "\066\021\044\023\072\025\073\046\067\052\074\001\002" +
    "\000\026\004\076\005\052\006\065\007\071\010\066\021" +
    "\044\023\072\025\073\046\067\052\074\001\002\000\026" +
    "\004\076\005\052\006\065\007\071\010\066\021\044\023" +
    "\072\025\073\046\067\052\074\001\002\000\026\004\076" +
    "\005\052\006\065\007\071\010\066\021\044\023\072\025" +
    "\073\046\067\052\074\001\002\000\074\004\uffd1\005\uffd1" +
    "\013\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023" +
    "\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\044\uffd1\045\uffd1\047\uffd1\050\111\051\uffd1\052\uffd1" +
    "\053\uffd1\001\002\000\074\004\uffd6\005\uffd6\013\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\024\uffd6" +
    "\026\113\027\122\030\110\031\104\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\044\uffd6" +
    "\045\uffd6\047\uffd6\050\111\051\uffd6\052\uffd6\053\uffd6\001" +
    "\002\000\074\004\uffcf\005\uffcf\013\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\023\107\024\121\026\113\027" +
    "\122\030\110\031\104\032\uffcf\033\uffcf\034\106\035\105" +
    "\036\117\037\114\040\uffcf\041\uffcf\044\uffcf\045\uffcf\047" +
    "\uffcf\050\111\051\uffcf\052\uffcf\053\uffcf\001\002\000\074" +
    "\004\uffcc\005\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\023\107\024\121\026\113\027\122\030\110" +
    "\031\104\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\044\uffcc\045\uffcc\047\uffcc\050\111" +
    "\051\uffcc\052\uffcc\053\uffcc\001\002\000\074\004\uffd0\005" +
    "\uffd0\013\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\023\107\024\121\026\113\027\122\030\110\031\104\032" +
    "\uffd0\033\uffd0\034\106\035\105\036\117\037\114\040\uffd0" +
    "\041\uffd0\044\uffd0\045\uffd0\047\uffd0\050\111\051\uffd0\052" +
    "\uffd0\053\uffd0\001\002\000\074\004\uffd8\005\uffd8\013\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\107\024" +
    "\121\026\113\027\122\030\110\031\104\032\116\033\120" +
    "\034\106\035\105\036\117\037\114\040\uffd8\041\uffd8\044" +
    "\uffd8\045\uffd8\047\uffd8\050\111\051\uffd8\052\uffd8\053\uffd8" +
    "\001\002\000\074\004\uffcb\005\uffcb\013\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\023\107\024\121\026\113" +
    "\027\122\030\110\031\104\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\044\uffcb\045\uffcb" +
    "\047\uffcb\050\111\051\uffcb\052\uffcb\053\uffcb\001\002\000" +
    "\074\004\uffd2\005\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\044\uffd2\045\uffd2\047\uffd2\050" +
    "\111\051\uffd2\052\uffd2\053\uffd2\001\002\000\026\004\076" +
    "\005\052\006\065\007\071\010\066\021\044\023\072\025" +
    "\073\046\067\052\074\001\002\000\042\023\107\024\121" +
    "\026\113\027\122\030\110\031\104\032\116\033\120\034" +
    "\106\035\105\036\117\037\114\040\115\041\103\050\111" +
    "\051\135\001\002\000\076\004\ufff9\005\ufff9\013\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\044\ufff9\045\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\001\002\000\042\023\107\024\121\026\113\027\122" +
    "\030\110\031\104\032\116\033\120\034\106\035\105\036" +
    "\117\037\114\040\115\041\103\050\111\051\137\001\002" +
    "\000\076\004\ufffa\005\ufffa\013\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa" +
    "\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000" +
    "\074\004\uffd4\005\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\044\uffd4\045\uffd4\047\uffd4\050" +
    "\111\051\uffd4\052\uffd4\053\uffd4\001\002\000\074\004\uffd5" +
    "\005\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\023\uffd5\024\uffd5\026\113\027\122\030\110\031\104" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\044\uffd5\045\uffd5\047\uffd5\050\111\051\uffd5" +
    "\052\uffd5\053\uffd5\001\002\000\074\004\uffce\005\uffce\013" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\107" +
    "\024\121\026\113\027\122\030\110\031\104\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\044\uffce\045\uffce\047\uffce\050\111\051\uffce\052\uffce\053" +
    "\uffce\001\002\000\074\004\uffcd\005\uffcd\013\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023\107\024\121\026" +
    "\113\027\122\030\110\031\104\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\044\uffcd\045" +
    "\uffcd\047\uffcd\050\111\051\uffcd\052\uffcd\053\uffcd\001\002" +
    "\000\074\004\uffd3\005\uffd3\013\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\044\uffd3\045\uffd3\047\uffd3" +
    "\050\111\051\uffd3\052\uffd3\053\uffd3\001\002\000\074\004" +
    "\uffd7\005\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\023\107\024\121\026\113\027\122\030\110\031" +
    "\104\032\116\033\120\034\106\035\105\036\117\037\114" +
    "\040\115\041\uffd7\044\uffd7\045\uffd7\047\uffd7\050\111\051" +
    "\uffd7\052\uffd7\053\uffd7\001\002\000\026\004\076\005\052" +
    "\006\065\007\071\010\066\021\044\023\072\025\073\046" +
    "\067\052\074\001\002\000\074\004\uffe3\005\uffe3\013\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\044" +
    "\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\001\002\000\050\023\107\024\121\026\113\027\122\030" +
    "\110\031\104\032\116\033\120\034\106\035\105\036\117" +
    "\037\114\040\115\041\103\044\uffe4\045\uffe4\047\uffe4\050" +
    "\111\053\uffe4\001\002\000\026\004\uffb6\005\uffb6\013\uffb6" +
    "\015\uffb6\016\uffb6\020\uffb6\021\uffb6\044\uffb6\052\uffb6\053" +
    "\uffb6\001\002\000\030\004\uffb5\005\uffb5\013\uffb5\015\uffb5" +
    "\016\uffb5\017\153\020\uffb5\021\uffb5\044\uffb5\052\uffb5\053" +
    "\uffb5\001\002\000\020\004\056\005\052\013\037\015\156" +
    "\016\155\021\044\052\016\001\002\000\030\004\uffbf\005" +
    "\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\044\uffbf\052\uffbf\053\uffbf\001\002\000\026\004\076\005" +
    "\052\006\065\007\071\010\066\021\044\023\072\025\073" +
    "\046\067\052\074\001\002\000\026\004\076\005\052\006" +
    "\065\007\071\010\066\021\044\023\072\025\073\046\067" +
    "\052\074\001\002\000\056\004\056\005\052\013\037\015" +
    "\156\016\155\021\044\023\107\024\121\026\113\027\122" +
    "\030\110\031\104\032\116\033\120\034\106\035\105\036" +
    "\117\037\114\040\115\041\103\050\111\052\016\001\002" +
    "\000\004\017\153\001\002\000\056\004\056\005\052\013" +
    "\037\015\156\016\155\021\044\023\107\024\121\026\113" +
    "\027\122\030\110\031\104\032\116\033\120\034\106\035" +
    "\105\036\117\037\114\040\115\041\103\050\111\052\016" +
    "\001\002\000\030\004\uffbe\005\uffbe\013\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\044\uffbe\052\uffbe\053\uffbe" +
    "\001\002\000\006\045\165\053\166\001\002\000\074\004" +
    "\uffda\005\uffda\013\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\023\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\044\uffda\045\uffda\047\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\001\002\000\030\004\076\005\052" +
    "\006\065\007\071\010\066\021\044\023\072\025\073\046" +
    "\067\052\074\053\167\001\002\000\074\004\uffdc\005\uffdc" +
    "\013\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023" +
    "\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\001\002\000\074\004\uffdb\005\uffdb\013\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\044\uffdb" +
    "\045\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\001" +
    "\002\000\074\004\uffc9\005\uffc9\013\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\044\uffc9\045\uffc9\047" +
    "\uffc9\050\111\051\uffc9\052\uffc9\053\uffc9\001\002\000\074" +
    "\004\uffca\005\uffca\013\uffca\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\044\uffca\045\uffca\047\uffca\050\111" +
    "\051\uffca\052\uffca\053\uffca\001\002\000\042\023\107\024" +
    "\121\026\113\027\122\030\110\031\104\032\116\033\120" +
    "\034\106\035\105\036\117\037\114\040\115\041\103\047" +
    "\173\050\111\001\002\000\074\004\uffd9\005\uffd9\013\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\044" +
    "\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\001\002\000\006\004\200\013\175\001\002\000\006\022" +
    "\uffef\045\uffef\001\002\000\006\022\203\045\uffec\001\002" +
    "\000\006\022\uffee\045\uffee\001\002\000\004\043\201\001" +
    "\002\000\006\011\025\012\026\001\002\000\036\004\ufff3" +
    "\005\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\044\ufff3\045\ufff3\047\ufff3\052\ufff3\053\ufff3" +
    "\001\002\000\004\004\205\001\002\000\030\004\uffc0\005" +
    "\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\044\uffc0\052\uffc0\053\uffc0\001\002\000\004\046\077\001" +
    "\002\000\030\004\076\005\052\006\065\007\071\010\066" +
    "\021\044\023\072\025\073\046\067\047\220\052\074\001" +
    "\002\000\006\011\025\012\026\001\002\000\032\004\ufff0" +
    "\005\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\044\ufff0\050\216\052\ufff0\053\ufff0\001\002\000\036" +
    "\004\ufffe\005\ufffe\013\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\044\ufffe\045\ufffe\050\212\052\ufffe" +
    "\053\ufffe\001\002\000\030\004\076\005\052\006\065\007" +
    "\071\010\066\021\044\023\072\025\073\046\067\051\030" +
    "\052\074\001\002\000\032\004\ufff8\005\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\044\ufff8\050\214" +
    "\052\ufff8\053\ufff8\001\002\000\030\004\076\005\052\006" +
    "\065\007\071\010\066\021\044\023\072\025\073\046\067" +
    "\051\215\052\074\001\002\000\032\004\ufff7\005\ufff7\013" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\044\ufff7" +
    "\050\ufff7\052\ufff7\053\ufff7\001\002\000\004\051\217\001" +
    "\002\000\032\004\ufff6\005\ufff6\013\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\044\ufff6\050\ufff6\052\ufff6\053" +
    "\ufff6\001\002\000\032\004\uffb7\005\uffb7\013\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\044\uffb7\050\uffe2\052" +
    "\uffb7\053\uffb7\001\002\000\006\045\146\047\222\001\002" +
    "\000\032\004\uffb8\005\uffb8\013\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\044\uffb8\050\uffe3\052\uffb8\053\uffb8" +
    "\001\002\000\056\004\056\005\052\013\037\015\060\016" +
    "\054\021\044\023\107\024\121\026\113\027\122\030\110" +
    "\031\104\032\116\033\120\034\106\035\105\036\117\037" +
    "\114\040\115\041\103\050\111\052\016\001\002\000\026" +
    "\004\uffb4\005\uffb4\013\uffb4\015\uffb4\016\uffb4\020\uffb4\021" +
    "\uffb4\044\uffb4\052\uffb4\053\uffb4\001\002\000\024\004\056" +
    "\005\052\013\037\015\060\016\054\020\051\021\044\052" +
    "\016\053\232\001\002\000\032\002\uffa9\004\uffa9\005\uffa9" +
    "\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\044" +
    "\uffa9\052\uffa9\053\uffa9\001\002\000\004\053\231\001\002" +
    "\000\026\004\uffab\005\uffab\013\uffab\015\uffab\016\uffab\020" +
    "\uffab\021\uffab\044\uffab\052\uffab\053\uffab\001\002\000\032" +
    "\002\uffa8\004\uffa8\005\uffa8\013\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\044\uffa8\052\uffa8\053\uffa8\001\002" +
    "\000\032\002\uffa7\004\uffa7\005\uffa7\013\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\044\uffa7\052\uffa7\053\uffa7" +
    "\001\002\000\004\053\235\001\002\000\026\004\uffac\005" +
    "\uffac\013\uffac\015\uffac\016\uffac\020\uffac\021\uffac\044\uffac" +
    "\052\uffac\053\uffac\001\002\000\032\002\uffa6\004\uffa6\005" +
    "\uffa6\013\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\044\uffa6\052\uffa6\053\uffa6\001\002\000\010\044\240\045" +
    "\146\053\uffb0\001\002\000\004\053\uffaf\001\002\000\004" +
    "\053\uffae\001\002\000\026\004\076\005\052\006\065\007" +
    "\071\010\066\021\044\023\072\025\073\046\067\052\074" +
    "\001\002\000\066\004\uffbc\005\uffbc\013\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\023\107\024\121\026\113" +
    "\027\122\030\110\031\104\032\116\033\120\034\106\035" +
    "\105\036\117\037\114\040\115\041\103\044\uffbc\050\111" +
    "\052\uffbc\053\uffbc\001\002\000\006\022\uffc3\050\133\001" +
    "\002\000\026\004\076\005\052\006\065\007\071\010\066" +
    "\021\044\023\072\025\073\046\067\052\074\001\002\000" +
    "\042\023\107\024\121\026\113\027\122\030\110\031\104" +
    "\032\116\033\120\034\106\035\105\036\117\037\114\040" +
    "\115\041\103\047\246\050\111\001\002\000\074\004\uffde" +
    "\005\uffde\013\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\023\uffde\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\044\uffde\045\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\053\uffde\001\002\000\026\004\076\005\052\006" +
    "\065\007\071\010\066\021\044\023\072\025\073\046\067" +
    "\052\074\001\002\000\066\004\uffc2\005\uffc2\013\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\023\107\024\121" +
    "\026\113\027\122\030\110\031\104\032\116\033\120\034" +
    "\106\035\105\036\117\037\114\040\115\041\103\044\uffc2" +
    "\050\111\052\uffc2\053\uffc2\001\002\000\004\004\205\001" +
    "\002\000\030\004\uffc1\005\uffc1\013\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\044\uffc1\052\uffc1\053\uffc1\001" +
    "\002\000\006\045\ufff2\047\ufff2\001\002\000\006\045\256" +
    "\047\257\001\002\000\006\043\uffeb\052\uffeb\001\002\000" +
    "\004\004\200\001\002\000\006\043\uffea\052\uffea\001\002" +
    "\000\006\045\ufff1\047\ufff1\001\002\000\004\002\001\001" +
    "\002\000\010\004\uffa4\014\uffa4\044\263\001\002\000\006" +
    "\004\uffa3\014\uffa3\001\002\000\006\004\uffa1\014\uffa1\001" +
    "\002\000\006\002\uffa0\004\011\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\014\002\007\012\003\013\004\034\005\035" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\003\013\263\035\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\014\001\001\000\004\012\012" +
    "\001\001\000\002\001\001\000\006\003\252\026\253\001" +
    "\001\000\004\024\017\001\001\000\036\003\042\004\040" +
    "\005\035\015\045\016\041\017\047\020\062\021\046\022" +
    "\037\023\061\024\054\025\044\030\056\033\052\001\001" +
    "\000\012\006\023\007\022\011\020\036\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\032\007\022\011\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\101\015\067\016\041" +
    "\031\235\001\001\000\002\001\001\000\034\003\042\004" +
    "\040\005\035\015\045\016\041\017\047\020\227\021\046" +
    "\022\037\023\226\024\054\025\044\030\056\001\001\000" +
    "\010\014\222\015\067\016\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\074\015" +
    "\067\016\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\171\015\067\016\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\170\015" +
    "\067\016\041\001\001\000\010\014\167\015\067\016\041" +
    "\001\001\000\012\014\101\015\067\016\041\031\162\001" +
    "\001\000\032\003\042\004\040\005\035\015\045\016\041" +
    "\017\047\021\151\022\150\024\054\025\044\030\056\032" +
    "\111\001\001\000\002\001\001\000\012\014\101\015\067" +
    "\016\041\031\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\111\001\001\000\010\014\144\015\067" +
    "\016\041\001\001\000\010\014\143\015\067\016\041\001" +
    "\001\000\010\014\142\015\067\016\041\001\001\000\010" +
    "\014\141\015\067\016\041\001\001\000\010\014\140\015" +
    "\067\016\041\001\001\000\010\014\137\015\067\016\041" +
    "\001\001\000\010\014\135\015\067\016\041\001\001\000" +
    "\002\001\001\000\010\014\131\015\067\016\041\001\001" +
    "\000\010\014\130\015\067\016\041\001\001\000\010\014" +
    "\127\015\067\016\041\001\001\000\010\014\126\015\067" +
    "\016\041\001\001\000\010\014\125\015\067\016\041\001" +
    "\001\000\010\014\124\015\067\016\041\001\001\000\010" +
    "\014\123\015\067\016\041\001\001\000\010\014\122\015" +
    "\067\016\041\001\001\000\004\032\111\001\001\000\004" +
    "\032\111\001\001\000\004\032\111\001\001\000\004\032" +
    "\111\001\001\000\004\032\111\001\001\000\004\032\111" +
    "\001\001\000\004\032\111\001\001\000\004\032\111\001" +
    "\001\000\010\014\133\015\067\016\041\001\001\000\004" +
    "\032\111\001\001\000\002\001\001\000\004\032\111\001" +
    "\001\000\002\001\001\000\004\032\111\001\001\000\004" +
    "\032\111\001\001\000\004\032\111\001\001\000\004\032" +
    "\111\001\001\000\004\032\111\001\001\000\004\032\111" +
    "\001\001\000\010\014\147\015\067\016\041\001\001\000" +
    "\002\001\001\000\004\032\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\042\004\040\005\035\015" +
    "\045\016\041\017\047\021\153\024\054\025\044\030\056" +
    "\001\001\000\002\001\001\000\010\014\160\015\067\016" +
    "\041\001\001\000\010\014\156\015\067\016\041\001\001" +
    "\000\030\003\042\004\040\005\035\015\045\016\041\017" +
    "\047\021\157\024\054\025\044\030\056\032\111\001\001" +
    "\000\002\001\001\000\030\003\042\004\040\005\035\015" +
    "\045\016\041\017\047\021\161\024\054\025\044\030\056" +
    "\032\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\147\015\067\016\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\111\001" +
    "\001\000\004\032\111\001\001\000\004\032\111\001\001" +
    "\000\002\001\001\000\006\003\176\005\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\201\007\022\011\020\001\001\000" +
    "\002\001\001\000\004\016\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\101\015\067\016\041\031" +
    "\220\001\001\000\012\006\201\007\210\010\207\011\020" +
    "\001\001\000\002\001\001\000\004\032\212\001\001\000" +
    "\010\014\135\015\067\016\041\001\001\000\002\001\001" +
    "\000\010\014\133\015\067\016\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\042\004" +
    "\040\005\035\015\045\016\041\017\047\021\161\022\223" +
    "\024\054\025\044\030\056\032\111\001\001\000\002\001" +
    "\001\000\034\003\042\004\040\005\035\015\045\016\041" +
    "\017\047\020\233\021\046\022\037\023\232\024\054\025" +
    "\044\030\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\241\015\067\016\041\001\001\000\004\032\111\001\001" +
    "\000\002\001\001\000\010\014\244\015\067\016\041\001" +
    "\001\000\004\032\111\001\001\000\002\001\001\000\010" +
    "\014\247\015\067\016\041\001\001\000\004\032\111\001" +
    "\001\000\004\016\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\012\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$XiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = lexer.next_token(); // s is an XiToken wrapped as a Symbol
    XiToken t = (XiToken) s;
    if (t.sym == sym.ERROR) {
        throw new LexicalError(t.getValue().toString(), t.getLocation());
    } else {
        return s;
    }

    }


    XiLexer lexer;

    public XiParser (XiLexer l, XiTokenFactory xtf) {
        super(l,xtf);
        this.lexer = l;
    }

    public void syntax_error(Symbol s) {
        XiToken t = (XiToken) s;
        String message = String.format(
            "Unexpected token %s", t.getValue()
        );
        throw new SyntaxError(message, t.getLocation());
    }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$XiParser$actions {
    private final XiParser parser;

    /** Constructor */
    CUP$XiParser$actions(XiParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 98. */
    public final java_cup.runtime.Symbol CUP$XiParser$do_action_part00000000(
            int                        CUP$XiParser$act_num,
            java_cup.runtime.lr_parser CUP$XiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$XiParser$stack,
            int                        CUP$XiParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$XiParser$result;

        /* select the action based on the action number */
        switch (CUP$XiParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                FileProgram start_val = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<FileProgram> value();
                RESULT = start_val;
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$XiParser$parser.done_parsing();
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // basic_type ::= BOOL_TYPE 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Object t = CUP$XiParser$stack.peek().<Object> value();
                 RESULT = new TypeTTauBool(); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("basic_type",5, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // basic_type ::= INT_TYPE 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Object t = CUP$XiParser$stack.peek().<Object> value();
                 RESULT = new TypeTTauInt(); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("basic_type",5, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // type ::= basic_type 
            {
                TypeTTau RESULT = null;
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                TypeTTau b = CUP$XiParser$stack.peek().<TypeTTau> value();
                 RESULT = b; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("type",4, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // type ::= list_type 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                TypeTTau t = CUP$XiParser$stack.peek().<TypeTTau> value();
                 RESULT = t; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("type",4, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // list_type ::= basic_type LBRAC RBRAC 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                TypeTTau t = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<TypeTTau> value();
                 RESULT = new TypeTTauArray(t); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("list_type",7, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // list_type ::= list_type LBRAC RBRAC 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                TypeTTau t = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<TypeTTau> value();
                 RESULT = new TypeTTauArray(t); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("list_type",7, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // indices ::= LBRAC expr RBRAC 
            {
                ArrayList<Expr> RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Expr e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Expr> value();
                 ArrayList<Expr> l = new ArrayList<>(); l.add(e); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("indices",24, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // indices ::= indices LBRAC expr RBRAC 
            {
                ArrayList<Expr> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                ArrayList<Expr> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<ArrayList<Expr>> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Expr e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Expr> value();
                 l.add(e); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("indices",24, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // init_list_type ::= basic_type indices 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                TypeTTau t = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<TypeTTau> value();
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                ArrayList<Expr> i = CUP$XiParser$stack.peek().<ArrayList<Expr>> value();
                
    TypeTTau curr = t;
    List<Expr> lengths = i;
    Collections.reverse(lengths);
    for (Expr e : lengths){
        curr = new TypeTTauArray(curr, e);
    }
    RESULT = curr;
  
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("init_list_type",6, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // init_list_type ::= basic_type indices LBRAC RBRAC 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                TypeTTau t = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<TypeTTau> value();
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                ArrayList<Expr> i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<ArrayList<Expr>> value();
                
    TypeTTau curr = new TypeTTauArray(t);
    List<Expr> lengths = i;
    Collections.reverse(lengths);
    for (Expr e : lengths){
        curr = new TypeTTauArray(curr, e);
    }
    RESULT = curr;
  
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("init_list_type",6, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // init_list_type ::= init_list_type LBRAC RBRAC 
            {
                TypeTTau RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                TypeTTau t = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<TypeTTau> value();
                
    TypeTTauArray curr = (TypeTTauArray) t;
    while (curr.getTypeTTau() instanceof TypeTTauArray){
        curr = (TypeTTauArray) curr.getTypeTTau();
    }
    curr.setTypeTTau(new TypeTTauArray(curr.getTypeTTau()));
    RESULT = t;
  
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("init_list_type",6, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // type_list ::= type 
            {
                ArrayList<TypeTTau> RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                TypeTTau t = CUP$XiParser$stack.peek().<TypeTTau> value();
                
    ArrayList<TypeTTau> l = new ArrayList<>();
    l.add(t);
    RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("type_list",28, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // type_list ::= type_list COMMA type 
            {
                ArrayList<TypeTTau> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                ArrayList<TypeTTau> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<ArrayList<TypeTTau>> value();
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                TypeTTau t = CUP$XiParser$stack.peek().<TypeTTau> value();
                 l.add(t); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("type_list",28, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // annotated_var ::= ID COLON type 
            {
                Pair<String,TypeTTau> RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                String i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<String> value();
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                TypeTTau t = CUP$XiParser$stack.peek().<TypeTTau> value();
                 RESULT = new Pair<String, TypeTTau>(i, t); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("annotated_var",1, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // annotated_var_list ::= annotated_var 
            {
                ArrayList<Pair<String,TypeTTau>> RESULT = null;
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Pair<String,TypeTTau> a = CUP$XiParser$stack.peek().<Pair<String,TypeTTau>> value();
                
    ArrayList<Pair<String, TypeTTau>> l = new ArrayList<>();
    l.add(a);
    RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("annotated_var_list",20, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // annotated_var_list ::= annotated_var_list COMMA annotated_var 
            {
                ArrayList<Pair<String,TypeTTau>> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                ArrayList<Pair<String,TypeTTau>> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<ArrayList<Pair<String,TypeTTau>>> value();
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Pair<String,TypeTTau> a = CUP$XiParser$stack.peek().<Pair<String,TypeTTau>> value();
                 l.add(a); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("annotated_var_list",20, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // decl_annotated_var ::= ID COLON init_list_type 
            {
                Pair<String,TypeTTau> RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                String i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<String> value();
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                TypeTTau t = CUP$XiParser$stack.peek().<TypeTTau> value();
                 RESULT = new Pair<String, TypeTTau>(i, t); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("decl_annotated_var",2, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // type_decl ::= UNDERSCORE 
            {
                TypeDecl RESULT = null;
                 RESULT = new TypeDeclUnderscore(); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("type_decl",3, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // type_decl ::= annotated_var 
            {
                TypeDecl RESULT = null;
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Pair<String,TypeTTau> a = CUP$XiParser$stack.peek().<Pair<String,TypeTTau>> value();
                 RESULT = new TypeDeclVar(a); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("type_decl",3, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // type_decl_list ::= type_decl 
            {
                ArrayList<TypeDecl> RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                TypeDecl t = CUP$XiParser$stack.peek().<TypeDecl> value();
                
    ArrayList<TypeDecl> l = new ArrayList<>();
    l.add(t); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("type_decl_list",22, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // type_decl_list ::= type_decl_list COMMA type_decl 
            {
                ArrayList<TypeDecl> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                ArrayList<TypeDecl> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<ArrayList<TypeDecl>> value();
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                TypeDecl t = CUP$XiParser$stack.peek().<TypeDecl> value();
                 l.add(t); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("type_decl_list",22, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // func_args ::= LPAREN RPAREN 
            {
                ArrayList<Pair<String,TypeTTau>> RESULT = null;
                 RESULT = new ArrayList<Pair<String, TypeTTau>>(); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("func_args",21, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // func_args ::= LPAREN annotated_var_list RPAREN 
            {
                ArrayList<Pair<String,TypeTTau>> RESULT = null;
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<Pair<String,TypeTTau>> a = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<Pair<String,TypeTTau>>> value();
                 RESULT = a; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("func_args",21, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // func_defn ::= ID func_args block 
            {
                FuncDefn RESULT = null;
                Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                String n = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<String> value();
                Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<Pair<String,TypeTTau>> p = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<Pair<String,TypeTTau>>> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt b = CUP$XiParser$stack.peek().<Stmt> value();
                 RESULT = new FuncDefn(n, p, b, nxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("func_defn",8, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // func_defn ::= ID func_args COLON type_list block 
            {
                FuncDefn RESULT = null;
                Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xleft;
                Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xright;
                String n = CUP$XiParser$stack.elementAt(CUP$XiParser$top-4).<String> value();
                Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                ArrayList<Pair<String,TypeTTau>> p = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<ArrayList<Pair<String,TypeTTau>>> value();
                Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<TypeTTau> r = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<TypeTTau>> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt b = CUP$XiParser$stack.peek().<Stmt> value();
                
    // r.size() >= 1
    TypeT rt;
    if (r.size() == 1) {
        rt = r.get(0);
    } else {
        rt = new TypeTList(r);
    }
    RESULT = new FuncDefn(n, p, rt, b, nxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("func_defn",8, CUP$XiParser$stack.elementAt(CUP$XiParser$top-4), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // func_defn_list ::= func_defn 
            {
                ArrayList<FuncDefn> RESULT = null;
                Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                FuncDefn d = CUP$XiParser$stack.peek().<FuncDefn> value();
                
      ArrayList<FuncDefn> l = new ArrayList<>();
      l.add(d);
      RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("func_defn_list",27, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // func_defn_list ::= func_defn_list func_defn 
            {
                ArrayList<FuncDefn> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<FuncDefn> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<FuncDefn>> value();
                Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                FuncDefn d = CUP$XiParser$stack.peek().<FuncDefn> value();
                 l.add(d); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("func_defn_list",27, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // expr_list ::= expr 
            {
                ArrayList<Expr> RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e = CUP$XiParser$stack.peek().<Expr> value();
                
       ArrayList<Expr> l = new ArrayList<>();
       l.add(e);
       RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr_list",23, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // expr_list ::= expr_list COMMA expr 
            {
                ArrayList<Expr> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                ArrayList<Expr> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<ArrayList<Expr>> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e = CUP$XiParser$stack.peek().<Expr> value();
                 l.add(e); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr_list",23, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // func_expr ::= ID LPAREN expr_list RPAREN 
            {
                ExprFunctionCall RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                String i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<String> value();
                Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<Expr> el = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<Expr>> value();
                
    RESULT = new ExprFunctionCall(i, el, ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("func_expr",12, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // func_expr ::= ID LPAREN RPAREN 
            {
                ExprFunctionCall RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                String i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<String> value();
                
    RESULT = new ExprFunctionCall(i, new ArrayList<Expr>(), ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("func_expr",12, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // assignable_indexable_expr ::= STRING_LIT 
            {
                Expr RESULT = null;
                Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                String s = CUP$XiParser$stack.peek().<String> value();
                 RESULT = new ExprArrayLiteral(s, sxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("assignable_indexable_expr",11, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // assignable_indexable_expr ::= ID 
            {
                Expr RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                String i = CUP$XiParser$stack.peek().<String> value();
                 RESULT = new ExprId(i, ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("assignable_indexable_expr",11, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // assignable_indexable_expr ::= func_expr 
            {
                Expr RESULT = null;
                Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                ExprFunctionCall f = CUP$XiParser$stack.peek().<ExprFunctionCall> value();
                 RESULT = f; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("assignable_indexable_expr",11, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // assignable_indexable_expr ::= LENGTH LPAREN expr RPAREN 
            {
                Expr RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Object l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Expr e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Expr> value();
                 RESULT = new ExprLength(e, lxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("assignable_indexable_expr",11, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // expr ::= assignable_indexable_expr 
            {
                Expr RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = e; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // expr ::= LCURL expr_list RCURL 
            {
                Expr RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<Expr> e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<Expr>> value();
                 RESULT = new ExprArrayLiteral(e, lxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // expr ::= LCURL expr_list COMMA RCURL 
            {
                Expr RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Object l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                ArrayList<Expr> e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<ArrayList<Expr>> value();
                 RESULT = new ExprArrayLiteral(e, lxleft) ; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // expr ::= LCURL RCURL 
            {
                Expr RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                 RESULT = new ExprArrayLiteral(new ArrayList<Expr>(), lxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // expr ::= LPAREN expr RPAREN 
            {
                Expr RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Expr e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Expr> value();
                 RESULT = e; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // expr ::= expr AND expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.AND, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // expr ::= expr OR expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.OR, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // expr ::= expr PLUS expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.PLUS, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // expr ::= expr MINUS expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.MINUS, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // expr ::= expr DIV expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.DIV, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // expr ::= expr MOD expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.MOD, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // expr ::= expr MULT expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.MULT, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // expr ::= expr HI_MULT expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.HI_MULT, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // expr ::= expr EQEQ expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.EQEQ, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // expr ::= expr NEQ expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.NEQ, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // expr ::= expr GT expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.GT, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // expr ::= expr LT expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.LT, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // expr ::= expr GTEQ expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.GTEQ, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // expr ::= expr LTEQ expr 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Expr> value();
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e2 = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprBinop(Binop.LTEQ, e1, e2, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // expr ::= MINUS expr 
            {
                Expr RESULT = null;
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprUnop(Unop.UMINUS, e, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // expr ::= NOT expr 
            {
                Expr RESULT = null;
                Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object o = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new ExprUnop(Unop.NOT, e, oxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // expr ::= BOOL_LIT 
            {
                Expr RESULT = null;
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Boolean b = CUP$XiParser$stack.peek().<Boolean> value();
                 RESULT = new ExprBoolLiteral(b, bxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // expr ::= INT_LIT 
            {
                Expr RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Long i = CUP$XiParser$stack.peek().<Long> value();
                 RESULT = new ExprIntLiteral(i, ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // expr ::= CHAR_LIT 
            {
                Expr RESULT = null;
                Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Character c = CUP$XiParser$stack.peek().<Character> value();
                 RESULT = new ExprIntLiteral(c, cxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // expr ::= expr indices 
            {
                Expr RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Expr> value();
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                ArrayList<Expr> i = CUP$XiParser$stack.peek().<ArrayList<Expr>> value();
                
    Expr curr = e1;
    for (Expr e : i) {
        curr = new ExprIndex(curr, e, ixleft);
    }
    RESULT = curr; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // assignable ::= ID 
            {
                Assignable RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                String i = CUP$XiParser$stack.peek().<String> value();
                 RESULT = new AssignableId(new ExprId(i, ixleft), ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("assignable",13, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // assignable ::= assignable_indexable_expr indices 
            {
                Assignable RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Expr e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Expr> value();
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                ArrayList<Expr> l = CUP$XiParser$stack.peek().<ArrayList<Expr>> value();
                
    Expr idx = e1;
    for (Expr e : l){
        idx = new ExprIndex(idx, e, e.getLocation());
    }
    RESULT = new AssignableIndex(idx, e1.getLocation());
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("assignable",13, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // decl_assign_stmt ::= annotated_var EQ expr 
            {
                StmtDeclAssign RESULT = null;
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Pair<String,TypeTTau> a = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Pair<String,TypeTTau>> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e = CUP$XiParser$stack.peek().<Expr> value();
                
    ArrayList<TypeDecl> l = new ArrayList<>();
    l.add(new TypeDeclVar(a));
    RESULT = new StmtDeclAssign(l, e, axleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("decl_assign_stmt",19, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // decl_assign_stmt ::= UNDERSCORE EQ func_expr 
            {
                StmtDeclAssign RESULT = null;
                Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object u = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                ExprFunctionCall e = CUP$XiParser$stack.peek().<ExprFunctionCall> value();
                
    ArrayList<TypeDecl> l = new ArrayList<>();
    l.add(new TypeDeclUnderscore());
    RESULT = new StmtDeclAssign(l, e, uxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("decl_assign_stmt",19, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // decl_assign_stmt ::= type_decl_list COMMA type_decl EQ func_expr 
            {
                StmtDeclAssign RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xright;
                ArrayList<TypeDecl> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-4).<ArrayList<TypeDecl>> value();
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                TypeDecl t = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<TypeDecl> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                ExprFunctionCall e = CUP$XiParser$stack.peek().<ExprFunctionCall> value();
                
    l.add(t);
    RESULT = new StmtDeclAssign(l, e, lxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("decl_assign_stmt",19, CUP$XiParser$stack.elementAt(CUP$XiParser$top-4), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // matched_stmt ::= IF expr matched_stmt ELSE matched_stmt 
            {
                Stmt RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xright;
                Object i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-4).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Expr e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Expr> value();
                Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Stmt s1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Stmt> value();
                Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt s2 = CUP$XiParser$stack.peek().<Stmt> value();
                
    RESULT = new StmtIfElse(e,s1,s2, ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("matched_stmt",15, CUP$XiParser$stack.elementAt(CUP$XiParser$top-4), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // matched_stmt ::= WHILE expr matched_stmt 
            {
                Stmt RESULT = null;
                Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object w = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Expr e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Expr> value();
                Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt s = CUP$XiParser$stack.peek().<Stmt> value();
                 RESULT = new StmtWhile(e,s, wxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("matched_stmt",15, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // matched_stmt ::= block 
            {
                Stmt RESULT = null;
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt b = CUP$XiParser$stack.peek().<Stmt> value();
                 RESULT = b; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("matched_stmt",15, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // matched_stmt ::= assignable EQ expr 
            {
                Stmt RESULT = null;
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Assignable a = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Assignable> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Expr e = CUP$XiParser$stack.peek().<Expr> value();
                 RESULT = new StmtAssign(a, e, axleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("matched_stmt",15, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // matched_stmt ::= decl_assign_stmt 
            {
                Stmt RESULT = null;
                Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                StmtDeclAssign d = CUP$XiParser$stack.peek().<StmtDeclAssign> value();
                 RESULT = d; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("matched_stmt",15, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // matched_stmt ::= decl_annotated_var 
            {
                Stmt RESULT = null;
                Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Pair<String,TypeTTau> d = CUP$XiParser$stack.peek().<Pair<String,TypeTTau>> value();
                 RESULT = new StmtDecl(new TypeDeclVar(d), dxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("matched_stmt",15, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // matched_stmt ::= annotated_var 
            {
                Stmt RESULT = null;
                Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Pair<String,TypeTTau> d = CUP$XiParser$stack.peek().<Pair<String,TypeTTau>> value();
                 RESULT = new StmtDecl(new TypeDeclVar(d), dxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("matched_stmt",15, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // matched_stmt ::= ID LPAREN expr_list RPAREN 
            {
                Stmt RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                String i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<String> value();
                Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<Expr> el = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<Expr>> value();
                
    RESULT = new StmtProcedureCall(i, el, ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("matched_stmt",15, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // matched_stmt ::= ID LPAREN RPAREN 
            {
                Stmt RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                String i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<String> value();
                
    RESULT = new StmtProcedureCall(i, new ArrayList<Expr>(), ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("matched_stmt",15, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // unmatched_stmt ::= IF expr unmatched_stmt 
            {
                Stmt RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Expr e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Expr> value();
                Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt s = CUP$XiParser$stack.peek().<Stmt> value();
                 RESULT = new StmtIf(e,s, ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("unmatched_stmt",16, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // unmatched_stmt ::= IF expr matched_stmt 
            {
                Stmt RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Expr e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Expr> value();
                Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt s = CUP$XiParser$stack.peek().<Stmt> value();
                 RESULT = new StmtIf(e,s, ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("unmatched_stmt",16, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // unmatched_stmt ::= WHILE expr unmatched_stmt 
            {
                Stmt RESULT = null;
                Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object w = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Expr e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Expr> value();
                Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt s = CUP$XiParser$stack.peek().<Stmt> value();
                 RESULT = new StmtWhile(e,s, wxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("unmatched_stmt",16, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // stmt ::= matched_stmt 
            {
                Stmt RESULT = null;
                Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt m = CUP$XiParser$stack.peek().<Stmt> value();
                 RESULT = m; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("stmt",14, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // stmt ::= unmatched_stmt 
            {
                Stmt RESULT = null;
                Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt u = CUP$XiParser$stack.peek().<Stmt> value();
                 RESULT = u; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("stmt",14, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // return ::= RETURN 
            {
                Stmt RESULT = null;
                Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Object r = CUP$XiParser$stack.peek().<Object> value();
                 RESULT = new StmtReturn(rxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("return",17, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // return ::= RETURN expr_list 
            {
                Stmt RESULT = null;
                Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object r = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                ArrayList<Expr> e = CUP$XiParser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new StmtReturn(e, rxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("return",17, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // return ::= RETURN SEMICOLON 
            {
                Stmt RESULT = null;
                Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object r = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                 RESULT = new StmtReturn(rxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("return",17, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // return ::= RETURN expr_list SEMICOLON 
            {
                Stmt RESULT = null;
                Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object r = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<Expr> e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<Expr>> value();
                 RESULT = new StmtReturn(e, rxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("return",17, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // stmt_list ::= stmt 
            {
                ArrayList<Stmt> RESULT = null;
                Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt s = CUP$XiParser$stack.peek().<Stmt> value();
                
     ArrayList<Stmt> l = new ArrayList<>();
     l.add(s);
     RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("stmt_list",25, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // stmt_list ::= stmt_list SEMICOLON stmt 
            {
                ArrayList<Stmt> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                ArrayList<Stmt> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<ArrayList<Stmt>> value();
                Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt s = CUP$XiParser$stack.peek().<Stmt> value();
                 l.add(s); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("stmt_list",25, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // stmt_list ::= stmt_list stmt 
            {
                ArrayList<Stmt> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<Stmt> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<Stmt>> value();
                Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Stmt s = CUP$XiParser$stack.peek().<Stmt> value();
                 l.add(s); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("stmt_list",25, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // block ::= LCURL return RCURL 
            {
                Stmt RESULT = null;
                Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object c = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Stmt r = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Stmt> value();
                
    ArrayList<Stmt> l = new ArrayList<>(); l.add(r);
    RESULT = new StmtBlock(l, cxleft) ; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("block",18, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // block ::= LCURL stmt_list RCURL 
            {
                Stmt RESULT = null;
                Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object c = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<Stmt> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<Stmt>> value();
                 RESULT = new StmtBlock(l, cxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("block",18, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // block ::= LCURL stmt_list return RCURL 
            {
                Stmt RESULT = null;
                Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Object c = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Object> value();
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                ArrayList<Stmt> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<ArrayList<Stmt>> value();
                Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Stmt r = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Stmt> value();
                
    l.add(r); RESULT = new StmtBlock(l, cxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("block",18, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // block ::= LCURL stmt_list SEMICOLON RCURL 
            {
                Stmt RESULT = null;
                Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Object c = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Object> value();
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                ArrayList<Stmt> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<ArrayList<Stmt>> value();
                 RESULT = new StmtBlock(l, cxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("block",18, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // block ::= LCURL stmt_list SEMICOLON return RCURL 
            {
                Stmt RESULT = null;
                Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xleft;
                Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xright;
                Object c = CUP$XiParser$stack.elementAt(CUP$XiParser$top-4).<Object> value();
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                ArrayList<Stmt> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<ArrayList<Stmt>> value();
                Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Stmt r = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Stmt> value();
                
    l.add(r); RESULT = new StmtBlock(l, cxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("block",18, CUP$XiParser$stack.elementAt(CUP$XiParser$top-4), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // block ::= LCURL RCURL 
            {
                Stmt RESULT = null;
                Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object c = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                 RESULT = new StmtBlock(cxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("block",18, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // use_interface ::= USE ID 
            {
                UseInterface RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                String i = CUP$XiParser$stack.peek().<String> value();
                 RESULT = new UseInterface(i, ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("use_interface",9, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // use_interface ::= USE ID SEMICOLON 
            {
                UseInterface RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                String i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<String> value();
                 RESULT = new UseInterface(i, ixleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("use_interface",9, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // import_list ::= use_interface 
            {
                ArrayList<UseInterface> RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                UseInterface i = CUP$XiParser$stack.peek().<UseInterface> value();
                
      ArrayList<UseInterface> l = new ArrayList<>();
      l.add(i);
      RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("import_list",26, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // import_list ::= import_list use_interface 
            {
                ArrayList<UseInterface> RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<UseInterface> l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<UseInterface>> value();
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                UseInterface i = CUP$XiParser$stack.peek().<UseInterface> value();
                 l.add(i); RESULT = l; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("import_list",26, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // program ::= import_list func_defn_list 
            {
                FileProgram RESULT = null;
                Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                ArrayList<UseInterface> il = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ArrayList<UseInterface>> value();
                Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                ArrayList<FuncDefn> dl = CUP$XiParser$stack.peek().<ArrayList<FuncDefn>> value();
                
    RESULT = new FileProgram(il, dl, ilxleft) ; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // program ::= func_defn_list 
            {
                FileProgram RESULT = null;
                Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                ArrayList<FuncDefn> dl = CUP$XiParser$stack.peek().<ArrayList<FuncDefn>> value();
                
    RESULT = new FileProgram(new ArrayList<UseInterface>(), dl, dlxleft); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$XiParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$XiParser$do_action(
            int                        CUP$XiParser$act_num,
            java_cup.runtime.lr_parser CUP$XiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$XiParser$stack,
            int                        CUP$XiParser$top)
            throws java.lang.Exception {
            return CUP$XiParser$do_action_part00000000(
                           CUP$XiParser$act_num,
                           CUP$XiParser$parser,
                           CUP$XiParser$stack,
                           CUP$XiParser$top);
    }
}

}
