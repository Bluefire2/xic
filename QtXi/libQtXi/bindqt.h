// WARNING: Portions of this file are autogenerated from qt.idl and /home/chesley/Desktop/GitHub/cs4120/2019sp/project/QtXi/src/libQtXi//bindqt.h.in.
// Any changes you make here may be lost!
#include "xiobj.h"

#include <QApplication>
#include <QString>
#include <QPointer>

#include <QPoint>
#include <QSize>

#include <QAction>
#include <QButtonGroup>
#include <QCheckBox>
#include <QColor>
#include <QFont>
#include <QFontMetrics>
#include <QGroupBox>
#include <QIcon>
#include <QInputEvent>
#include <QLabel>
#include <QMainWindow>
#include <QMenu>
#include <QMenuBar>
#include <QPainter>
#include <QPen>
#include <QPushButton>
#include <QRadioButton>
#include <QStyle>
#include <QTimer>
#include <QToolBar>
#include <QWidget>

#include <QDialog>
#include <QLineEdit>
#include <QMessageBox>
#include <QTextEdit>
#include <QAbstractSlider>
#include <QScrollBar>
#include <QSlider>

#include <QLayout>
#include <QBoxLayout>
#include <QStackedLayout>

#include <xiqobjectholder.h>
#include <xiqwrapperfactory.h>
#include <xiqproxywidgets.h>
#include <xiqslot.h>

inline int toXi(const QChar& c) {
    return c.unicode();
}

using namespace Qt;

// We need to do some forward decls ourselves, since makebindings won't
struct XiQString;
struct XiQAction;
struct XiQWidget;
struct XiQPixmap;
struct XiQPushButton;
struct XiQColor;
struct XiQBrush;
struct XiQFont;
struct XiQIcon;
struct XiQWidget;
struct XiQLayout;

struct XiAboutToQuitListener;
struct XiTimerListener;
struct XiClickListener;
struct XiActionListener;
struct XiToggleListener;

typedef QStyle::StandardPixmap StandardIcon;
struct XiStandardIcon;


struct XiQApplication_vtable;
struct XiQApplication: public Xiobj
{
    XiQApplication_vtable* vtable();
    XiQApplication();
    QApplication* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QApplication wrappedType;
    XiQObjectHolder<QApplication> handle;
    XiQApplicationSigs* sig;
    xiqEventListenerList<XiAboutToQuitListener> quitListeners;

    QApplication* getImpl() {
        return handle.get();
    }

    void createImpl() {
        assert(false);
    }

    void setObject(QApplication* a) {
        handle.setObject(a, this);
        sig = new XiQApplicationSigs(this, a);
    }

    ~XiQApplication() {
        delete sig;
    }
    static void exec(XiQApplication* __thisPtr);
    static void quit(XiQApplication* __thisPtr);
    static void closeAllWindows(XiQApplication* __thisPtr);
    static XiQString* styleSheet(XiQApplication* __thisPtr);
    static void setStyleSheet(XiQApplication* __thisPtr, XiQString* sheet);
    static XiQIcon* windowIcon(XiQApplication* __thisPtr);
    static void setWindowIcon(XiQApplication* __thisPtr, XiQIcon* param0);
    static XiQFont* font(XiQApplication* __thisPtr);
    static void setFont(XiQApplication* __thisPtr, XiQFont* param0);
    static void addAboutToQuitListener(XiQApplication* __thisPtr, XiAboutToQuitListener* l);
};

inline QApplication* fromXi(XiQApplication* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQApplication_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    void (*exec)(XiQApplication*);
    void (*quit)(XiQApplication*);
    void (*closeAllWindows)(XiQApplication*);
    XiQString* (*styleSheet)(XiQApplication*);
    void (*setStyleSheet)(XiQApplication*, XiQString*);
    XiQIcon* (*windowIcon)(XiQApplication*);
    void (*setWindowIcon)(XiQApplication*, XiQIcon*);
    XiQFont* (*font)(XiQApplication*);
    void (*setFont)(XiQApplication*, XiQFont*);
    void (*addAboutToQuitListener)(XiQApplication*, XiAboutToQuitListener*);
};

inline XiQApplication_vtable* XiQApplication::vtable() {
    return static_cast<XiQApplication_vtable*>(vptr);
}

extern XiQApplication_vtable XI(_vt_QApplication);
extern int XI(_size_QApplication);
XI_EXPORT void XI(_init_QApplication)() __attribute__((constructor));




struct XiAboutToQuitListener_vtable;
struct XiAboutToQuitListener: public Xiobj
{
    XiAboutToQuitListener_vtable* vtable();
    XiAboutToQuitListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiAboutToQuitListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiAboutToQuitListener* me = static_cast<XiAboutToQuitListener*>(mePtr);
        if (me->initialized)
            me->~XiAboutToQuitListener();
    }

    static void aboutToQuit(XiAboutToQuitListener* __thisPtr);
};

struct XiAboutToQuitListener_vtable: public Xivtable
{
    void* reserved;
    void (*aboutToQuit)(XiAboutToQuitListener*);
};

inline XiAboutToQuitListener_vtable* XiAboutToQuitListener::vtable() {
    return static_cast<XiAboutToQuitListener_vtable*>(vptr);
}

extern XiAboutToQuitListener_vtable XI(_vt_AboutToQuitListener);
extern int XI(_size_AboutToQuitListener);
XI_EXPORT void XI(_init_AboutToQuitListener)() __attribute__((constructor));



XI_EXPORT XiQApplication* XI(qapplication_t2o12QApplicationaaiaai)(int64_t** args);


struct XiQString_vtable;
struct XiQString: public Xiobj
{
    XiQString_vtable* vtable();
    XiQString();
    QString value;
    QString* impl() {
        if (!initialized) 
            new (this) XiQString();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQString* me = static_cast<XiQString*>(mePtr);
        if (me->initialized)
            me->~XiQString();
    }

    static void* XiString(XiQString* __thisPtr);
    static void append(XiQString* __thisPtr, XiQString* other);
    static int at(XiQString* __thisPtr, int pos);
    static void chop(XiQString* __thisPtr, int n);
    static void clear(XiQString* __thisPtr);
    static int compare(XiQString* __thisPtr, XiQString* other);
    static bool contains(XiQString* __thisPtr, XiQString* other);
    static bool containsCI(XiQString* __thisPtr, XiQString* other);
    static int count(XiQString* __thisPtr, XiQString* other);
    static int countCI(XiQString* __thisPtr, XiQString* other);
    static bool endsWith(XiQString* __thisPtr, XiQString* other);
    static int indexOf(XiQString* __thisPtr, XiQString* other, int from);
    static int indexOfCI(XiQString* __thisPtr, XiQString* other, int from);
    static void insert(XiQString* __thisPtr, int pos, XiQString* str);
    static bool isEmpty(XiQString* __thisPtr);
    static XiQString* left(XiQString* __thisPtr, int n);
    static int getLength(XiQString* __thisPtr);
    static XiQString* mid(XiQString* __thisPtr, int pos, int n);
    static void prepend(XiQString* __thisPtr, XiQString* other);
    static void remove(XiQString* __thisPtr, int position, int n);
    static XiQString* repeated(XiQString* __thisPtr, int n);
    static void replace(XiQString* __thisPtr, XiQString* before, XiQString* after);
    static void replaceCI(XiQString* __thisPtr, XiQString* before, XiQString* after);
    static XiQString* right(XiQString* __thisPtr, int n);
    static void setNum(XiQString* __thisPtr, int num);
    static XiQString* simplified(XiQString* __thisPtr);
    static void* split(XiQString* __thisPtr, XiQString* separator);
    static bool startsWith(XiQString* __thisPtr, XiQString* other);
    static XiQString* toLower(XiQString* __thisPtr);
    static XiQString* toUpper(XiQString* __thisPtr);
    static XiQString* trimmed(XiQString* __thisPtr);
    static void truncate(XiQString* __thisPtr, int n);
    static XiQString* plus(XiQString* __thisPtr, XiQString* other);
    static bool equals(XiQString* __thisPtr, XiQString* other);
    static bool neq(XiQString* __thisPtr, XiQString* other);
    static bool less(XiQString* __thisPtr, XiQString* other);
    static bool leq(XiQString* __thisPtr, XiQString* other);
    static bool greater(XiQString* __thisPtr, XiQString* other);
    static bool geq(XiQString* __thisPtr, XiQString* other);
};

inline XiQString* toXi(const QString& orig) {
    XiQString* r = gcNew<XiQString>();
    r->value = orig;
    return r;
}

inline QString fromXi(XiQString* wrapped) {
    return *wrapped->impl();
}

struct XiQString_vtable: public Xivtable
{
    void* reserved;
    void* (*XiString)(XiQString*);
    void (*append)(XiQString*, XiQString*);
    int (*at)(XiQString*, int);
    void (*chop)(XiQString*, int);
    void (*clear)(XiQString*);
    int (*compare)(XiQString*, XiQString*);
    bool (*contains)(XiQString*, XiQString*);
    bool (*containsCI)(XiQString*, XiQString*);
    int (*count)(XiQString*, XiQString*);
    int (*countCI)(XiQString*, XiQString*);
    bool (*endsWith)(XiQString*, XiQString*);
    int (*indexOf)(XiQString*, XiQString*, int);
    int (*indexOfCI)(XiQString*, XiQString*, int);
    void (*insert)(XiQString*, int, XiQString*);
    bool (*isEmpty)(XiQString*);
    XiQString* (*left)(XiQString*, int);
    int (*getLength)(XiQString*);
    XiQString* (*mid)(XiQString*, int, int);
    void (*prepend)(XiQString*, XiQString*);
    void (*remove)(XiQString*, int, int);
    XiQString* (*repeated)(XiQString*, int);
    void (*replace)(XiQString*, XiQString*, XiQString*);
    void (*replaceCI)(XiQString*, XiQString*, XiQString*);
    XiQString* (*right)(XiQString*, int);
    void (*setNum)(XiQString*, int);
    XiQString* (*simplified)(XiQString*);
    void* (*split)(XiQString*, XiQString*);
    bool (*startsWith)(XiQString*, XiQString*);
    XiQString* (*toLower)(XiQString*);
    XiQString* (*toUpper)(XiQString*);
    XiQString* (*trimmed)(XiQString*);
    void (*truncate)(XiQString*, int);
    XiQString* (*plus)(XiQString*, XiQString*);
    bool (*equals)(XiQString*, XiQString*);
    bool (*neq)(XiQString*, XiQString*);
    bool (*less)(XiQString*, XiQString*);
    bool (*leq)(XiQString*, XiQString*);
    bool (*greater)(XiQString*, XiQString*);
    bool (*geq)(XiQString*, XiQString*);
};

inline XiQString_vtable* XiQString::vtable() {
    return static_cast<XiQString_vtable*>(vptr);
}

extern XiQString_vtable XI(_vt_QString);
extern int XI(_size_QString);
XI_EXPORT void XI(_init_QString)() __attribute__((constructor));


XI_EXPORT XiQString* XI(qs_o7QStringai)(void* istr);
XI_EXPORT XiQString* XI(qsNum_o7QStringi)(int num);


struct XiQPoint_vtable;
struct XiQPoint: public Xiobj
{
    XiQPoint_vtable* vtable();
    XiQPoint();
    QPoint value;
    QPoint* impl() {
        if (!initialized) 
            new (this) XiQPoint();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQPoint* me = static_cast<XiQPoint*>(mePtr);
        if (me->initialized)
            me->~XiQPoint();
    }

    static int x(XiQPoint* __thisPtr);
    static int y(XiQPoint* __thisPtr);
    static void setX(XiQPoint* __thisPtr, int param0);
    static void setY(XiQPoint* __thisPtr, int param0);
    static XiQPoint* plus(XiQPoint* __thisPtr, XiQPoint* other);
    static XiQPoint* minus(XiQPoint* __thisPtr, XiQPoint* other);
    static bool equals(XiQPoint* __thisPtr, XiQPoint* other);
    static bool neq(XiQPoint* __thisPtr, XiQPoint* other);
};

inline XiQPoint* toXi(const QPoint& orig) {
    XiQPoint* r = gcNew<XiQPoint>();
    r->value = orig;
    return r;
}

inline QPoint fromXi(XiQPoint* wrapped) {
    return *wrapped->impl();
}

struct XiQPoint_vtable: public Xivtable
{
    void* reserved;
    int (*x)(XiQPoint*);
    int (*y)(XiQPoint*);
    void (*setX)(XiQPoint*, int);
    void (*setY)(XiQPoint*, int);
    XiQPoint* (*plus)(XiQPoint*, XiQPoint*);
    XiQPoint* (*minus)(XiQPoint*, XiQPoint*);
    bool (*equals)(XiQPoint*, XiQPoint*);
    bool (*neq)(XiQPoint*, XiQPoint*);
};

inline XiQPoint_vtable* XiQPoint::vtable() {
    return static_cast<XiQPoint_vtable*>(vptr);
}

extern XiQPoint_vtable XI(_vt_QPoint);
extern int XI(_size_QPoint);
XI_EXPORT void XI(_init_QPoint)() __attribute__((constructor));


XI_EXPORT XiQPoint* XI(qpoint_o6QPointii)(int x, int y);


struct XiQSize_vtable;
struct XiQSize: public Xiobj
{
    XiQSize_vtable* vtable();
    XiQSize();
    QSize value;
    QSize* impl() {
        if (!initialized) 
            new (this) XiQSize();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQSize* me = static_cast<XiQSize*>(mePtr);
        if (me->initialized)
            me->~XiQSize();
    }

    static XiQSize* boundedTo(XiQSize* __thisPtr, XiQSize* other);
    static XiQSize* expandedTo(XiQSize* __thisPtr, XiQSize* other);
    static bool isEmpty(XiQSize* __thisPtr);
    static bool isNull(XiQSize* __thisPtr);
    static bool isValid(XiQSize* __thisPtr);
    static void setHeight(XiQSize* __thisPtr, int param0);
    static void setWidth(XiQSize* __thisPtr, int param0);
    static void transpose(XiQSize* __thisPtr);
    static int width(XiQSize* __thisPtr);
    static int height(XiQSize* __thisPtr);
    static XiQSize* plus(XiQSize* __thisPtr, XiQSize* other);
    static XiQSize* minus(XiQSize* __thisPtr, XiQSize* other);
    static bool equals(XiQSize* __thisPtr, XiQSize* other);
    static bool neq(XiQSize* __thisPtr, XiQSize* other);
};

inline XiQSize* toXi(const QSize& orig) {
    XiQSize* r = gcNew<XiQSize>();
    r->value = orig;
    return r;
}

inline QSize fromXi(XiQSize* wrapped) {
    return *wrapped->impl();
}

struct XiQSize_vtable: public Xivtable
{
    void* reserved;
    XiQSize* (*boundedTo)(XiQSize*, XiQSize*);
    XiQSize* (*expandedTo)(XiQSize*, XiQSize*);
    bool (*isEmpty)(XiQSize*);
    bool (*isNull)(XiQSize*);
    bool (*isValid)(XiQSize*);
    void (*setHeight)(XiQSize*, int);
    void (*setWidth)(XiQSize*, int);
    void (*transpose)(XiQSize*);
    int (*width)(XiQSize*);
    int (*height)(XiQSize*);
    XiQSize* (*plus)(XiQSize*, XiQSize*);
    XiQSize* (*minus)(XiQSize*, XiQSize*);
    bool (*equals)(XiQSize*, XiQSize*);
    bool (*neq)(XiQSize*, XiQSize*);
};

inline XiQSize_vtable* XiQSize::vtable() {
    return static_cast<XiQSize_vtable*>(vptr);
}

extern XiQSize_vtable XI(_vt_QSize);
extern int XI(_size_QSize);
XI_EXPORT void XI(_init_QSize)() __attribute__((constructor));


XI_EXPORT XiQSize* XI(qsize_o5QSizeii)(int w, int h);


struct XiQRect_vtable;
struct XiQRect: public Xiobj
{
    XiQRect_vtable* vtable();
    XiQRect();
    QRect value;
    QRect* impl() {
        if (!initialized) 
            new (this) XiQRect();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQRect* me = static_cast<XiQRect*>(mePtr);
        if (me->initialized)
            me->~XiQRect();
    }

    static void adjust(XiQRect* __thisPtr, int dx1, int dy1, int dx2, int dy2);
    static XiQRect* adjusted(XiQRect* __thisPtr, int dx1, int dy1, int dx2, int dy2);
    static int bottom(XiQRect* __thisPtr);
    static XiQPoint* bottomLeft(XiQRect* __thisPtr);
    static XiQPoint* bottomRight(XiQRect* __thisPtr);
    static XiQPoint* center(XiQRect* __thisPtr);
    static bool contains(XiQRect* __thisPtr, XiQPoint* param0);
    static int height(XiQRect* __thisPtr);
    static XiQRect* intersected(XiQRect* __thisPtr, XiQRect* other);
    static bool intersects(XiQRect* __thisPtr, XiQRect* other);
    static bool isEmpty(XiQRect* __thisPtr);
    static int left(XiQRect* __thisPtr);
    static void moveBottom(XiQRect* __thisPtr, int y);
    static void moveBottomLeft(XiQRect* __thisPtr, XiQPoint* p);
    static void moveBottomRight(XiQRect* __thisPtr, XiQPoint* p);
    static void moveCenter(XiQRect* __thisPtr, XiQPoint* p);
    static void moveLeft(XiQRect* __thisPtr, int x);
    static void moveRight(XiQRect* __thisPtr, int x);
    static void moveTo(XiQRect* __thisPtr, XiQPoint* p);
    static void moveTop(XiQRect* __thisPtr, int y);
    static void moveTopLeft(XiQRect* __thisPtr, XiQPoint* p);
    static void moveTopRight(XiQRect* __thisPtr, XiQPoint* p);
    static XiQRect* normalized(XiQRect* __thisPtr);
    static int right(XiQRect* __thisPtr);
    static void setBottom(XiQRect* __thisPtr, int y);
    static void setBottomLeft(XiQRect* __thisPtr, XiQPoint* p);
    static void setBottomRight(XiQRect* __thisPtr, XiQPoint* p);
    static void setCoords(XiQRect* __thisPtr, int x1, int y1, int x2, int y2);
    static void setHeight(XiQRect* __thisPtr, int h);
    static void setLeft(XiQRect* __thisPtr, int x);
    static void setRect(XiQRect* __thisPtr, int x, int y, int w, int h);
    static void setRight(XiQRect* __thisPtr, int x);
    static void setSize(XiQRect* __thisPtr, XiQSize* size);
    static void setTop(XiQRect* __thisPtr, int y);
    static void setTopLeft(XiQRect* __thisPtr, XiQPoint* p);
    static void setTopRight(XiQRect* __thisPtr, XiQPoint* p);
    static void setWidth(XiQRect* __thisPtr, int w);
    static void setX(XiQRect* __thisPtr, int x);
    static void setY(XiQRect* __thisPtr, int y);
    static XiQSize* size(XiQRect* __thisPtr);
    static int top(XiQRect* __thisPtr);
    static XiQPoint* topLeft(XiQRect* __thisPtr);
    static XiQPoint* topRight(XiQRect* __thisPtr);
    static void translate(XiQRect* __thisPtr, int dx, int y);
    static XiQRect* translated(XiQRect* __thisPtr, int dx, int dy);
    static XiQRect* united(XiQRect* __thisPtr, XiQRect* other);
    static int width(XiQRect* __thisPtr);
    static int x(XiQRect* __thisPtr);
    static int y(XiQRect* __thisPtr);
    static bool equals(XiQRect* __thisPtr, XiQRect* other);
    static bool neq(XiQRect* __thisPtr, XiQRect* other);
};

inline XiQRect* toXi(const QRect& orig) {
    XiQRect* r = gcNew<XiQRect>();
    r->value = orig;
    return r;
}

inline QRect fromXi(XiQRect* wrapped) {
    return *wrapped->impl();
}

struct XiQRect_vtable: public Xivtable
{
    void* reserved;
    void (*adjust)(XiQRect*, int, int, int, int);
    XiQRect* (*adjusted)(XiQRect*, int, int, int, int);
    int (*bottom)(XiQRect*);
    XiQPoint* (*bottomLeft)(XiQRect*);
    XiQPoint* (*bottomRight)(XiQRect*);
    XiQPoint* (*center)(XiQRect*);
    bool (*contains)(XiQRect*, XiQPoint*);
    int (*height)(XiQRect*);
    XiQRect* (*intersected)(XiQRect*, XiQRect*);
    bool (*intersects)(XiQRect*, XiQRect*);
    bool (*isEmpty)(XiQRect*);
    int (*left)(XiQRect*);
    void (*moveBottom)(XiQRect*, int);
    void (*moveBottomLeft)(XiQRect*, XiQPoint*);
    void (*moveBottomRight)(XiQRect*, XiQPoint*);
    void (*moveCenter)(XiQRect*, XiQPoint*);
    void (*moveLeft)(XiQRect*, int);
    void (*moveRight)(XiQRect*, int);
    void (*moveTo)(XiQRect*, XiQPoint*);
    void (*moveTop)(XiQRect*, int);
    void (*moveTopLeft)(XiQRect*, XiQPoint*);
    void (*moveTopRight)(XiQRect*, XiQPoint*);
    XiQRect* (*normalized)(XiQRect*);
    int (*right)(XiQRect*);
    void (*setBottom)(XiQRect*, int);
    void (*setBottomLeft)(XiQRect*, XiQPoint*);
    void (*setBottomRight)(XiQRect*, XiQPoint*);
    void (*setCoords)(XiQRect*, int, int, int, int);
    void (*setHeight)(XiQRect*, int);
    void (*setLeft)(XiQRect*, int);
    void (*setRect)(XiQRect*, int, int, int, int);
    void (*setRight)(XiQRect*, int);
    void (*setSize)(XiQRect*, XiQSize*);
    void (*setTop)(XiQRect*, int);
    void (*setTopLeft)(XiQRect*, XiQPoint*);
    void (*setTopRight)(XiQRect*, XiQPoint*);
    void (*setWidth)(XiQRect*, int);
    void (*setX)(XiQRect*, int);
    void (*setY)(XiQRect*, int);
    XiQSize* (*size)(XiQRect*);
    int (*top)(XiQRect*);
    XiQPoint* (*topLeft)(XiQRect*);
    XiQPoint* (*topRight)(XiQRect*);
    void (*translate)(XiQRect*, int, int);
    XiQRect* (*translated)(XiQRect*, int, int);
    XiQRect* (*united)(XiQRect*, XiQRect*);
    int (*width)(XiQRect*);
    int (*x)(XiQRect*);
    int (*y)(XiQRect*);
    bool (*equals)(XiQRect*, XiQRect*);
    bool (*neq)(XiQRect*, XiQRect*);
};

inline XiQRect_vtable* XiQRect::vtable() {
    return static_cast<XiQRect_vtable*>(vptr);
}

extern XiQRect_vtable XI(_vt_QRect);
extern int XI(_size_QRect);
XI_EXPORT void XI(_init_QRect)() __attribute__((constructor));


XI_EXPORT XiQRect* XI(qrect_o5QRectiiii)(int x, int y, int w, int h);


struct XiOrientation_vtable;
struct XiOrientation: public Xiobj
{
    XiOrientation_vtable* vtable();
    XiOrientation();
    Orientation value;
    Orientation* impl() {
        if (!initialized) 
            new (this) XiOrientation();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiOrientation* me = static_cast<XiOrientation*>(mePtr);
        if (me->initialized)
            me->~XiOrientation();
    }

};

XI_EXPORT XiOrientation* XI(Horizontal_o11Orientation)();
XI_EXPORT XiOrientation* XI(Vertical_o11Orientation)();
inline XiOrientation* toXi(const Orientation& orig) {
    if (orig == Horizontal)
        return XI(Horizontal_o11Orientation)();
    if (orig == Vertical)
        return XI(Vertical_o11Orientation)();
    XiOrientation* r = gcNew<XiOrientation>();
    r->value = orig;
    return r;
}

inline Orientation fromXi(XiOrientation* wrapped) {
    return *wrapped->impl();
}

struct XiOrientation_vtable: public Xivtable
{
    void* reserved;
};

inline XiOrientation_vtable* XiOrientation::vtable() {
    return static_cast<XiOrientation_vtable*>(vptr);
}

extern XiOrientation_vtable XI(_vt_Orientation);
extern int XI(_size_Orientation);
XI_EXPORT void XI(_init_Orientation)() __attribute__((constructor));


typedef QEvent::Type EventType;


struct XiEventType_vtable;
struct XiEventType: public Xiobj
{
    XiEventType_vtable* vtable();
    XiEventType();
    EventType value;
    EventType* impl() {
        if (!initialized) 
            new (this) XiEventType();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiEventType* me = static_cast<XiEventType*>(mePtr);
        if (me->initialized)
            me->~XiEventType();
    }

};

XI_EXPORT XiEventType* XI(ContextMenu_o9EventType)();
XI_EXPORT XiEventType* XI(Close_o9EventType)();
XI_EXPORT XiEventType* XI(Enter_o9EventType)();
XI_EXPORT XiEventType* XI(Hide_o9EventType)();
XI_EXPORT XiEventType* XI(KeyPress_o9EventType)();
XI_EXPORT XiEventType* XI(KeyRelease_o9EventType)();
XI_EXPORT XiEventType* XI(Leave_o9EventType)();
XI_EXPORT XiEventType* XI(MouseButtonDblClick_o9EventType)();
XI_EXPORT XiEventType* XI(MouseButtonPress_o9EventType)();
XI_EXPORT XiEventType* XI(MouseButtonRelease_o9EventType)();
XI_EXPORT XiEventType* XI(MouseMove_o9EventType)();
XI_EXPORT XiEventType* XI(Paint_o9EventType)();
XI_EXPORT XiEventType* XI(Resize_o9EventType)();
XI_EXPORT XiEventType* XI(Show_o9EventType)();
XI_EXPORT XiEventType* XI(Wheel_o9EventType)();
inline XiEventType* toXi(const EventType& orig) {
    if (orig == QEvent::ContextMenu)
        return XI(ContextMenu_o9EventType)();
    if (orig == QEvent::Close)
        return XI(Close_o9EventType)();
    if (orig == QEvent::Enter)
        return XI(Enter_o9EventType)();
    if (orig == QEvent::Hide)
        return XI(Hide_o9EventType)();
    if (orig == QEvent::KeyPress)
        return XI(KeyPress_o9EventType)();
    if (orig == QEvent::KeyRelease)
        return XI(KeyRelease_o9EventType)();
    if (orig == QEvent::Leave)
        return XI(Leave_o9EventType)();
    if (orig == QEvent::MouseButtonDblClick)
        return XI(MouseButtonDblClick_o9EventType)();
    if (orig == QEvent::MouseButtonPress)
        return XI(MouseButtonPress_o9EventType)();
    if (orig == QEvent::MouseButtonRelease)
        return XI(MouseButtonRelease_o9EventType)();
    if (orig == QEvent::MouseMove)
        return XI(MouseMove_o9EventType)();
    if (orig == QEvent::Paint)
        return XI(Paint_o9EventType)();
    if (orig == QEvent::Resize)
        return XI(Resize_o9EventType)();
    if (orig == QEvent::Show)
        return XI(Show_o9EventType)();
    if (orig == QEvent::Wheel)
        return XI(Wheel_o9EventType)();
    XiEventType* r = gcNew<XiEventType>();
    r->value = orig;
    return r;
}

inline EventType fromXi(XiEventType* wrapped) {
    return *wrapped->impl();
}

struct XiEventType_vtable: public Xivtable
{
    void* reserved;
};

inline XiEventType_vtable* XiEventType::vtable() {
    return static_cast<XiEventType_vtable*>(vptr);
}

extern XiEventType_vtable XI(_vt_EventType);
extern int XI(_size_EventType);
XI_EXPORT void XI(_init_EventType)() __attribute__((constructor));




struct XiQEvent_vtable;
struct XiQEvent: public Xiobj
{
    XiQEvent_vtable* vtable();
    XiQEvent();
    QEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QEvent wrappedType;
    QEvent* e;
    QEvent* getImpl() {
        return e;
    }

    void createImpl() {
        assert(false);
    }
    static XiEventType* type(XiQEvent* __thisPtr);
    static void accept(XiQEvent* __thisPtr);
    static void ignore(XiQEvent* __thisPtr);
    static bool isAccepted(XiQEvent* __thisPtr);
};

inline QEvent* fromXi(XiQEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQEvent_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    XiEventType* (*type)(XiQEvent*);
    void (*accept)(XiQEvent*);
    void (*ignore)(XiQEvent*);
    bool (*isAccepted)(XiQEvent*);
};

inline XiQEvent_vtable* XiQEvent::vtable() {
    return static_cast<XiQEvent_vtable*>(vptr);
}

extern XiQEvent_vtable XI(_vt_QEvent);
extern int XI(_size_QEvent);
XI_EXPORT void XI(_init_QEvent)() __attribute__((constructor));




struct XiQInputEvent_vtable;
struct XiQInputEvent: public XiQEvent
{
    XiQInputEvent_vtable* vtable();
    XiQInputEvent();
    QInputEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QInputEvent wrappedType;
    QInputEvent* getImpl() {
        return static_cast<QInputEvent*>(e);
    }
    static bool shift(XiQInputEvent* __thisPtr);
    static bool ctrl(XiQInputEvent* __thisPtr);
    static bool alt(XiQInputEvent* __thisPtr);
    static bool meta(XiQInputEvent* __thisPtr);
};

inline QInputEvent* fromXi(XiQInputEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQInputEvent_vtable: public XiQEvent_vtable
{
    void* reserved;
    bool (*shift)(XiQInputEvent*);
    bool (*ctrl)(XiQInputEvent*);
    bool (*alt)(XiQInputEvent*);
    bool (*meta)(XiQInputEvent*);
};

inline XiQInputEvent_vtable* XiQInputEvent::vtable() {
    return static_cast<XiQInputEvent_vtable*>(vptr);
}

extern XiQInputEvent_vtable XI(_vt_QInputEvent);
extern int XI(_size_QInputEvent);
XI_EXPORT void XI(_init_QInputEvent)() __attribute__((constructor));




struct XiQContextMenuEvent_vtable;
struct XiQContextMenuEvent: public XiQInputEvent
{
    XiQContextMenuEvent_vtable* vtable();
    XiQContextMenuEvent();
    QContextMenuEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QContextMenuEvent wrappedType;
    QContextMenuEvent* getImpl() {
        return static_cast<QContextMenuEvent*>(e);
    }
    static XiQPoint* globalPos(XiQContextMenuEvent* __thisPtr);
    static XiQPoint* pos(XiQContextMenuEvent* __thisPtr);
};

inline QContextMenuEvent* fromXi(XiQContextMenuEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQContextMenuEvent_vtable: public XiQInputEvent_vtable
{
    void* reserved;
    XiQPoint* (*globalPos)(XiQContextMenuEvent*);
    XiQPoint* (*pos)(XiQContextMenuEvent*);
};

inline XiQContextMenuEvent_vtable* XiQContextMenuEvent::vtable() {
    return static_cast<XiQContextMenuEvent_vtable*>(vptr);
}

extern XiQContextMenuEvent_vtable XI(_vt_QContextMenuEvent);
extern int XI(_size_QContextMenuEvent);
XI_EXPORT void XI(_init_QContextMenuEvent)() __attribute__((constructor));




struct XiQKeyEvent_vtable;
struct XiQKeyEvent: public XiQInputEvent
{
    XiQKeyEvent_vtable* vtable();
    XiQKeyEvent();
    QKeyEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QKeyEvent wrappedType;
    QKeyEvent* getImpl() {
        return static_cast<QKeyEvent*>(e);
    }
    static int count(XiQKeyEvent* __thisPtr);
    static XiQString* text(XiQKeyEvent* __thisPtr);
    static bool isAutoRepeat(XiQKeyEvent* __thisPtr);
    static int key(XiQKeyEvent* __thisPtr);
};

inline QKeyEvent* fromXi(XiQKeyEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQKeyEvent_vtable: public XiQInputEvent_vtable
{
    void* reserved;
    int (*count)(XiQKeyEvent*);
    XiQString* (*text)(XiQKeyEvent*);
    bool (*isAutoRepeat)(XiQKeyEvent*);
    int (*key)(XiQKeyEvent*);
};

inline XiQKeyEvent_vtable* XiQKeyEvent::vtable() {
    return static_cast<XiQKeyEvent_vtable*>(vptr);
}

extern XiQKeyEvent_vtable XI(_vt_QKeyEvent);
extern int XI(_size_QKeyEvent);
XI_EXPORT void XI(_init_QKeyEvent)() __attribute__((constructor));




struct XiMouseButton_vtable;
struct XiMouseButton: public Xiobj
{
    XiMouseButton_vtable* vtable();
    XiMouseButton();
    MouseButton value;
    MouseButton* impl() {
        if (!initialized) 
            new (this) XiMouseButton();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiMouseButton* me = static_cast<XiMouseButton*>(mePtr);
        if (me->initialized)
            me->~XiMouseButton();
    }

};

XI_EXPORT XiMouseButton* XI(LeftButton_o11MouseButton)();
XI_EXPORT XiMouseButton* XI(RightButton_o11MouseButton)();
XI_EXPORT XiMouseButton* XI(MidButton_o11MouseButton)();
inline XiMouseButton* toXi(const MouseButton& orig) {
    if (orig == LeftButton)
        return XI(LeftButton_o11MouseButton)();
    if (orig == RightButton)
        return XI(RightButton_o11MouseButton)();
    if (orig == MidButton)
        return XI(MidButton_o11MouseButton)();
    XiMouseButton* r = gcNew<XiMouseButton>();
    r->value = orig;
    return r;
}

inline MouseButton fromXi(XiMouseButton* wrapped) {
    return *wrapped->impl();
}

struct XiMouseButton_vtable: public Xivtable
{
    void* reserved;
};

inline XiMouseButton_vtable* XiMouseButton::vtable() {
    return static_cast<XiMouseButton_vtable*>(vptr);
}

extern XiMouseButton_vtable XI(_vt_MouseButton);
extern int XI(_size_MouseButton);
XI_EXPORT void XI(_init_MouseButton)() __attribute__((constructor));




struct XiQMouseEvent_vtable;
struct XiQMouseEvent: public XiQInputEvent
{
    XiQMouseEvent_vtable* vtable();
    XiQMouseEvent();
    QMouseEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QMouseEvent wrappedType;
    QMouseEvent* getImpl() {
        return static_cast<QMouseEvent*>(e);
    }
    static XiQPoint* pos(XiQMouseEvent* __thisPtr);
    static XiQPoint* globalPos(XiQMouseEvent* __thisPtr);
    static XiMouseButton* button(XiQMouseEvent* __thisPtr);
    static bool left(XiQMouseEvent* __thisPtr);
    static bool middle(XiQMouseEvent* __thisPtr);
    static bool right(XiQMouseEvent* __thisPtr);
};

inline QMouseEvent* fromXi(XiQMouseEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQMouseEvent_vtable: public XiQInputEvent_vtable
{
    void* reserved;
    XiQPoint* (*pos)(XiQMouseEvent*);
    XiQPoint* (*globalPos)(XiQMouseEvent*);
    XiMouseButton* (*button)(XiQMouseEvent*);
    bool (*left)(XiQMouseEvent*);
    bool (*middle)(XiQMouseEvent*);
    bool (*right)(XiQMouseEvent*);
};

inline XiQMouseEvent_vtable* XiQMouseEvent::vtable() {
    return static_cast<XiQMouseEvent_vtable*>(vptr);
}

extern XiQMouseEvent_vtable XI(_vt_QMouseEvent);
extern int XI(_size_QMouseEvent);
XI_EXPORT void XI(_init_QMouseEvent)() __attribute__((constructor));




struct XiQPaintEvent_vtable;
struct XiQPaintEvent: public XiQEvent
{
    XiQPaintEvent_vtable* vtable();
    XiQPaintEvent();
    QPaintEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QPaintEvent wrappedType;
    QPaintEvent* getImpl() {
        return static_cast<QPaintEvent*>(e);
    }
    static XiQRect* rect(XiQPaintEvent* __thisPtr);
};

inline QPaintEvent* fromXi(XiQPaintEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQPaintEvent_vtable: public XiQEvent_vtable
{
    void* reserved;
    XiQRect* (*rect)(XiQPaintEvent*);
};

inline XiQPaintEvent_vtable* XiQPaintEvent::vtable() {
    return static_cast<XiQPaintEvent_vtable*>(vptr);
}

extern XiQPaintEvent_vtable XI(_vt_QPaintEvent);
extern int XI(_size_QPaintEvent);
XI_EXPORT void XI(_init_QPaintEvent)() __attribute__((constructor));




struct XiQResizeEvent_vtable;
struct XiQResizeEvent: public XiQEvent
{
    XiQResizeEvent_vtable* vtable();
    XiQResizeEvent();
    QResizeEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QResizeEvent wrappedType;
    QResizeEvent* getImpl() {
        return static_cast<QResizeEvent*>(e);
    }
    static XiQSize* oldSize(XiQResizeEvent* __thisPtr);
    static XiQSize* size(XiQResizeEvent* __thisPtr);
};

inline QResizeEvent* fromXi(XiQResizeEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQResizeEvent_vtable: public XiQEvent_vtable
{
    void* reserved;
    XiQSize* (*oldSize)(XiQResizeEvent*);
    XiQSize* (*size)(XiQResizeEvent*);
};

inline XiQResizeEvent_vtable* XiQResizeEvent::vtable() {
    return static_cast<XiQResizeEvent_vtable*>(vptr);
}

extern XiQResizeEvent_vtable XI(_vt_QResizeEvent);
extern int XI(_size_QResizeEvent);
XI_EXPORT void XI(_init_QResizeEvent)() __attribute__((constructor));




struct XiQWheelEvent_vtable;
struct XiQWheelEvent: public XiQInputEvent
{
    XiQWheelEvent_vtable* vtable();
    XiQWheelEvent();
    QWheelEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QWheelEvent wrappedType;
    QWheelEvent* getImpl() {
        return static_cast<QWheelEvent*>(e);
    }
    static int delta(XiQWheelEvent* __thisPtr);
    static XiQPoint* pos(XiQWheelEvent* __thisPtr);
    static XiQPoint* globalPos(XiQWheelEvent* __thisPtr);
    static XiOrientation* orientation(XiQWheelEvent* __thisPtr);
};

inline QWheelEvent* fromXi(XiQWheelEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQWheelEvent_vtable: public XiQInputEvent_vtable
{
    void* reserved;
    int (*delta)(XiQWheelEvent*);
    XiQPoint* (*pos)(XiQWheelEvent*);
    XiQPoint* (*globalPos)(XiQWheelEvent*);
    XiOrientation* (*orientation)(XiQWheelEvent*);
};

inline XiQWheelEvent_vtable* XiQWheelEvent::vtable() {
    return static_cast<XiQWheelEvent_vtable*>(vptr);
}

extern XiQWheelEvent_vtable XI(_vt_QWheelEvent);
extern int XI(_size_QWheelEvent);
XI_EXPORT void XI(_init_QWheelEvent)() __attribute__((constructor));




struct XiQPaintDevice_vtable;
struct XiQPaintDevice: public Xiobj
{
    XiQPaintDevice_vtable* vtable();
    XiQPaintDevice();
    QPaintDevice* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QPaintDevice wrappedType;
    QPaintDevice* getImpl();
    void createImpl() {
        assert(0);
    }
    static XiQPixmap* toPixmap(XiQPaintDevice* __thisPtr);
    static XiQWidget* toWidget(XiQPaintDevice* __thisPtr);
};

inline QPaintDevice* fromXi(XiQPaintDevice* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQPaintDevice_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    XiQPixmap* (*toPixmap)(XiQPaintDevice*);
    XiQWidget* (*toWidget)(XiQPaintDevice*);
};

inline XiQPaintDevice_vtable* XiQPaintDevice::vtable() {
    return static_cast<XiQPaintDevice_vtable*>(vptr);
}

extern XiQPaintDevice_vtable XI(_vt_QPaintDevice);
extern int XI(_size_QPaintDevice);
XI_EXPORT void XI(_init_QPaintDevice)() __attribute__((constructor));




struct XiQPixmap_vtable;
struct XiQPixmap: public XiQPaintDevice
{
    XiQPixmap_vtable* vtable();
    XiQPixmap();
    QPixmap* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QPixmap wrappedType;
    QPixmap* handle;

    QPixmap* getImpl() {
        return handle;
    }

    void createImpl() {
        handle = new QPixmap(); // an empty one
    }

    ~XiQPixmap() {
        delete handle;
    }
    static XiQPixmap* toPixmap(XiQPaintDevice* __thisPtr);
    static void load(XiQPixmap* __thisPtr, XiQString* file);
    static void save(XiQPixmap* __thisPtr, XiQString* file);
    static void fill(XiQPixmap* __thisPtr, XiQColor* c);
    static XiQPixmap* copy(XiQPixmap* __thisPtr, XiQRect* rect);
    static bool isNull(XiQPixmap* __thisPtr);
    static int height(XiQPixmap* __thisPtr);
    static int width(XiQPixmap* __thisPtr);
    static XiQSize* size(XiQPixmap* __thisPtr);
};

inline QPixmap* fromXi(XiQPixmap* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQPixmap_vtable: public XiQPaintDevice_vtable
{
    void* reserved;
    void (*load)(XiQPixmap*, XiQString*);
    void (*save)(XiQPixmap*, XiQString*);
    void (*fill)(XiQPixmap*, XiQColor*);
    XiQPixmap* (*copy)(XiQPixmap*, XiQRect*);
    bool (*isNull)(XiQPixmap*);
    int (*height)(XiQPixmap*);
    int (*width)(XiQPixmap*);
    XiQSize* (*size)(XiQPixmap*);
};

inline XiQPixmap_vtable* XiQPixmap::vtable() {
    return static_cast<XiQPixmap_vtable*>(vptr);
}

extern XiQPixmap_vtable XI(_vt_QPixmap);
extern int XI(_size_QPixmap);
XI_EXPORT void XI(_init_QPixmap)() __attribute__((constructor));


XI_EXPORT XiQPixmap* XI(qpixmap_o7QPixmapii)(int width, int height);
XI_EXPORT XiQPixmap* XI(qpixmapFromFile_o7QPixmapo7QString)(XiQString* f);

inline XiQPixmap* toXi(const QPixmap& p) {
    XiQPixmap* ip = gcNew<XiQPixmap>();
    ip->handle = new QPixmap(p);
    return ip;
}


struct XiQColor_vtable;
struct XiQColor: public Xiobj
{
    XiQColor_vtable* vtable();
    XiQColor();
    QColor value;
    QColor* impl() {
        if (!initialized) 
            new (this) XiQColor();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQColor* me = static_cast<XiQColor*>(mePtr);
        if (me->initialized)
            me->~XiQColor();
    }

    static int alpha(XiQColor* __thisPtr);
    static int red(XiQColor* __thisPtr);
    static int green(XiQColor* __thisPtr);
    static int blue(XiQColor* __thisPtr);
    static void setAlpha(XiQColor* __thisPtr, int param0);
    static void setRed(XiQColor* __thisPtr, int param0);
    static void setGreen(XiQColor* __thisPtr, int param0);
    static void setBlue(XiQColor* __thisPtr, int param0);
    static XiQString* name(XiQColor* __thisPtr);
    static void setNamedColor(XiQColor* __thisPtr, XiQString* param0);
    static bool equals(XiQColor* __thisPtr, XiQColor* other);
    static bool neq(XiQColor* __thisPtr, XiQColor* other);
};

inline XiQColor* toXi(const QColor& orig) {
    XiQColor* r = gcNew<XiQColor>();
    r->value = orig;
    return r;
}

inline QColor fromXi(XiQColor* wrapped) {
    return *wrapped->impl();
}

struct XiQColor_vtable: public Xivtable
{
    void* reserved;
    int (*alpha)(XiQColor*);
    int (*red)(XiQColor*);
    int (*green)(XiQColor*);
    int (*blue)(XiQColor*);
    void (*setAlpha)(XiQColor*, int);
    void (*setRed)(XiQColor*, int);
    void (*setGreen)(XiQColor*, int);
    void (*setBlue)(XiQColor*, int);
    XiQString* (*name)(XiQColor*);
    void (*setNamedColor)(XiQColor*, XiQString*);
    bool (*equals)(XiQColor*, XiQColor*);
    bool (*neq)(XiQColor*, XiQColor*);
};

inline XiQColor_vtable* XiQColor::vtable() {
    return static_cast<XiQColor_vtable*>(vptr);
}

extern XiQColor_vtable XI(_vt_QColor);
extern int XI(_size_QColor);
XI_EXPORT void XI(_init_QColor)() __attribute__((constructor));


XI_EXPORT XiQColor* XI(qcolor_o6QColoriii)(int r, int g, int b);
XI_EXPORT XiQColor* XI(qcolorRGBA_o6QColoriiii)(int r, int g, int b, int a);


struct XiPenStyle_vtable;
struct XiPenStyle: public Xiobj
{
    XiPenStyle_vtable* vtable();
    XiPenStyle();
    PenStyle value;
    PenStyle* impl() {
        if (!initialized) 
            new (this) XiPenStyle();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiPenStyle* me = static_cast<XiPenStyle*>(mePtr);
        if (me->initialized)
            me->~XiPenStyle();
    }

};

XI_EXPORT XiPenStyle* XI(NoPen_o8PenStyle)();
XI_EXPORT XiPenStyle* XI(SolidLine_o8PenStyle)();
XI_EXPORT XiPenStyle* XI(DashLine_o8PenStyle)();
XI_EXPORT XiPenStyle* XI(DotLine_o8PenStyle)();
XI_EXPORT XiPenStyle* XI(DashDotLine_o8PenStyle)();
XI_EXPORT XiPenStyle* XI(DashDotDotLine_o8PenStyle)();
inline XiPenStyle* toXi(const PenStyle& orig) {
    if (orig == NoPen)
        return XI(NoPen_o8PenStyle)();
    if (orig == SolidLine)
        return XI(SolidLine_o8PenStyle)();
    if (orig == DashLine)
        return XI(DashLine_o8PenStyle)();
    if (orig == DotLine)
        return XI(DotLine_o8PenStyle)();
    if (orig == DashDotLine)
        return XI(DashDotLine_o8PenStyle)();
    if (orig == DashDotDotLine)
        return XI(DashDotDotLine_o8PenStyle)();
    XiPenStyle* r = gcNew<XiPenStyle>();
    r->value = orig;
    return r;
}

inline PenStyle fromXi(XiPenStyle* wrapped) {
    return *wrapped->impl();
}

struct XiPenStyle_vtable: public Xivtable
{
    void* reserved;
};

inline XiPenStyle_vtable* XiPenStyle::vtable() {
    return static_cast<XiPenStyle_vtable*>(vptr);
}

extern XiPenStyle_vtable XI(_vt_PenStyle);
extern int XI(_size_PenStyle);
XI_EXPORT void XI(_init_PenStyle)() __attribute__((constructor));




struct XiPenCapStyle_vtable;
struct XiPenCapStyle: public Xiobj
{
    XiPenCapStyle_vtable* vtable();
    XiPenCapStyle();
    PenCapStyle value;
    PenCapStyle* impl() {
        if (!initialized) 
            new (this) XiPenCapStyle();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiPenCapStyle* me = static_cast<XiPenCapStyle*>(mePtr);
        if (me->initialized)
            me->~XiPenCapStyle();
    }

};

XI_EXPORT XiPenCapStyle* XI(FlatCap_o11PenCapStyle)();
XI_EXPORT XiPenCapStyle* XI(SquareCap_o11PenCapStyle)();
XI_EXPORT XiPenCapStyle* XI(RoundCap_o11PenCapStyle)();
inline XiPenCapStyle* toXi(const PenCapStyle& orig) {
    if (orig == FlatCap)
        return XI(FlatCap_o11PenCapStyle)();
    if (orig == SquareCap)
        return XI(SquareCap_o11PenCapStyle)();
    if (orig == RoundCap)
        return XI(RoundCap_o11PenCapStyle)();
    XiPenCapStyle* r = gcNew<XiPenCapStyle>();
    r->value = orig;
    return r;
}

inline PenCapStyle fromXi(XiPenCapStyle* wrapped) {
    return *wrapped->impl();
}

struct XiPenCapStyle_vtable: public Xivtable
{
    void* reserved;
};

inline XiPenCapStyle_vtable* XiPenCapStyle::vtable() {
    return static_cast<XiPenCapStyle_vtable*>(vptr);
}

extern XiPenCapStyle_vtable XI(_vt_PenCapStyle);
extern int XI(_size_PenCapStyle);
XI_EXPORT void XI(_init_PenCapStyle)() __attribute__((constructor));




struct XiPenJoinStyle_vtable;
struct XiPenJoinStyle: public Xiobj
{
    XiPenJoinStyle_vtable* vtable();
    XiPenJoinStyle();
    PenJoinStyle value;
    PenJoinStyle* impl() {
        if (!initialized) 
            new (this) XiPenJoinStyle();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiPenJoinStyle* me = static_cast<XiPenJoinStyle*>(mePtr);
        if (me->initialized)
            me->~XiPenJoinStyle();
    }

};

XI_EXPORT XiPenJoinStyle* XI(MiterJoin_o12PenJoinStyle)();
XI_EXPORT XiPenJoinStyle* XI(BevelJoin_o12PenJoinStyle)();
XI_EXPORT XiPenJoinStyle* XI(RoundJoin_o12PenJoinStyle)();
XI_EXPORT XiPenJoinStyle* XI(SvgMiterJoin_o12PenJoinStyle)();
inline XiPenJoinStyle* toXi(const PenJoinStyle& orig) {
    if (orig == MiterJoin)
        return XI(MiterJoin_o12PenJoinStyle)();
    if (orig == BevelJoin)
        return XI(BevelJoin_o12PenJoinStyle)();
    if (orig == RoundJoin)
        return XI(RoundJoin_o12PenJoinStyle)();
    if (orig == SvgMiterJoin)
        return XI(SvgMiterJoin_o12PenJoinStyle)();
    XiPenJoinStyle* r = gcNew<XiPenJoinStyle>();
    r->value = orig;
    return r;
}

inline PenJoinStyle fromXi(XiPenJoinStyle* wrapped) {
    return *wrapped->impl();
}

struct XiPenJoinStyle_vtable: public Xivtable
{
    void* reserved;
};

inline XiPenJoinStyle_vtable* XiPenJoinStyle::vtable() {
    return static_cast<XiPenJoinStyle_vtable*>(vptr);
}

extern XiPenJoinStyle_vtable XI(_vt_PenJoinStyle);
extern int XI(_size_PenJoinStyle);
XI_EXPORT void XI(_init_PenJoinStyle)() __attribute__((constructor));




struct XiQPen_vtable;
struct XiQPen: public Xiobj
{
    XiQPen_vtable* vtable();
    XiQPen();
    QPen value;
    QPen* impl() {
        if (!initialized) 
            new (this) XiQPen();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQPen* me = static_cast<XiQPen*>(mePtr);
        if (me->initialized)
            me->~XiQPen();
    }

    static XiQBrush* brush(XiQPen* __thisPtr);
    static XiPenCapStyle* capStyle(XiQPen* __thisPtr);
    static XiQColor* color(XiQPen* __thisPtr);
    static bool isCosmetic(XiQPen* __thisPtr);
    static bool isSolid(XiQPen* __thisPtr);
    static XiPenJoinStyle* joinStyle(XiQPen* __thisPtr);
    static void setBrush(XiQPen* __thisPtr, XiQBrush* param0);
    static void setCapStyle(XiQPen* __thisPtr, XiPenCapStyle* param0);
    static void setColor(XiQPen* __thisPtr, XiQColor* param0);
    static void setCosmetic(XiQPen* __thisPtr, bool param0);
    static void setJoinStyle(XiQPen* __thisPtr, XiPenJoinStyle* param0);
    static void setStyle(XiQPen* __thisPtr, XiPenStyle* param0);
    static void setWidth(XiQPen* __thisPtr, int param0);
    static XiPenStyle* style(XiQPen* __thisPtr);
    static int width(XiQPen* __thisPtr);
    static bool equals(XiQPen* __thisPtr, XiQPen* other);
    static bool neq(XiQPen* __thisPtr, XiQPen* other);
};

inline XiQPen* toXi(const QPen& orig) {
    XiQPen* r = gcNew<XiQPen>();
    r->value = orig;
    return r;
}

inline QPen fromXi(XiQPen* wrapped) {
    return *wrapped->impl();
}

struct XiQPen_vtable: public Xivtable
{
    void* reserved;
    XiQBrush* (*brush)(XiQPen*);
    XiPenCapStyle* (*capStyle)(XiQPen*);
    XiQColor* (*color)(XiQPen*);
    bool (*isCosmetic)(XiQPen*);
    bool (*isSolid)(XiQPen*);
    XiPenJoinStyle* (*joinStyle)(XiQPen*);
    void (*setBrush)(XiQPen*, XiQBrush*);
    void (*setCapStyle)(XiQPen*, XiPenCapStyle*);
    void (*setColor)(XiQPen*, XiQColor*);
    void (*setCosmetic)(XiQPen*, bool);
    void (*setJoinStyle)(XiQPen*, XiPenJoinStyle*);
    void (*setStyle)(XiQPen*, XiPenStyle*);
    void (*setWidth)(XiQPen*, int);
    XiPenStyle* (*style)(XiQPen*);
    int (*width)(XiQPen*);
    bool (*equals)(XiQPen*, XiQPen*);
    bool (*neq)(XiQPen*, XiQPen*);
};

inline XiQPen_vtable* XiQPen::vtable() {
    return static_cast<XiQPen_vtable*>(vptr);
}

extern XiQPen_vtable XI(_vt_QPen);
extern int XI(_size_QPen);
XI_EXPORT void XI(_init_QPen)() __attribute__((constructor));


XI_EXPORT XiQPen* XI(qpen_o4QPeno6QColor)(XiQColor* c);


struct XiQBrush_vtable;
struct XiQBrush: public Xiobj
{
    XiQBrush_vtable* vtable();
    XiQBrush();
    QBrush value;
    QBrush* impl() {
        if (!initialized) 
            new (this) XiQBrush();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQBrush* me = static_cast<XiQBrush*>(mePtr);
        if (me->initialized)
            me->~XiQBrush();
    }

    static XiQColor* color(XiQBrush* __thisPtr);
    static XiQPixmap* texture(XiQBrush* __thisPtr);
    static void setColor(XiQBrush* __thisPtr, XiQColor* c);
    static void setTexture(XiQBrush* __thisPtr, XiQPixmap* p);
};

inline XiQBrush* toXi(const QBrush& orig) {
    XiQBrush* r = gcNew<XiQBrush>();
    r->value = orig;
    return r;
}

inline QBrush fromXi(XiQBrush* wrapped) {
    return *wrapped->impl();
}

struct XiQBrush_vtable: public Xivtable
{
    void* reserved;
    XiQColor* (*color)(XiQBrush*);
    XiQPixmap* (*texture)(XiQBrush*);
    void (*setColor)(XiQBrush*, XiQColor*);
    void (*setTexture)(XiQBrush*, XiQPixmap*);
};

inline XiQBrush_vtable* XiQBrush::vtable() {
    return static_cast<XiQBrush_vtable*>(vptr);
}

extern XiQBrush_vtable XI(_vt_QBrush);
extern int XI(_size_QBrush);
XI_EXPORT void XI(_init_QBrush)() __attribute__((constructor));


XI_EXPORT XiQBrush* XI(qbrush_o6QBrusho6QColor)(XiQColor* c);
XI_EXPORT XiQBrush* XI(qtextureBrush_o6QBrusho7QPixmap)(XiQPixmap* p);
typedef QFont::Style FontStyle;


struct XiFontStyle_vtable;
struct XiFontStyle: public Xiobj
{
    XiFontStyle_vtable* vtable();
    XiFontStyle();
    FontStyle value;
    FontStyle* impl() {
        if (!initialized) 
            new (this) XiFontStyle();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiFontStyle* me = static_cast<XiFontStyle*>(mePtr);
        if (me->initialized)
            me->~XiFontStyle();
    }

};

XI_EXPORT XiFontStyle* XI(StyleNormal_o9FontStyle)();
XI_EXPORT XiFontStyle* XI(StyleItalic_o9FontStyle)();
XI_EXPORT XiFontStyle* XI(StyleOblique_o9FontStyle)();
inline XiFontStyle* toXi(const FontStyle& orig) {
    if (orig == QFont::StyleNormal)
        return XI(StyleNormal_o9FontStyle)();
    if (orig == QFont::StyleItalic)
        return XI(StyleItalic_o9FontStyle)();
    if (orig == QFont::StyleOblique)
        return XI(StyleOblique_o9FontStyle)();
    XiFontStyle* r = gcNew<XiFontStyle>();
    r->value = orig;
    return r;
}

inline FontStyle fromXi(XiFontStyle* wrapped) {
    return *wrapped->impl();
}

struct XiFontStyle_vtable: public Xivtable
{
    void* reserved;
};

inline XiFontStyle_vtable* XiFontStyle::vtable() {
    return static_cast<XiFontStyle_vtable*>(vptr);
}

extern XiFontStyle_vtable XI(_vt_FontStyle);
extern int XI(_size_FontStyle);
XI_EXPORT void XI(_init_FontStyle)() __attribute__((constructor));




struct XiQFont_vtable;
struct XiQFont: public Xiobj
{
    XiQFont_vtable* vtable();
    XiQFont();
    QFont value;
    QFont* impl() {
        if (!initialized) 
            new (this) XiQFont();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQFont* me = static_cast<XiQFont*>(mePtr);
        if (me->initialized)
            me->~XiQFont();
    }

    static bool bold(XiQFont* __thisPtr);
    static void setBold(XiQFont* __thisPtr, bool param0);
    static bool italic(XiQFont* __thisPtr);
    static void setItalic(XiQFont* __thisPtr, bool param0);
    static XiQString* family(XiQFont* __thisPtr);
    static void setFamily(XiQFont* __thisPtr, XiQString* param0);
    static bool fixedPitch(XiQFont* __thisPtr);
    static void setFixedPitch(XiQFont* __thisPtr, bool param0);
    static bool kerning(XiQFont* __thisPtr);
    static void setKerning(XiQFont* __thisPtr, bool param0);
    static int pixelSize(XiQFont* __thisPtr);
    static void setPixelSize(XiQFont* __thisPtr, int param0);
    static int pointSize(XiQFont* __thisPtr);
    static void setPointSize(XiQFont* __thisPtr, int param0);
    static bool overline(XiQFont* __thisPtr);
    static bool underline(XiQFont* __thisPtr);
    static bool strikeOut(XiQFont* __thisPtr);
    static void setOverline(XiQFont* __thisPtr, bool param0);
    static void setUnderline(XiQFont* __thisPtr, bool param0);
    static void setStrikeOut(XiQFont* __thisPtr, bool param0);
    static XiQString* toString(XiQFont* __thisPtr);
};

inline XiQFont* toXi(const QFont& orig) {
    XiQFont* r = gcNew<XiQFont>();
    r->value = orig;
    return r;
}

inline QFont fromXi(XiQFont* wrapped) {
    return *wrapped->impl();
}

struct XiQFont_vtable: public Xivtable
{
    void* reserved;
    bool (*bold)(XiQFont*);
    void (*setBold)(XiQFont*, bool);
    bool (*italic)(XiQFont*);
    void (*setItalic)(XiQFont*, bool);
    XiQString* (*family)(XiQFont*);
    void (*setFamily)(XiQFont*, XiQString*);
    bool (*fixedPitch)(XiQFont*);
    void (*setFixedPitch)(XiQFont*, bool);
    bool (*kerning)(XiQFont*);
    void (*setKerning)(XiQFont*, bool);
    int (*pixelSize)(XiQFont*);
    void (*setPixelSize)(XiQFont*, int);
    int (*pointSize)(XiQFont*);
    void (*setPointSize)(XiQFont*, int);
    bool (*overline)(XiQFont*);
    bool (*underline)(XiQFont*);
    bool (*strikeOut)(XiQFont*);
    void (*setOverline)(XiQFont*, bool);
    void (*setUnderline)(XiQFont*, bool);
    void (*setStrikeOut)(XiQFont*, bool);
    XiQString* (*toString)(XiQFont*);
};

inline XiQFont_vtable* XiQFont::vtable() {
    return static_cast<XiQFont_vtable*>(vptr);
}

extern XiQFont_vtable XI(_vt_QFont);
extern int XI(_size_QFont);
XI_EXPORT void XI(_init_QFont)() __attribute__((constructor));


XI_EXPORT XiQFont* XI(qfont_o5QFont)();


struct XiTextElideMode_vtable;
struct XiTextElideMode: public Xiobj
{
    XiTextElideMode_vtable* vtable();
    XiTextElideMode();
    TextElideMode value;
    TextElideMode* impl() {
        if (!initialized) 
            new (this) XiTextElideMode();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiTextElideMode* me = static_cast<XiTextElideMode*>(mePtr);
        if (me->initialized)
            me->~XiTextElideMode();
    }

};

XI_EXPORT XiTextElideMode* XI(ElideLeft_o13TextElideMode)();
XI_EXPORT XiTextElideMode* XI(ElideRight_o13TextElideMode)();
XI_EXPORT XiTextElideMode* XI(ElideMiddle_o13TextElideMode)();
XI_EXPORT XiTextElideMode* XI(ElideNone_o13TextElideMode)();
inline XiTextElideMode* toXi(const TextElideMode& orig) {
    if (orig == ElideLeft)
        return XI(ElideLeft_o13TextElideMode)();
    if (orig == ElideRight)
        return XI(ElideRight_o13TextElideMode)();
    if (orig == ElideMiddle)
        return XI(ElideMiddle_o13TextElideMode)();
    if (orig == ElideNone)
        return XI(ElideNone_o13TextElideMode)();
    XiTextElideMode* r = gcNew<XiTextElideMode>();
    r->value = orig;
    return r;
}

inline TextElideMode fromXi(XiTextElideMode* wrapped) {
    return *wrapped->impl();
}

struct XiTextElideMode_vtable: public Xivtable
{
    void* reserved;
};

inline XiTextElideMode_vtable* XiTextElideMode::vtable() {
    return static_cast<XiTextElideMode_vtable*>(vptr);
}

extern XiTextElideMode_vtable XI(_vt_TextElideMode);
extern int XI(_size_TextElideMode);
XI_EXPORT void XI(_init_TextElideMode)() __attribute__((constructor));




struct XiQFontMetrics_vtable;
struct XiQFontMetrics: public Xiobj
{
    XiQFontMetrics_vtable* vtable();
    XiQFontMetrics();
    QFontMetrics* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QFontMetrics wrappedType;
    QFontMetrics* handle;
    QFontMetrics* getImpl() {
        return handle;
    }

    void createImpl() {
        assert(false);
    }
    static int ascent(XiQFontMetrics* __thisPtr);
    static int descent(XiQFontMetrics* __thisPtr);
    static int height(XiQFontMetrics* __thisPtr);
    static int leading(XiQFontMetrics* __thisPtr);
    static int lineSpacing(XiQFontMetrics* __thisPtr);
    static int xHeight(XiQFontMetrics* __thisPtr);
    static int averageCharWidth(XiQFontMetrics* __thisPtr);
    static int maxWidth(XiQFontMetrics* __thisPtr);
    static bool inFont(XiQFontMetrics* __thisPtr, int ch);
    static int leftBearing(XiQFontMetrics* __thisPtr, int ch);
    static int minLeftBearing(XiQFontMetrics* __thisPtr);
    static int rightBearing(XiQFontMetrics* __thisPtr, int ch);
    static int minRightBearing(XiQFontMetrics* __thisPtr);
    static int lineWidth(XiQFontMetrics* __thisPtr);
    static int overlinePos(XiQFontMetrics* __thisPtr);
    static int strikeOutPos(XiQFontMetrics* __thisPtr);
    static int underlinePos(XiQFontMetrics* __thisPtr);
    static XiQRect* boundingRect(XiQFontMetrics* __thisPtr, XiQString* param0);
    static XiQRect* tightBoundingRect(XiQFontMetrics* __thisPtr, XiQString* param0);
    static int width(XiQFontMetrics* __thisPtr, XiQString* param0);
    static XiQString* elidedText(XiQFontMetrics* __thisPtr, XiQString* text, XiTextElideMode* mode, int w);
};

inline QFontMetrics* fromXi(XiQFontMetrics* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQFontMetrics_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    int (*ascent)(XiQFontMetrics*);
    int (*descent)(XiQFontMetrics*);
    int (*height)(XiQFontMetrics*);
    int (*leading)(XiQFontMetrics*);
    int (*lineSpacing)(XiQFontMetrics*);
    int (*xHeight)(XiQFontMetrics*);
    int (*averageCharWidth)(XiQFontMetrics*);
    int (*maxWidth)(XiQFontMetrics*);
    bool (*inFont)(XiQFontMetrics*, int);
    int (*leftBearing)(XiQFontMetrics*, int);
    int (*minLeftBearing)(XiQFontMetrics*);
    int (*rightBearing)(XiQFontMetrics*, int);
    int (*minRightBearing)(XiQFontMetrics*);
    int (*lineWidth)(XiQFontMetrics*);
    int (*overlinePos)(XiQFontMetrics*);
    int (*strikeOutPos)(XiQFontMetrics*);
    int (*underlinePos)(XiQFontMetrics*);
    XiQRect* (*boundingRect)(XiQFontMetrics*, XiQString*);
    XiQRect* (*tightBoundingRect)(XiQFontMetrics*, XiQString*);
    int (*width)(XiQFontMetrics*, XiQString*);
    XiQString* (*elidedText)(XiQFontMetrics*, XiQString*, XiTextElideMode*, int);
};

inline XiQFontMetrics_vtable* XiQFontMetrics::vtable() {
    return static_cast<XiQFontMetrics_vtable*>(vptr);
}

extern XiQFontMetrics_vtable XI(_vt_QFontMetrics);
extern int XI(_size_QFontMetrics);
XI_EXPORT void XI(_init_QFontMetrics)() __attribute__((constructor));


XI_EXPORT XiQFontMetrics* XI(qfontMetrics_o12QFontMetricso5QFont)(XiQFont* f);


struct XiQPainter_vtable;
struct XiQPainter: public Xiobj
{
    XiQPainter_vtable* vtable();
    XiQPainter();
    QPainter* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QPainter wrappedType;
    QPainter* handle;
    QPainter* getImpl() {
        return handle;
    }

    void createImpl() {
        handle = new QPainter();
    }
    static void begin(XiQPainter* __thisPtr, XiQPaintDevice* param0);
    static void end(XiQPainter* __thisPtr);
    static bool isActive(XiQPainter* __thisPtr);
    static void setHighQuality(XiQPainter* __thisPtr, bool on);
    static void save(XiQPainter* __thisPtr);
    static void restore(XiQPainter* __thisPtr);
    static XiQPoint* brushOrigin(XiQPainter* __thisPtr);
    static void setBrushOrigin(XiQPainter* __thisPtr, XiQPoint* param0);
    static XiQFont* font(XiQPainter* __thisPtr);
    static void setFont(XiQPainter* __thisPtr, XiQFont* f);
    static int opacity(XiQPainter* __thisPtr);
    static void setOpacity(XiQPainter* __thisPtr, int o);
    static XiQPen* pen(XiQPainter* __thisPtr);
    static void setPen(XiQPainter* __thisPtr, XiQPen* param0);
    static XiQBrush* brush(XiQPainter* __thisPtr);
    static void setBrush(XiQPainter* __thisPtr, XiQBrush* param0);
    static void drawArc(XiQPainter* __thisPtr, XiQRect* rect, int starAngle, int spanAngle);
    static void drawChord(XiQPainter* __thisPtr, XiQRect* rect, int starAngle, int spanAngle);
    static void drawEllipse(XiQPainter* __thisPtr, XiQRect* rect);
    static void drawPie(XiQPainter* __thisPtr, XiQRect* rect, int starAngle, int spanAngle);
    static void drawConvexPolygon(XiQPainter* __thisPtr, void* points);
    static void drawPolygon(XiQPainter* __thisPtr, void* points);
    static void drawRect(XiQPainter* __thisPtr, XiQRect* r);
    static void eraseRect(XiQPainter* __thisPtr, XiQRect* r);
    static void fillRect(XiQPainter* __thisPtr, XiQRect* r, XiQBrush* b);
    static void drawPixmap(XiQPainter* __thisPtr, XiQPoint* p, XiQPixmap* pm);
    static void drawPixmapPortion(XiQPainter* __thisPtr, XiQPoint* p, XiQPixmap* pm, XiQRect* portion);
    static void drawScaledPixmapPortion(XiQPainter* __thisPtr, XiQRect* d, XiQPixmap* pm, XiQRect* portion);
    static void drawTiledPixmap(XiQPainter* __thisPtr, XiQRect* d, XiQPixmap* p);
    static void drawTiledOffsetPixmap(XiQPainter* __thisPtr, XiQRect* d, XiQPixmap* p, XiQPoint* origin);
    static void drawPoint(XiQPainter* __thisPtr, XiQPoint* p);
    static void drawLine(XiQPainter* __thisPtr, XiQPoint* p1, XiQPoint* p2);
    static void drawText(XiQPainter* __thisPtr, XiQPoint* p, XiQString* text);
};

inline QPainter* fromXi(XiQPainter* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQPainter_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    void (*begin)(XiQPainter*, XiQPaintDevice*);
    void (*end)(XiQPainter*);
    bool (*isActive)(XiQPainter*);
    void (*setHighQuality)(XiQPainter*, bool);
    void (*save)(XiQPainter*);
    void (*restore)(XiQPainter*);
    XiQPoint* (*brushOrigin)(XiQPainter*);
    void (*setBrushOrigin)(XiQPainter*, XiQPoint*);
    XiQFont* (*font)(XiQPainter*);
    void (*setFont)(XiQPainter*, XiQFont*);
    int (*opacity)(XiQPainter*);
    void (*setOpacity)(XiQPainter*, int);
    XiQPen* (*pen)(XiQPainter*);
    void (*setPen)(XiQPainter*, XiQPen*);
    XiQBrush* (*brush)(XiQPainter*);
    void (*setBrush)(XiQPainter*, XiQBrush*);
    void (*drawArc)(XiQPainter*, XiQRect*, int, int);
    void (*drawChord)(XiQPainter*, XiQRect*, int, int);
    void (*drawEllipse)(XiQPainter*, XiQRect*);
    void (*drawPie)(XiQPainter*, XiQRect*, int, int);
    void (*drawConvexPolygon)(XiQPainter*, void*);
    void (*drawPolygon)(XiQPainter*, void*);
    void (*drawRect)(XiQPainter*, XiQRect*);
    void (*eraseRect)(XiQPainter*, XiQRect*);
    void (*fillRect)(XiQPainter*, XiQRect*, XiQBrush*);
    void (*drawPixmap)(XiQPainter*, XiQPoint*, XiQPixmap*);
    void (*drawPixmapPortion)(XiQPainter*, XiQPoint*, XiQPixmap*, XiQRect*);
    void (*drawScaledPixmapPortion)(XiQPainter*, XiQRect*, XiQPixmap*, XiQRect*);
    void (*drawTiledPixmap)(XiQPainter*, XiQRect*, XiQPixmap*);
    void (*drawTiledOffsetPixmap)(XiQPainter*, XiQRect*, XiQPixmap*, XiQPoint*);
    void (*drawPoint)(XiQPainter*, XiQPoint*);
    void (*drawLine)(XiQPainter*, XiQPoint*, XiQPoint*);
    void (*drawText)(XiQPainter*, XiQPoint*, XiQString*);
};

inline XiQPainter_vtable* XiQPainter::vtable() {
    return static_cast<XiQPainter_vtable*>(vptr);
}

extern XiQPainter_vtable XI(_vt_QPainter);
extern int XI(_size_QPainter);
XI_EXPORT void XI(_init_QPainter)() __attribute__((constructor));


XI_EXPORT XiQPainter* XI(qpainter_o8QPaintero12QPaintDevice)(XiQPaintDevice* target);


struct XiQLayout_vtable;
struct XiQLayout: public Xiobj
{
    XiQLayout_vtable* vtable();
    XiQLayout();
    QLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QLayout wrappedType;
    XiQObjectHolder<QLayout> handle;
    QLayout* getImpl() {
        return handle.get();
    }

    void createImpl() {
        assert(false);
    }

    void setObject(QLayout* l) {
        handle.setObject(l, this);
    }
    static void removeWidget(XiQLayout* __thisPtr, XiQWidget* iw);
};

inline QLayout* fromXi(XiQLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQLayout_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    void (*removeWidget)(XiQLayout*, XiQWidget*);
};

inline XiQLayout_vtable* XiQLayout::vtable() {
    return static_cast<XiQLayout_vtable*>(vptr);
}

extern XiQLayout_vtable XI(_vt_QLayout);
extern int XI(_size_QLayout);
XI_EXPORT void XI(_init_QLayout)() __attribute__((constructor));


typedef QBoxLayout::Direction BoxLayoutDirection;


struct XiBoxLayoutDirection_vtable;
struct XiBoxLayoutDirection: public Xiobj
{
    XiBoxLayoutDirection_vtable* vtable();
    XiBoxLayoutDirection();
    BoxLayoutDirection value;
    BoxLayoutDirection* impl() {
        if (!initialized) 
            new (this) XiBoxLayoutDirection();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiBoxLayoutDirection* me = static_cast<XiBoxLayoutDirection*>(mePtr);
        if (me->initialized)
            me->~XiBoxLayoutDirection();
    }

};

XI_EXPORT XiBoxLayoutDirection* XI(LeftToRight_o18BoxLayoutDirection)();
XI_EXPORT XiBoxLayoutDirection* XI(RightToLeft_o18BoxLayoutDirection)();
XI_EXPORT XiBoxLayoutDirection* XI(TopToBottom_o18BoxLayoutDirection)();
XI_EXPORT XiBoxLayoutDirection* XI(BottomToTop_o18BoxLayoutDirection)();
inline XiBoxLayoutDirection* toXi(const BoxLayoutDirection& orig) {
    if (orig == QBoxLayout::LeftToRight)
        return XI(LeftToRight_o18BoxLayoutDirection)();
    if (orig == QBoxLayout::RightToLeft)
        return XI(RightToLeft_o18BoxLayoutDirection)();
    if (orig == QBoxLayout::TopToBottom)
        return XI(TopToBottom_o18BoxLayoutDirection)();
    if (orig == QBoxLayout::BottomToTop)
        return XI(BottomToTop_o18BoxLayoutDirection)();
    XiBoxLayoutDirection* r = gcNew<XiBoxLayoutDirection>();
    r->value = orig;
    return r;
}

inline BoxLayoutDirection fromXi(XiBoxLayoutDirection* wrapped) {
    return *wrapped->impl();
}

struct XiBoxLayoutDirection_vtable: public Xivtable
{
    void* reserved;
};

inline XiBoxLayoutDirection_vtable* XiBoxLayoutDirection::vtable() {
    return static_cast<XiBoxLayoutDirection_vtable*>(vptr);
}

extern XiBoxLayoutDirection_vtable XI(_vt_BoxLayoutDirection);
extern int XI(_size_BoxLayoutDirection);
XI_EXPORT void XI(_init_BoxLayoutDirection)() __attribute__((constructor));




struct XiQBoxLayout_vtable;
struct XiQBoxLayout: public XiQLayout
{
    XiQBoxLayout_vtable* vtable();
    XiQBoxLayout();
    QBoxLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QBoxLayout wrappedType;
    QBoxLayout* getImpl() {
        return static_cast<QBoxLayout*>(XiQLayout::getImpl());
    }

    void createImpl() {
        setObject(new QBoxLayout(QBoxLayout::TopToBottom));
    }
    static XiBoxLayoutDirection* direction(XiQBoxLayout* __thisPtr);
    static void setDirection(XiQBoxLayout* __thisPtr, XiBoxLayoutDirection* d);
    static void addLayout(XiQBoxLayout* __thisPtr, XiQLayout* child);
    static void addStretch(XiQBoxLayout* __thisPtr);
    static void addWidget(XiQBoxLayout* __thisPtr, XiQWidget* w);
    static void insertLayout(XiQBoxLayout* __thisPtr, int idx, XiQLayout* l);
    static void insertStretch(XiQBoxLayout* __thisPtr, int idx);
    static void insertWidget(XiQBoxLayout* __thisPtr, int idx, XiQWidget* w);
    static void addSpacing(XiQBoxLayout* __thisPtr, int param0);
    static int lastIdx(XiQBoxLayout* __thisPtr);
    static void setStretch(XiQBoxLayout* __thisPtr, int idx, int stretch);
};

inline QBoxLayout* fromXi(XiQBoxLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQBoxLayout_vtable: public XiQLayout_vtable
{
    void* reserved;
    XiBoxLayoutDirection* (*direction)(XiQBoxLayout*);
    void (*setDirection)(XiQBoxLayout*, XiBoxLayoutDirection*);
    void (*addLayout)(XiQBoxLayout*, XiQLayout*);
    void (*addStretch)(XiQBoxLayout*);
    void (*addWidget)(XiQBoxLayout*, XiQWidget*);
    void (*insertLayout)(XiQBoxLayout*, int, XiQLayout*);
    void (*insertStretch)(XiQBoxLayout*, int);
    void (*insertWidget)(XiQBoxLayout*, int, XiQWidget*);
    void (*addSpacing)(XiQBoxLayout*, int);
    int (*lastIdx)(XiQBoxLayout*);
    void (*setStretch)(XiQBoxLayout*, int, int);
};

inline XiQBoxLayout_vtable* XiQBoxLayout::vtable() {
    return static_cast<XiQBoxLayout_vtable*>(vptr);
}

extern XiQBoxLayout_vtable XI(_vt_QBoxLayout);
extern int XI(_size_QBoxLayout);
XI_EXPORT void XI(_init_QBoxLayout)() __attribute__((constructor));




struct XiQHBoxLayout_vtable;
struct XiQHBoxLayout: public XiQBoxLayout
{
    XiQHBoxLayout_vtable* vtable();
    XiQHBoxLayout();
    QHBoxLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QHBoxLayout wrappedType;
    void createImpl() {
        setObject(new QHBoxLayout());
    }

    QHBoxLayout* getImpl() {
        return static_cast<QHBoxLayout*>(XiQBoxLayout::getImpl());
    }
};

inline QHBoxLayout* fromXi(XiQHBoxLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQHBoxLayout_vtable: public XiQBoxLayout_vtable
{
    void* reserved;
};

inline XiQHBoxLayout_vtable* XiQHBoxLayout::vtable() {
    return static_cast<XiQHBoxLayout_vtable*>(vptr);
}

extern XiQHBoxLayout_vtable XI(_vt_QHBoxLayout);
extern int XI(_size_QHBoxLayout);
XI_EXPORT void XI(_init_QHBoxLayout)() __attribute__((constructor));


XI_EXPORT XiQHBoxLayout* XI(qhboxLayout_o11QHBoxLayout)();


struct XiQVBoxLayout_vtable;
struct XiQVBoxLayout: public XiQBoxLayout
{
    XiQVBoxLayout_vtable* vtable();
    XiQVBoxLayout();
    QVBoxLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QVBoxLayout wrappedType;
    void createImpl() {
        setObject(new QVBoxLayout());
    }

    QVBoxLayout* getImpl() {
        return static_cast<QVBoxLayout*>(XiQBoxLayout::getImpl());
    }
};

inline QVBoxLayout* fromXi(XiQVBoxLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQVBoxLayout_vtable: public XiQBoxLayout_vtable
{
    void* reserved;
};

inline XiQVBoxLayout_vtable* XiQVBoxLayout::vtable() {
    return static_cast<XiQVBoxLayout_vtable*>(vptr);
}

extern XiQVBoxLayout_vtable XI(_vt_QVBoxLayout);
extern int XI(_size_QVBoxLayout);
XI_EXPORT void XI(_init_QVBoxLayout)() __attribute__((constructor));


XI_EXPORT XiQVBoxLayout* XI(qvboxLayout_o11QVBoxLayout)();


struct XiQGridLayout_vtable;
struct XiQGridLayout: public XiQLayout
{
    XiQGridLayout_vtable* vtable();
    XiQGridLayout();
    QGridLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QGridLayout wrappedType;
    QGridLayout* getImpl() {
        return static_cast<QGridLayout*>(XiQLayout::getImpl());
    }

    void createImpl() {
        setObject(new QGridLayout());
    }
    static void addLayout(XiQGridLayout* __thisPtr, XiQLayout* l, int row, int col);
    static void addWidget(XiQGridLayout* __thisPtr, XiQWidget* w, int row, int col);
    static XiQRect* cellRect(XiQGridLayout* __thisPtr, int row, int col);
    static int columnCount(XiQGridLayout* __thisPtr);
    static int columnMinimumWidth(XiQGridLayout* __thisPtr, int col);
    static void setColumnMinimumWidth(XiQGridLayout* __thisPtr, int col, int m);
    static int columnStretch(XiQGridLayout* __thisPtr, int col);
    static void setColumnStretch(XiQGridLayout* __thisPtr, int col, int s);
    static int rowCount(XiQGridLayout* __thisPtr);
    static int rowMinimumHeight(XiQGridLayout* __thisPtr, int row);
    static void setRowMinimumHeight(XiQGridLayout* __thisPtr, int row, int m);
    static int rowStretch(XiQGridLayout* __thisPtr, int row);
    static void setRowStretch(XiQGridLayout* __thisPtr, int row, int s);
    static int horizontalSpacing(XiQGridLayout* __thisPtr);
    static void setHorizontalSpacing(XiQGridLayout* __thisPtr, int s);
    static int spacing(XiQGridLayout* __thisPtr);
    static void setSpacing(XiQGridLayout* __thisPtr, int s);
    static void setVerticalSpacing(XiQGridLayout* __thisPtr, int s);
    static int verticalSpacing(XiQGridLayout* __thisPtr);
};

inline QGridLayout* fromXi(XiQGridLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQGridLayout_vtable: public XiQLayout_vtable
{
    void* reserved;
    void (*addLayout)(XiQGridLayout*, XiQLayout*, int, int);
    void (*addWidget)(XiQGridLayout*, XiQWidget*, int, int);
    XiQRect* (*cellRect)(XiQGridLayout*, int, int);
    int (*columnCount)(XiQGridLayout*);
    int (*columnMinimumWidth)(XiQGridLayout*, int);
    void (*setColumnMinimumWidth)(XiQGridLayout*, int, int);
    int (*columnStretch)(XiQGridLayout*, int);
    void (*setColumnStretch)(XiQGridLayout*, int, int);
    int (*rowCount)(XiQGridLayout*);
    int (*rowMinimumHeight)(XiQGridLayout*, int);
    void (*setRowMinimumHeight)(XiQGridLayout*, int, int);
    int (*rowStretch)(XiQGridLayout*, int);
    void (*setRowStretch)(XiQGridLayout*, int, int);
    int (*horizontalSpacing)(XiQGridLayout*);
    void (*setHorizontalSpacing)(XiQGridLayout*, int);
    int (*spacing)(XiQGridLayout*);
    void (*setSpacing)(XiQGridLayout*, int);
    void (*setVerticalSpacing)(XiQGridLayout*, int);
    int (*verticalSpacing)(XiQGridLayout*);
};

inline XiQGridLayout_vtable* XiQGridLayout::vtable() {
    return static_cast<XiQGridLayout_vtable*>(vptr);
}

extern XiQGridLayout_vtable XI(_vt_QGridLayout);
extern int XI(_size_QGridLayout);
XI_EXPORT void XI(_init_QGridLayout)() __attribute__((constructor));


XI_EXPORT XiQGridLayout* XI(qgridLayout_o11QGridLayout)();


struct XiQStackedLayout_vtable;
struct XiQStackedLayout: public XiQLayout
{
    XiQStackedLayout_vtable* vtable();
    XiQStackedLayout();
    QStackedLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QStackedLayout wrappedType;
    QStackedLayout* getImpl() {
        return static_cast<QStackedLayout*>(XiQLayout::getImpl());
    }

    void createImpl() {
        setObject(new QStackedLayout());
    }
    static int addWidget(XiQStackedLayout* __thisPtr, XiQWidget* w);
    static int insertWidget(XiQStackedLayout* __thisPtr, int idx, XiQWidget* w);
    static int currentIndex(XiQStackedLayout* __thisPtr);
    static void setCurrentIndex(XiQStackedLayout* __thisPtr, int param0);
    static void setCurrentWidget(XiQStackedLayout* __thisPtr, XiQWidget* w);
    static XiQWidget* currentWidget(XiQStackedLayout* __thisPtr);
};

inline QStackedLayout* fromXi(XiQStackedLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQStackedLayout_vtable: public XiQLayout_vtable
{
    void* reserved;
    int (*addWidget)(XiQStackedLayout*, XiQWidget*);
    int (*insertWidget)(XiQStackedLayout*, int, XiQWidget*);
    int (*currentIndex)(XiQStackedLayout*);
    void (*setCurrentIndex)(XiQStackedLayout*, int);
    void (*setCurrentWidget)(XiQStackedLayout*, XiQWidget*);
    XiQWidget* (*currentWidget)(XiQStackedLayout*);
};

inline XiQStackedLayout_vtable* XiQStackedLayout::vtable() {
    return static_cast<XiQStackedLayout_vtable*>(vptr);
}

extern XiQStackedLayout_vtable XI(_vt_QStackedLayout);
extern int XI(_size_QStackedLayout);
XI_EXPORT void XI(_init_QStackedLayout)() __attribute__((constructor));


XI_EXPORT XiQStackedLayout* XI(qstackedLayout_o14QStackedLayout)();


struct XiQTimer_vtable;
struct XiQTimer: public Xiobj
{
    XiQTimer_vtable* vtable();
    XiQTimer();
    QTimer* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QTimer wrappedType;
    XiQObjectHolder<QTimer> handle;
    xiqEventListenerList<XiTimerListener> timerListeners;
    XiQTimerSigs* sig;

    QTimer* getImpl() {
        return handle.get();
    }

    void createImpl() {
        setObject(new QTimer);
    }

    void setObject(QTimer* w) {
        handle.setObject(w, this);
        sig = new XiQTimerSigs(this, w);
    }

    ~XiQTimer() {
        delete sig;
    }
    static int interval(XiQTimer* __thisPtr);
    static bool isActive(XiQTimer* __thisPtr);
    static bool isSingleShot(XiQTimer* __thisPtr);
    static void setInterval(XiQTimer* __thisPtr, int param0);
    static void setSingleShot(XiQTimer* __thisPtr, bool param0);
    static void start(XiQTimer* __thisPtr);
    static void stop(XiQTimer* __thisPtr);
    static void timeout(XiQTimer* __thisPtr);
    static void addTimerListener(XiQTimer* __thisPtr, XiTimerListener* tl);
};

inline QTimer* fromXi(XiQTimer* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQTimer_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    int (*interval)(XiQTimer*);
    bool (*isActive)(XiQTimer*);
    bool (*isSingleShot)(XiQTimer*);
    void (*setInterval)(XiQTimer*, int);
    void (*setSingleShot)(XiQTimer*, bool);
    void (*start)(XiQTimer*);
    void (*stop)(XiQTimer*);
    void (*timeout)(XiQTimer*);
    void (*addTimerListener)(XiQTimer*, XiTimerListener*);
};

inline XiQTimer_vtable* XiQTimer::vtable() {
    return static_cast<XiQTimer_vtable*>(vptr);
}

extern XiQTimer_vtable XI(_vt_QTimer);
extern int XI(_size_QTimer);
XI_EXPORT void XI(_init_QTimer)() __attribute__((constructor));


XI_EXPORT XiQTimer* XI(qtimer_o6QTimer)();


struct XiTimerListener_vtable;
struct XiTimerListener: public Xiobj
{
    XiTimerListener_vtable* vtable();
    XiTimerListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiTimerListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiTimerListener* me = static_cast<XiTimerListener*>(mePtr);
        if (me->initialized)
            me->~XiTimerListener();
    }

    static void timeout(XiTimerListener* __thisPtr, XiQTimer* timer);
};

struct XiTimerListener_vtable: public Xivtable
{
    void* reserved;
    void (*timeout)(XiTimerListener*, XiQTimer*);
};

inline XiTimerListener_vtable* XiTimerListener::vtable() {
    return static_cast<XiTimerListener_vtable*>(vptr);
}

extern XiTimerListener_vtable XI(_vt_TimerListener);
extern int XI(_size_TimerListener);
XI_EXPORT void XI(_init_TimerListener)() __attribute__((constructor));




struct XiQAction_vtable;
struct XiQAction: public Xiobj
{
    XiQAction_vtable* vtable();
    XiQAction();
    QAction* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QAction wrappedType;
    XiQObjectHolder<QAction> handle;
    xiqEventListenerList<XiActionListener> actionListeners;
    XiQActionSigs* sig;

    QAction* getImpl() {
        return handle.get();
    }

    void createImpl() {
        setObject(new QAction(0));
    }

    void setObject(QAction* action) {
        handle.setObject(action, this);
        sig = new XiQActionSigs(this, action);
    }

    ~XiQAction() {
        delete sig;
    }
    static bool isCheckable(XiQAction* __thisPtr);
    static void setCheckable(XiQAction* __thisPtr, bool param0);
    static bool isChecked(XiQAction* __thisPtr);
    static void setChecked(XiQAction* __thisPtr, bool param0);
    static bool isEnabled(XiQAction* __thisPtr);
    static void setEnabled(XiQAction* __thisPtr, bool param0);
    static XiQFont* font(XiQAction* __thisPtr);
    static void setFont(XiQAction* __thisPtr, XiQFont* param0);
    static XiQIcon* icon(XiQAction* __thisPtr);
    static void setIcon(XiQAction* __thisPtr, XiQIcon* param0);
    static XiQString* text(XiQAction* __thisPtr);
    static void setText(XiQAction* __thisPtr, XiQString* param0);
    static XiQString* toolTip(XiQAction* __thisPtr);
    static void setToolTip(XiQAction* __thisPtr, XiQString* param0);
    static XiQMenu* menu(XiQAction* __thisPtr);
    static void setMenu(XiQAction* __thisPtr, XiQMenu* param0);
    static void triggered(XiQAction* __thisPtr);
    static void addActionListener(XiQAction* __thisPtr, XiActionListener* l);
};

inline QAction* fromXi(XiQAction* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQAction_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    bool (*isCheckable)(XiQAction*);
    void (*setCheckable)(XiQAction*, bool);
    bool (*isChecked)(XiQAction*);
    void (*setChecked)(XiQAction*, bool);
    bool (*isEnabled)(XiQAction*);
    void (*setEnabled)(XiQAction*, bool);
    XiQFont* (*font)(XiQAction*);
    void (*setFont)(XiQAction*, XiQFont*);
    XiQIcon* (*icon)(XiQAction*);
    void (*setIcon)(XiQAction*, XiQIcon*);
    XiQString* (*text)(XiQAction*);
    void (*setText)(XiQAction*, XiQString*);
    XiQString* (*toolTip)(XiQAction*);
    void (*setToolTip)(XiQAction*, XiQString*);
    XiQMenu* (*menu)(XiQAction*);
    void (*setMenu)(XiQAction*, XiQMenu*);
    void (*triggered)(XiQAction*);
    void (*addActionListener)(XiQAction*, XiActionListener*);
};

inline XiQAction_vtable* XiQAction::vtable() {
    return static_cast<XiQAction_vtable*>(vptr);
}

extern XiQAction_vtable XI(_vt_QAction);
extern int XI(_size_QAction);
XI_EXPORT void XI(_init_QAction)() __attribute__((constructor));


XI_EXPORT XiQAction* XI(qaction_o7QActiono7QString)(XiQString* text);


struct XiActionListener_vtable;
struct XiActionListener: public Xiobj
{
    XiActionListener_vtable* vtable();
    XiActionListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiActionListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiActionListener* me = static_cast<XiActionListener*>(mePtr);
        if (me->initialized)
            me->~XiActionListener();
    }

    static void triggered(XiActionListener* __thisPtr, XiQAction* a);
};

struct XiActionListener_vtable: public Xivtable
{
    void* reserved;
    void (*triggered)(XiActionListener*, XiQAction*);
};

inline XiActionListener_vtable* XiActionListener::vtable() {
    return static_cast<XiActionListener_vtable*>(vptr);
}

extern XiActionListener_vtable XI(_vt_ActionListener);
extern int XI(_size_ActionListener);
XI_EXPORT void XI(_init_ActionListener)() __attribute__((constructor));




struct XiQIcon_vtable;
struct XiQIcon: public Xiobj
{
    XiQIcon_vtable* vtable();
    XiQIcon();
    QIcon value;
    QIcon* impl() {
        if (!initialized) 
            new (this) XiQIcon();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQIcon* me = static_cast<XiQIcon*>(mePtr);
        if (me->initialized)
            me->~XiQIcon();
    }

};

inline XiQIcon* toXi(const QIcon& orig) {
    XiQIcon* r = gcNew<XiQIcon>();
    r->value = orig;
    return r;
}

inline QIcon fromXi(XiQIcon* wrapped) {
    return *wrapped->impl();
}

struct XiQIcon_vtable: public Xivtable
{
    void* reserved;
};

inline XiQIcon_vtable* XiQIcon::vtable() {
    return static_cast<XiQIcon_vtable*>(vptr);
}

extern XiQIcon_vtable XI(_vt_QIcon);
extern int XI(_size_QIcon);
XI_EXPORT void XI(_init_QIcon)() __attribute__((constructor));


XI_EXPORT XiQIcon* XI(qicon_o5QIcono7QString)(XiQString* fname);
XI_EXPORT XiQIcon* XI(qiconFromPixmap_o5QIcono7QPixmap)(XiQPixmap* pmap);
XI_EXPORT XiQIcon* XI(qiconNull_o5QIcon)();
XI_EXPORT XiQIcon* XI(qiconStandard_o5QIcono12StandardIcon)(XiStandardIcon* id);


struct XiFocusPolicy_vtable;
struct XiFocusPolicy: public Xiobj
{
    XiFocusPolicy_vtable* vtable();
    XiFocusPolicy();
    FocusPolicy value;
    FocusPolicy* impl() {
        if (!initialized) 
            new (this) XiFocusPolicy();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiFocusPolicy* me = static_cast<XiFocusPolicy*>(mePtr);
        if (me->initialized)
            me->~XiFocusPolicy();
    }

};

XI_EXPORT XiFocusPolicy* XI(TabFocus_o11FocusPolicy)();
XI_EXPORT XiFocusPolicy* XI(ClickFocus_o11FocusPolicy)();
XI_EXPORT XiFocusPolicy* XI(StrongFocus_o11FocusPolicy)();
XI_EXPORT XiFocusPolicy* XI(WheelFocus_o11FocusPolicy)();
XI_EXPORT XiFocusPolicy* XI(NoFocus_o11FocusPolicy)();
inline XiFocusPolicy* toXi(const FocusPolicy& orig) {
    if (orig == TabFocus)
        return XI(TabFocus_o11FocusPolicy)();
    if (orig == ClickFocus)
        return XI(ClickFocus_o11FocusPolicy)();
    if (orig == StrongFocus)
        return XI(StrongFocus_o11FocusPolicy)();
    if (orig == WheelFocus)
        return XI(WheelFocus_o11FocusPolicy)();
    if (orig == NoFocus)
        return XI(NoFocus_o11FocusPolicy)();
    XiFocusPolicy* r = gcNew<XiFocusPolicy>();
    r->value = orig;
    return r;
}

inline FocusPolicy fromXi(XiFocusPolicy* wrapped) {
    return *wrapped->impl();
}

struct XiFocusPolicy_vtable: public Xivtable
{
    void* reserved;
};

inline XiFocusPolicy_vtable* XiFocusPolicy::vtable() {
    return static_cast<XiFocusPolicy_vtable*>(vptr);
}

extern XiFocusPolicy_vtable XI(_vt_FocusPolicy);
extern int XI(_size_FocusPolicy);
XI_EXPORT void XI(_init_FocusPolicy)() __attribute__((constructor));




struct XiQWidget_vtable;
struct XiQWidget: public XiQPaintDevice
{
    XiQWidget_vtable* vtable();
    XiQWidget();
    QWidget* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QWidget wrappedType;
    XiQObjectHolder<QWidget> handle;
    QWidget* getImpl() {
        return handle.get();
    }

    void createImpl() {
        setObject(new Proxy<QWidget>());
    }

    void setObject(QWidget* w) {
        handle.setObject(w, this);
    }

    // Call this when the parameter ought to be a logical
    // kid of this object in some sense, and hence shouldn't
    // be GC'd independently. If it's a QObject kid, it'll use
    // the kids' qobjectholder to pin it. If not, it will use
    // an intermediary.
    void protectObject(XiQWidget* kid);
    void protectObject(XiQAction* Kid);
    static XiQWidget* toWidget(XiQPaintDevice* __thisPtr);
    static void show(XiQWidget* __thisPtr);
    static void hide(XiQWidget* __thisPtr);
    static void raise(XiQWidget* __thisPtr);
    static void lower(XiQWidget* __thisPtr);
    static void close(XiQWidget* __thisPtr);
    static bool isEnabled(XiQWidget* __thisPtr);
    static void setEnabled(XiQWidget* __thisPtr, bool param0);
    static void setLayout(XiQWidget* __thisPtr, XiQLayout* layout);
    static bool isWindowModified(XiQWidget* __thisPtr);
    static void setWindowModified(XiQWidget* __thisPtr, bool param0);
    static XiQString* windowTitle(XiQWidget* __thisPtr);
    static void setWindowTitle(XiQWidget* __thisPtr, XiQString* param0);
    static XiQIcon* windowIcon(XiQWidget* __thisPtr);
    static void setWindowIcon(XiQWidget* __thisPtr, XiQIcon* param0);
    static bool isActiveWindow(XiQWidget* __thisPtr);
    static void activateWindow(XiQWidget* __thisPtr);
    static bool isMinimized(XiQWidget* __thisPtr);
    static bool isMaximized(XiQWidget* __thisPtr);
    static bool isFullScreen(XiQWidget* __thisPtr);
    static void showMinimized(XiQWidget* __thisPtr);
    static void showMaximized(XiQWidget* __thisPtr);
    static void showFullScreen(XiQWidget* __thisPtr);
    static void showNormal(XiQWidget* __thisPtr);
    static void update(XiQWidget* __thisPtr, XiQRect* r);
    static void repaint(XiQWidget* __thisPtr, XiQRect* r);
    static void setMinimumSize(XiQWidget* __thisPtr, XiQSize* param0);
    static XiQSize* minimumSize(XiQWidget* __thisPtr);
    static void setMaximumSize(XiQWidget* __thisPtr, XiQSize* param0);
    static XiQSize* maximumSize(XiQWidget* __thisPtr);
    static void setFixedSize(XiQWidget* __thisPtr, XiQSize* param0);
    static void resize(XiQWidget* __thisPtr, XiQSize* s);
    static void adjustSize(XiQWidget* __thisPtr);
    static XiQPoint* pos(XiQWidget* __thisPtr);
    static void move(XiQWidget* __thisPtr, XiQPoint* p);
    static XiQSize* sizeHint(XiQWidget* __thisPtr);
    static XiQSize* minimumSizeHint(XiQWidget* __thisPtr);
    static XiQPoint* mapFrom(XiQWidget* __thisPtr, XiQWidget* w, XiQPoint* param1);
    static XiQPoint* mapFromGlobal(XiQWidget* __thisPtr, XiQPoint* param0);
    static XiQPoint* mapFromParent(XiQWidget* __thisPtr, XiQPoint* param0);
    static XiQPoint* mapTo(XiQWidget* __thisPtr, XiQWidget* w, XiQPoint* param1);
    static XiQPoint* mapToGlobal(XiQWidget* __thisPtr, XiQPoint* param0);
    static XiQPoint* mapToParent(XiQWidget* __thisPtr, XiQPoint* param0);
    static void setFont(XiQWidget* __thisPtr, XiQFont* f);
    static XiQFont* font(XiQWidget* __thisPtr);
    static XiQString* styleSheet(XiQWidget* __thisPtr);
    static void setStyleSheet(XiQWidget* __thisPtr, XiQString* param0);
    static XiFocusPolicy* focusPolicy(XiQWidget* __thisPtr);
    static void setFocusPolicy(XiQWidget* __thisPtr, XiFocusPolicy* param0);
    static void setFocus(XiQWidget* __thisPtr);
    static void clearFocus(XiQWidget* __thisPtr);
    static bool hasFocus(XiQWidget* __thisPtr);
    static XiQString* toolTip(XiQWidget* __thisPtr);
    static void setToolTip(XiQWidget* __thisPtr, XiQString* param0);
    static XiQString* whatsThis(XiQWidget* __thisPtr);
    static void setWhatsThis(XiQWidget* __thisPtr, XiQString* param0);
    static bool hasMouseTracking(XiQWidget* __thisPtr);
    static void setMouseTracking(XiQWidget* __thisPtr, bool param0);
    static void addAction(XiQWidget* __thisPtr, XiQAction* action);
    static void paintEvent(XiQWidget* __thisPtr, XiQPaintEvent* pe);
    static void mousePressEvent(XiQWidget* __thisPtr, XiQMouseEvent* e);
    static void mouseReleaseEvent(XiQWidget* __thisPtr, XiQMouseEvent* e);
    static void mouseDoubleClickEvent(XiQWidget* __thisPtr, XiQMouseEvent* e);
    static void mouseMoveEvent(XiQWidget* __thisPtr, XiQMouseEvent* e);
    static void wheelEvent(XiQWidget* __thisPtr, XiQWheelEvent* e);
    static void keyPressEvent(XiQWidget* __thisPtr, XiQKeyEvent* e);
    static void keyReleaseEvent(XiQWidget* __thisPtr, XiQKeyEvent* e);
    static void enterEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void leaveEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void resizeEvent(XiQWidget* __thisPtr, XiQResizeEvent* e);
    static void closeEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void contextMenuEvent(XiQWidget* __thisPtr, XiQContextMenuEvent* e);
    static void showEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void hideEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* pe);
};

inline QWidget* fromXi(XiQWidget* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQWidget_vtable: public XiQPaintDevice_vtable
{
    void* reserved;
    void (*show)(XiQWidget*);
    void (*hide)(XiQWidget*);
    void (*raise)(XiQWidget*);
    void (*lower)(XiQWidget*);
    void (*close)(XiQWidget*);
    bool (*isEnabled)(XiQWidget*);
    void (*setEnabled)(XiQWidget*, bool);
    void (*setLayout)(XiQWidget*, XiQLayout*);
    bool (*isWindowModified)(XiQWidget*);
    void (*setWindowModified)(XiQWidget*, bool);
    XiQString* (*windowTitle)(XiQWidget*);
    void (*setWindowTitle)(XiQWidget*, XiQString*);
    XiQIcon* (*windowIcon)(XiQWidget*);
    void (*setWindowIcon)(XiQWidget*, XiQIcon*);
    bool (*isActiveWindow)(XiQWidget*);
    void (*activateWindow)(XiQWidget*);
    bool (*isMinimized)(XiQWidget*);
    bool (*isMaximized)(XiQWidget*);
    bool (*isFullScreen)(XiQWidget*);
    void (*showMinimized)(XiQWidget*);
    void (*showMaximized)(XiQWidget*);
    void (*showFullScreen)(XiQWidget*);
    void (*showNormal)(XiQWidget*);
    void (*update)(XiQWidget*, XiQRect*);
    void (*repaint)(XiQWidget*, XiQRect*);
    void (*setMinimumSize)(XiQWidget*, XiQSize*);
    XiQSize* (*minimumSize)(XiQWidget*);
    void (*setMaximumSize)(XiQWidget*, XiQSize*);
    XiQSize* (*maximumSize)(XiQWidget*);
    void (*setFixedSize)(XiQWidget*, XiQSize*);
    void (*resize)(XiQWidget*, XiQSize*);
    void (*adjustSize)(XiQWidget*);
    XiQPoint* (*pos)(XiQWidget*);
    void (*move)(XiQWidget*, XiQPoint*);
    XiQSize* (*sizeHint)(XiQWidget*);
    XiQSize* (*minimumSizeHint)(XiQWidget*);
    XiQPoint* (*mapFrom)(XiQWidget*, XiQWidget*, XiQPoint*);
    XiQPoint* (*mapFromGlobal)(XiQWidget*, XiQPoint*);
    XiQPoint* (*mapFromParent)(XiQWidget*, XiQPoint*);
    XiQPoint* (*mapTo)(XiQWidget*, XiQWidget*, XiQPoint*);
    XiQPoint* (*mapToGlobal)(XiQWidget*, XiQPoint*);
    XiQPoint* (*mapToParent)(XiQWidget*, XiQPoint*);
    void (*setFont)(XiQWidget*, XiQFont*);
    XiQFont* (*font)(XiQWidget*);
    XiQString* (*styleSheet)(XiQWidget*);
    void (*setStyleSheet)(XiQWidget*, XiQString*);
    XiFocusPolicy* (*focusPolicy)(XiQWidget*);
    void (*setFocusPolicy)(XiQWidget*, XiFocusPolicy*);
    void (*setFocus)(XiQWidget*);
    void (*clearFocus)(XiQWidget*);
    bool (*hasFocus)(XiQWidget*);
    XiQString* (*toolTip)(XiQWidget*);
    void (*setToolTip)(XiQWidget*, XiQString*);
    XiQString* (*whatsThis)(XiQWidget*);
    void (*setWhatsThis)(XiQWidget*, XiQString*);
    bool (*hasMouseTracking)(XiQWidget*);
    void (*setMouseTracking)(XiQWidget*, bool);
    void (*addAction)(XiQWidget*, XiQAction*);
    void (*paintEvent)(XiQWidget*, XiQPaintEvent*);
    void (*mousePressEvent)(XiQWidget*, XiQMouseEvent*);
    void (*mouseReleaseEvent)(XiQWidget*, XiQMouseEvent*);
    void (*mouseDoubleClickEvent)(XiQWidget*, XiQMouseEvent*);
    void (*mouseMoveEvent)(XiQWidget*, XiQMouseEvent*);
    void (*wheelEvent)(XiQWidget*, XiQWheelEvent*);
    void (*keyPressEvent)(XiQWidget*, XiQKeyEvent*);
    void (*keyReleaseEvent)(XiQWidget*, XiQKeyEvent*);
    void (*enterEvent)(XiQWidget*, XiQEvent*);
    void (*leaveEvent)(XiQWidget*, XiQEvent*);
    void (*resizeEvent)(XiQWidget*, XiQResizeEvent*);
    void (*closeEvent)(XiQWidget*, XiQEvent*);
    void (*contextMenuEvent)(XiQWidget*, XiQContextMenuEvent*);
    void (*showEvent)(XiQWidget*, XiQEvent*);
    void (*hideEvent)(XiQWidget*, XiQEvent*);
    void (*defaultEvent)(XiQWidget*, XiQEvent*);
};

inline XiQWidget_vtable* XiQWidget::vtable() {
    return static_cast<XiQWidget_vtable*>(vptr);
}

extern XiQWidget_vtable XI(_vt_QWidget);
extern int XI(_size_QWidget);
XI_EXPORT void XI(_init_QWidget)() __attribute__((constructor));




struct XiQPushButton_vtable;
struct XiQPushButton: public XiQWidget
{
    XiQPushButton_vtable* vtable();
    XiQPushButton();
    QPushButton* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QPushButton wrappedType;
    xiqEventListenerList<XiClickListener> clickListeners;
    XiQPushButtonSigs* sig;

    QPushButton* getImpl() {
        return static_cast<QPushButton*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QPushButton>());
    }

    void setObject(QPushButton* b) {
        XiQWidget::setObject(b);
        sig = new XiQPushButtonSigs(this, b);
    }

    ~XiQPushButton() {
        delete sig;
    }
    static XiQIcon* icon(XiQPushButton* __thisPtr);
    static void setIcon(XiQPushButton* __thisPtr, XiQIcon* param0);
    static XiQString* text(XiQPushButton* __thisPtr);
    static void setText(XiQPushButton* __thisPtr, XiQString* param0);
    static XiQMenu* menu(XiQPushButton* __thisPtr);
    static void setMenu(XiQPushButton* __thisPtr, XiQMenu* param0);
    static void showMenu(XiQPushButton* __thisPtr);
    static bool isDefault(XiQPushButton* __thisPtr);
    static void setDefault(XiQPushButton* __thisPtr, bool param0);
    static bool autoDefault(XiQPushButton* __thisPtr);
    static void setAutoDefault(XiQPushButton* __thisPtr, bool param0);
    static bool isFlat(XiQPushButton* __thisPtr);
    static void setFlat(XiQPushButton* __thisPtr, bool param0);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void addClickListener(XiQPushButton* __thisPtr, XiClickListener* cl);
    static void clicked(XiQPushButton* __thisPtr);
};

inline QPushButton* fromXi(XiQPushButton* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQPushButton_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiQIcon* (*icon)(XiQPushButton*);
    void (*setIcon)(XiQPushButton*, XiQIcon*);
    XiQString* (*text)(XiQPushButton*);
    void (*setText)(XiQPushButton*, XiQString*);
    XiQMenu* (*menu)(XiQPushButton*);
    void (*setMenu)(XiQPushButton*, XiQMenu*);
    void (*showMenu)(XiQPushButton*);
    bool (*isDefault)(XiQPushButton*);
    void (*setDefault)(XiQPushButton*, bool);
    bool (*autoDefault)(XiQPushButton*);
    void (*setAutoDefault)(XiQPushButton*, bool);
    bool (*isFlat)(XiQPushButton*);
    void (*setFlat)(XiQPushButton*, bool);
    void (*addClickListener)(XiQPushButton*, XiClickListener*);
    void (*clicked)(XiQPushButton*);
};

inline XiQPushButton_vtable* XiQPushButton::vtable() {
    return static_cast<XiQPushButton_vtable*>(vptr);
}

extern XiQPushButton_vtable XI(_vt_QPushButton);
extern int XI(_size_QPushButton);
XI_EXPORT void XI(_init_QPushButton)() __attribute__((constructor));


XI_EXPORT XiQPushButton* XI(qpushbutton_o11QPushButtono7QString)(XiQString* label);


struct XiClickListener_vtable;
struct XiClickListener: public Xiobj
{
    XiClickListener_vtable* vtable();
    XiClickListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiClickListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiClickListener* me = static_cast<XiClickListener*>(mePtr);
        if (me->initialized)
            me->~XiClickListener();
    }

    static void clicked(XiClickListener* __thisPtr, XiQPushButton* pb);
};

struct XiClickListener_vtable: public Xivtable
{
    void* reserved;
    void (*clicked)(XiClickListener*, XiQPushButton*);
};

inline XiClickListener_vtable* XiClickListener::vtable() {
    return static_cast<XiClickListener_vtable*>(vptr);
}

extern XiClickListener_vtable XI(_vt_ClickListener);
extern int XI(_size_ClickListener);
XI_EXPORT void XI(_init_ClickListener)() __attribute__((constructor));




struct XiQCheckBox_vtable;
struct XiQCheckBox: public XiQWidget
{
    XiQCheckBox_vtable* vtable();
    XiQCheckBox();
    QCheckBox* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QCheckBox wrappedType;
    xiqEventListenerList<XiToggleListener> listeners;
    XiQCheckBoxSigs* sig;

    QCheckBox* getImpl() {
        return static_cast<QCheckBox*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QCheckBox>());
    }

    void setObject(QCheckBox* b) {
        XiQWidget::setObject(b);
        sig = new XiQCheckBoxSigs(this, b);
    }

    ~XiQCheckBox() {
        delete sig;
    }
    static XiQString* text(XiQCheckBox* __thisPtr);
    static void setText(XiQCheckBox* __thisPtr, XiQString* param0);
    static bool isChecked(XiQCheckBox* __thisPtr);
    static void setChecked(XiQCheckBox* __thisPtr, bool param0);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void addToggleListener(XiQCheckBox* __thisPtr, XiToggleListener* l);
    static void toggled(XiQCheckBox* __thisPtr, bool param0);
};

inline QCheckBox* fromXi(XiQCheckBox* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQCheckBox_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiQString* (*text)(XiQCheckBox*);
    void (*setText)(XiQCheckBox*, XiQString*);
    bool (*isChecked)(XiQCheckBox*);
    void (*setChecked)(XiQCheckBox*, bool);
    void (*addToggleListener)(XiQCheckBox*, XiToggleListener*);
    void (*toggled)(XiQCheckBox*, bool);
};

inline XiQCheckBox_vtable* XiQCheckBox::vtable() {
    return static_cast<XiQCheckBox_vtable*>(vptr);
}

extern XiQCheckBox_vtable XI(_vt_QCheckBox);
extern int XI(_size_QCheckBox);
XI_EXPORT void XI(_init_QCheckBox)() __attribute__((constructor));


XI_EXPORT XiQCheckBox* XI(qcheckbox_o9QCheckBoxo7QString)(XiQString* label);


struct XiToggleListener_vtable;
struct XiToggleListener: public Xiobj
{
    XiToggleListener_vtable* vtable();
    XiToggleListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiToggleListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiToggleListener* me = static_cast<XiToggleListener*>(mePtr);
        if (me->initialized)
            me->~XiToggleListener();
    }

    static void toggled(XiToggleListener* __thisPtr, XiQWidget* widget, bool state);
};

struct XiToggleListener_vtable: public Xivtable
{
    void* reserved;
    void (*toggled)(XiToggleListener*, XiQWidget*, bool);
};

inline XiToggleListener_vtable* XiToggleListener::vtable() {
    return static_cast<XiToggleListener_vtable*>(vptr);
}

extern XiToggleListener_vtable XI(_vt_ToggleListener);
extern int XI(_size_ToggleListener);
XI_EXPORT void XI(_init_ToggleListener)() __attribute__((constructor));




struct XiQRadioButton_vtable;
struct XiQRadioButton: public XiQWidget
{
    XiQRadioButton_vtable* vtable();
    XiQRadioButton();
    QRadioButton* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QRadioButton wrappedType;
    xiqEventListenerList<XiToggleListener> listeners;
    XiQRadioButtonSigs* sig;

    QRadioButton* getImpl() {
        return static_cast<QRadioButton*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QRadioButton>());
    }

    void setObject(QRadioButton* b) {
        XiQWidget::setObject(b);
        sig = new XiQRadioButtonSigs(this, b);
    }

    ~XiQRadioButton() {
        delete sig;
    }
    static XiQString* text(XiQRadioButton* __thisPtr);
    static void setText(XiQRadioButton* __thisPtr, XiQString* param0);
    static bool isChecked(XiQRadioButton* __thisPtr);
    static void setChecked(XiQRadioButton* __thisPtr, bool param0);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void addToggleListener(XiQRadioButton* __thisPtr, XiToggleListener* l);
    static void toggled(XiQRadioButton* __thisPtr, bool param0);
};

inline QRadioButton* fromXi(XiQRadioButton* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQRadioButton_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiQString* (*text)(XiQRadioButton*);
    void (*setText)(XiQRadioButton*, XiQString*);
    bool (*isChecked)(XiQRadioButton*);
    void (*setChecked)(XiQRadioButton*, bool);
    void (*addToggleListener)(XiQRadioButton*, XiToggleListener*);
    void (*toggled)(XiQRadioButton*, bool);
};

inline XiQRadioButton_vtable* XiQRadioButton::vtable() {
    return static_cast<XiQRadioButton_vtable*>(vptr);
}

extern XiQRadioButton_vtable XI(_vt_QRadioButton);
extern int XI(_size_QRadioButton);
XI_EXPORT void XI(_init_QRadioButton)() __attribute__((constructor));


XI_EXPORT XiQRadioButton* XI(qradio_o12QRadioButtono7QString)(XiQString* label);


struct XiQButtonGroup_vtable;
struct XiQButtonGroup: public Xiobj
{
    XiQButtonGroup_vtable* vtable();
    XiQButtonGroup();
    QButtonGroup* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QButtonGroup wrappedType;
    XiQObjectHolder<QButtonGroup> handle;

    // the listener list type is actually a general GC-traceable
    // list... So we (ab)use it to guard the buttons added to us.
    xiqEventListenerList<XiQRadioButton> buttons;

    QButtonGroup* getImpl() {
        return handle.get();
    }

    void createImpl() {
        setObject(new QButtonGroup());
    }

    void setObject(QButtonGroup* a) {
        handle.setObject(a, this);
    }
    static void addButton(XiQButtonGroup* __thisPtr, XiQRadioButton* button);
};

inline QButtonGroup* fromXi(XiQButtonGroup* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQButtonGroup_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    void (*addButton)(XiQButtonGroup*, XiQRadioButton*);
};

inline XiQButtonGroup_vtable* XiQButtonGroup::vtable() {
    return static_cast<XiQButtonGroup_vtable*>(vptr);
}

extern XiQButtonGroup_vtable XI(_vt_QButtonGroup);
extern int XI(_size_QButtonGroup);
XI_EXPORT void XI(_init_QButtonGroup)() __attribute__((constructor));


XI_EXPORT XiQButtonGroup* XI(qbuttongroup_o12QButtonGroup)();


struct XiQMenu_vtable;
struct XiQMenu: public XiQWidget
{
    XiQMenu_vtable* vtable();
    XiQMenu();
    QMenu* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QMenu wrappedType;
    QMenu* getImpl() {
        return static_cast<QMenu*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QMenu>());
    }
    static void addAction(XiQWidget* __thisPtr, XiQAction* a);
    static void addMenu(XiQMenu* __thisPtr, XiQMenu* m);
    static void addSeparator(XiQMenu* __thisPtr);
    static XiQAction* menuAction(XiQMenu* __thisPtr);
    static XiQAction* exec(XiQMenu* __thisPtr, XiQPoint* p);
    static XiQString* title(XiQMenu* __thisPtr);
    static void setTitle(XiQMenu* __thisPtr, XiQString* param0);
    static XiQIcon* icon(XiQMenu* __thisPtr);
    static void setIcon(XiQMenu* __thisPtr, XiQIcon* param0);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
};

inline QMenu* fromXi(XiQMenu* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQMenu_vtable: public XiQWidget_vtable
{
    void* reserved;
    void (*addMenu)(XiQMenu*, XiQMenu*);
    void (*addSeparator)(XiQMenu*);
    XiQAction* (*menuAction)(XiQMenu*);
    XiQAction* (*exec)(XiQMenu*, XiQPoint*);
    XiQString* (*title)(XiQMenu*);
    void (*setTitle)(XiQMenu*, XiQString*);
    XiQIcon* (*icon)(XiQMenu*);
    void (*setIcon)(XiQMenu*, XiQIcon*);
};

inline XiQMenu_vtable* XiQMenu::vtable() {
    return static_cast<XiQMenu_vtable*>(vptr);
}

extern XiQMenu_vtable XI(_vt_QMenu);
extern int XI(_size_QMenu);
XI_EXPORT void XI(_init_QMenu)() __attribute__((constructor));


XI_EXPORT XiQMenu* XI(qmenu_o5QMenuo7QString)(XiQString* title);


struct XiToolButtonStyle_vtable;
struct XiToolButtonStyle: public Xiobj
{
    XiToolButtonStyle_vtable* vtable();
    XiToolButtonStyle();
    ToolButtonStyle value;
    ToolButtonStyle* impl() {
        if (!initialized) 
            new (this) XiToolButtonStyle();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiToolButtonStyle* me = static_cast<XiToolButtonStyle*>(mePtr);
        if (me->initialized)
            me->~XiToolButtonStyle();
    }

};

XI_EXPORT XiToolButtonStyle* XI(ToolButtonIconOnly_o15ToolButtonStyle)();
XI_EXPORT XiToolButtonStyle* XI(ToolButtonTextOnly_o15ToolButtonStyle)();
XI_EXPORT XiToolButtonStyle* XI(ToolButtonTextBesideIcon_o15ToolButtonStyle)();
XI_EXPORT XiToolButtonStyle* XI(ToolButtonTextUnderIcon_o15ToolButtonStyle)();
inline XiToolButtonStyle* toXi(const ToolButtonStyle& orig) {
    if (orig == ToolButtonIconOnly)
        return XI(ToolButtonIconOnly_o15ToolButtonStyle)();
    if (orig == ToolButtonTextOnly)
        return XI(ToolButtonTextOnly_o15ToolButtonStyle)();
    if (orig == ToolButtonTextBesideIcon)
        return XI(ToolButtonTextBesideIcon_o15ToolButtonStyle)();
    if (orig == ToolButtonTextUnderIcon)
        return XI(ToolButtonTextUnderIcon_o15ToolButtonStyle)();
    XiToolButtonStyle* r = gcNew<XiToolButtonStyle>();
    r->value = orig;
    return r;
}

inline ToolButtonStyle fromXi(XiToolButtonStyle* wrapped) {
    return *wrapped->impl();
}

struct XiToolButtonStyle_vtable: public Xivtable
{
    void* reserved;
};

inline XiToolButtonStyle_vtable* XiToolButtonStyle::vtable() {
    return static_cast<XiToolButtonStyle_vtable*>(vptr);
}

extern XiToolButtonStyle_vtable XI(_vt_ToolButtonStyle);
extern int XI(_size_ToolButtonStyle);
XI_EXPORT void XI(_init_ToolButtonStyle)() __attribute__((constructor));




struct XiQToolBar_vtable;
struct XiQToolBar: public XiQWidget
{
    XiQToolBar_vtable* vtable();
    XiQToolBar();
    QToolBar* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QToolBar wrappedType;
    QToolBar* getImpl() {
        return static_cast<QToolBar*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QToolBar>());
    }
    static void addAction(XiQWidget* __thisPtr, XiQAction* a);
    static void addSeparator(XiQToolBar* __thisPtr);
    static XiToolButtonStyle* toolButtonStyle(XiQToolBar* __thisPtr);
    static void setToolButtonStyle(XiQToolBar* __thisPtr, XiToolButtonStyle* param0);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
};

inline QToolBar* fromXi(XiQToolBar* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQToolBar_vtable: public XiQWidget_vtable
{
    void* reserved;
    void (*addSeparator)(XiQToolBar*);
    XiToolButtonStyle* (*toolButtonStyle)(XiQToolBar*);
    void (*setToolButtonStyle)(XiQToolBar*, XiToolButtonStyle*);
};

inline XiQToolBar_vtable* XiQToolBar::vtable() {
    return static_cast<XiQToolBar_vtable*>(vptr);
}

extern XiQToolBar_vtable XI(_vt_QToolBar);
extern int XI(_size_QToolBar);
XI_EXPORT void XI(_init_QToolBar)() __attribute__((constructor));


XI_EXPORT XiQToolBar* XI(qtoolbar_o8QToolBar)();


struct XiQMenuBar_vtable;
struct XiQMenuBar: public XiQWidget
{
    XiQMenuBar_vtable* vtable();
    XiQMenuBar();
    QMenuBar* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QMenuBar wrappedType;
    QMenuBar* getImpl() {
        return static_cast<QMenuBar*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QMenuBar>());
    }
    static void addMenu(XiQMenuBar* __thisPtr, XiQMenu* m);
    static void addSeparator(XiQMenuBar* __thisPtr);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
};

inline QMenuBar* fromXi(XiQMenuBar* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQMenuBar_vtable: public XiQWidget_vtable
{
    void* reserved;
    void (*addMenu)(XiQMenuBar*, XiQMenu*);
    void (*addSeparator)(XiQMenuBar*);
};

inline XiQMenuBar_vtable* XiQMenuBar::vtable() {
    return static_cast<XiQMenuBar_vtable*>(vptr);
}

extern XiQMenuBar_vtable XI(_vt_QMenuBar);
extern int XI(_size_QMenuBar);
XI_EXPORT void XI(_init_QMenuBar)() __attribute__((constructor));




struct XiQLabel_vtable;
struct XiQLabel: public XiQWidget
{
    XiQLabel_vtable* vtable();
    XiQLabel();
    QLabel* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QLabel wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static int margin(XiQLabel* __thisPtr);
    static void setMargin(XiQLabel* __thisPtr, int param0);
    static int indent(XiQLabel* __thisPtr);
    static void setIndent(XiQLabel* __thisPtr, int param0);
    static void setBuddy(XiQLabel* __thisPtr, XiQWidget* buddy);
    static XiQString* text(XiQLabel* __thisPtr);
    static void setText(XiQLabel* __thisPtr, XiQString* param0);
    static bool wordWrap(XiQLabel* __thisPtr);
    static void setWordWrap(XiQLabel* __thisPtr, bool param0);
    static void setPixmap(XiQLabel* __thisPtr, XiQPixmap* p);
    static XiQPixmap* pixmap(XiQLabel* __thisPtr);
    static bool hasScaledContents(XiQLabel* __thisPtr);
    static void setScaledContents(XiQLabel* __thisPtr, bool param0);
    static bool openExternalLinks(XiQLabel* __thisPtr);
    static void setOpenExternalLinks(XiQLabel* __thisPtr, bool param0);
};

inline QLabel* fromXi(XiQLabel* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQLabel_vtable: public XiQWidget_vtable
{
    void* reserved;
    int (*margin)(XiQLabel*);
    void (*setMargin)(XiQLabel*, int);
    int (*indent)(XiQLabel*);
    void (*setIndent)(XiQLabel*, int);
    void (*setBuddy)(XiQLabel*, XiQWidget*);
    XiQString* (*text)(XiQLabel*);
    void (*setText)(XiQLabel*, XiQString*);
    bool (*wordWrap)(XiQLabel*);
    void (*setWordWrap)(XiQLabel*, bool);
    void (*setPixmap)(XiQLabel*, XiQPixmap*);
    XiQPixmap* (*pixmap)(XiQLabel*);
    bool (*hasScaledContents)(XiQLabel*);
    void (*setScaledContents)(XiQLabel*, bool);
    bool (*openExternalLinks)(XiQLabel*);
    void (*setOpenExternalLinks)(XiQLabel*, bool);
};

inline XiQLabel_vtable* XiQLabel::vtable() {
    return static_cast<XiQLabel_vtable*>(vptr);
}

extern XiQLabel_vtable XI(_vt_QLabel);
extern int XI(_size_QLabel);
XI_EXPORT void XI(_init_QLabel)() __attribute__((constructor));


XI_EXPORT XiQLabel* XI(qlabel_o6QLabelo7QString)(XiQString* text);
XI_EXPORT XiQLabel* XI(qlabelPixmap_o6QLabelo7QPixmap)(XiQPixmap* p);


struct XiQMainWindow_vtable;
struct XiQMainWindow: public XiQWidget
{
    XiQMainWindow_vtable* vtable();
    XiQMainWindow();
    QMainWindow* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QMainWindow wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void addToolBar(XiQMainWindow* __thisPtr, XiQToolBar* t);
    static XiQMenuBar* menuBar(XiQMainWindow* __thisPtr);
    static void setCentralWidget(XiQMainWindow* __thisPtr, XiQWidget* w);
};

inline QMainWindow* fromXi(XiQMainWindow* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQMainWindow_vtable: public XiQWidget_vtable
{
    void* reserved;
    void (*addToolBar)(XiQMainWindow*, XiQToolBar*);
    XiQMenuBar* (*menuBar)(XiQMainWindow*);
    void (*setCentralWidget)(XiQMainWindow*, XiQWidget*);
};

inline XiQMainWindow_vtable* XiQMainWindow::vtable() {
    return static_cast<XiQMainWindow_vtable*>(vptr);
}

extern XiQMainWindow_vtable XI(_vt_QMainWindow);
extern int XI(_size_QMainWindow);
XI_EXPORT void XI(_init_QMainWindow)() __attribute__((constructor));


XI_EXPORT XiQMainWindow* XI(qmainwindow_o11QMainWindow)();


struct XiQGroupBox_vtable;
struct XiQGroupBox: public XiQWidget
{
    XiQGroupBox_vtable* vtable();
    XiQGroupBox();
    QGroupBox* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QGroupBox wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static XiQString* title(XiQGroupBox* __thisPtr);
    static void setTitle(XiQGroupBox* __thisPtr, XiQString* t);
    static void setFlat(XiQGroupBox* __thisPtr, bool param0);
    static bool isFlat(XiQGroupBox* __thisPtr);
};

inline QGroupBox* fromXi(XiQGroupBox* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQGroupBox_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiQString* (*title)(XiQGroupBox*);
    void (*setTitle)(XiQGroupBox*, XiQString*);
    void (*setFlat)(XiQGroupBox*, bool);
    bool (*isFlat)(XiQGroupBox*);
};

inline XiQGroupBox_vtable* XiQGroupBox::vtable() {
    return static_cast<XiQGroupBox_vtable*>(vptr);
}

extern XiQGroupBox_vtable XI(_vt_QGroupBox);
extern int XI(_size_QGroupBox);
XI_EXPORT void XI(_init_QGroupBox)() __attribute__((constructor));


XI_EXPORT XiQGroupBox* XI(qgroupbox_o9QGroupBoxo7QString)(XiQString* title);
typedef QDialog::DialogCode DialogCode;


struct XiDialogCode_vtable;
struct XiDialogCode: public Xiobj
{
    XiDialogCode_vtable* vtable();
    XiDialogCode();
    DialogCode value;
    DialogCode* impl() {
        if (!initialized) 
            new (this) XiDialogCode();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiDialogCode* me = static_cast<XiDialogCode*>(mePtr);
        if (me->initialized)
            me->~XiDialogCode();
    }

};

XI_EXPORT XiDialogCode* XI(Accepted_o10DialogCode)();
XI_EXPORT XiDialogCode* XI(Rejected_o10DialogCode)();
inline XiDialogCode* toXi(const DialogCode& orig) {
    if (orig == QDialog::Accepted)
        return XI(Accepted_o10DialogCode)();
    if (orig == QDialog::Rejected)
        return XI(Rejected_o10DialogCode)();
    XiDialogCode* r = gcNew<XiDialogCode>();
    r->value = orig;
    return r;
}

inline DialogCode fromXi(XiDialogCode* wrapped) {
    return *wrapped->impl();
}

struct XiDialogCode_vtable: public Xivtable
{
    void* reserved;
};

inline XiDialogCode_vtable* XiDialogCode::vtable() {
    return static_cast<XiDialogCode_vtable*>(vptr);
}

extern XiDialogCode_vtable XI(_vt_DialogCode);
extern int XI(_size_DialogCode);
XI_EXPORT void XI(_init_DialogCode)() __attribute__((constructor));




struct XiQDialog_vtable;
struct XiQDialog: public XiQWidget
{
    XiQDialog_vtable* vtable();
    XiQDialog();
    QDialog* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QDialog wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static int exec(XiQDialog* __thisPtr);
    static void accept(XiQDialog* __thisPtr);
    static void reject(XiQDialog* __thisPtr);
};

inline QDialog* fromXi(XiQDialog* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQDialog_vtable: public XiQWidget_vtable
{
    void* reserved;
    int (*exec)(XiQDialog*);
    void (*accept)(XiQDialog*);
    void (*reject)(XiQDialog*);
};

inline XiQDialog_vtable* XiQDialog::vtable() {
    return static_cast<XiQDialog_vtable*>(vptr);
}

extern XiQDialog_vtable XI(_vt_QDialog);
extern int XI(_size_QDialog);
XI_EXPORT void XI(_init_QDialog)() __attribute__((constructor));


XI_EXPORT XiQDialog* XI(qdialog_o7QDialog)();


struct XiQLineEdit_vtable;
struct XiQLineEdit: public XiQWidget
{
    XiQLineEdit_vtable* vtable();
    XiQLineEdit();
    QLineEdit* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QLineEdit wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static XiQString* text(XiQLineEdit* __thisPtr);
    static void setText(XiQLineEdit* __thisPtr, XiQString* param0);
    static void clear(XiQLineEdit* __thisPtr);
    static bool isReadOnly(XiQLineEdit* __thisPtr);
    static void setReadOnly(XiQLineEdit* __thisPtr, bool param0);
    static bool isModified(XiQLineEdit* __thisPtr);
    static void setModified(XiQLineEdit* __thisPtr, bool param0);
};

inline QLineEdit* fromXi(XiQLineEdit* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQLineEdit_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiQString* (*text)(XiQLineEdit*);
    void (*setText)(XiQLineEdit*, XiQString*);
    void (*clear)(XiQLineEdit*);
    bool (*isReadOnly)(XiQLineEdit*);
    void (*setReadOnly)(XiQLineEdit*, bool);
    bool (*isModified)(XiQLineEdit*);
    void (*setModified)(XiQLineEdit*, bool);
};

inline XiQLineEdit_vtable* XiQLineEdit::vtable() {
    return static_cast<XiQLineEdit_vtable*>(vptr);
}

extern XiQLineEdit_vtable XI(_vt_QLineEdit);
extern int XI(_size_QLineEdit);
XI_EXPORT void XI(_init_QLineEdit)() __attribute__((constructor));


XI_EXPORT XiQLineEdit* XI(qlineedit_o9QLineEdit)();


struct XiQTextEdit_vtable;
struct XiQTextEdit: public XiQWidget
{
    XiQTextEdit_vtable* vtable();
    XiQTextEdit();
    QTextEdit* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QTextEdit wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static bool isReadOnly(XiQTextEdit* __thisPtr);
    static void setReadOnly(XiQTextEdit* __thisPtr, bool param0);
    static XiQString* toHtml(XiQTextEdit* __thisPtr);
    static XiQString* toPlainText(XiQTextEdit* __thisPtr);
    static void setHtml(XiQTextEdit* __thisPtr, XiQString* param0);
    static void setPlainText(XiQTextEdit* __thisPtr, XiQString* param0);
    static void append(XiQTextEdit* __thisPtr, XiQString* param0);
    static void clear(XiQTextEdit* __thisPtr);
};

inline QTextEdit* fromXi(XiQTextEdit* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQTextEdit_vtable: public XiQWidget_vtable
{
    void* reserved;
    bool (*isReadOnly)(XiQTextEdit*);
    void (*setReadOnly)(XiQTextEdit*, bool);
    XiQString* (*toHtml)(XiQTextEdit*);
    XiQString* (*toPlainText)(XiQTextEdit*);
    void (*setHtml)(XiQTextEdit*, XiQString*);
    void (*setPlainText)(XiQTextEdit*, XiQString*);
    void (*append)(XiQTextEdit*, XiQString*);
    void (*clear)(XiQTextEdit*);
};

inline XiQTextEdit_vtable* XiQTextEdit::vtable() {
    return static_cast<XiQTextEdit_vtable*>(vptr);
}

extern XiQTextEdit_vtable XI(_vt_QTextEdit);
extern int XI(_size_QTextEdit);
XI_EXPORT void XI(_init_QTextEdit)() __attribute__((constructor));


XI_EXPORT XiQTextEdit* XI(qtextedit_o9QTextEdit)();


struct XiSliderListener_vtable;
struct XiSliderListener: public Xiobj
{
    XiSliderListener_vtable* vtable();
    XiSliderListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiSliderListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiSliderListener* me = static_cast<XiSliderListener*>(mePtr);
        if (me->initialized)
            me->~XiSliderListener();
    }

    static void sliderMoved(XiSliderListener* __thisPtr, XiQWidget* slider, int val);
};

struct XiSliderListener_vtable: public Xivtable
{
    void* reserved;
    void (*sliderMoved)(XiSliderListener*, XiQWidget*, int);
};

inline XiSliderListener_vtable* XiSliderListener::vtable() {
    return static_cast<XiSliderListener_vtable*>(vptr);
}

extern XiSliderListener_vtable XI(_vt_SliderListener);
extern int XI(_size_SliderListener);
XI_EXPORT void XI(_init_SliderListener)() __attribute__((constructor));




struct XiQAbstractSlider_vtable;
struct XiQAbstractSlider: public XiQWidget
{
    XiQAbstractSlider_vtable* vtable();
    XiQAbstractSlider();
    QAbstractSlider* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QAbstractSlider wrappedType;
    xiqEventListenerList<XiSliderListener> sliderListeners;
    XiQAbstractSliderSigs* sig;

    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }

    void setObject(QAbstractSlider* b) {
        XiQWidget::setObject(b);
        sig = new XiQAbstractSliderSigs(this, b);
    }

    ~XiQAbstractSlider() {
        delete sig;
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static XiOrientation* orientation(XiQAbstractSlider* __thisPtr);
    static void setOrientation(XiQAbstractSlider* __thisPtr, XiOrientation* param0);
    static int getValue(XiQAbstractSlider* __thisPtr);
    static void setValue(XiQAbstractSlider* __thisPtr, int param0);
    static void setRange(XiQAbstractSlider* __thisPtr, int min, int max);
    static int minimum(XiQAbstractSlider* __thisPtr);
    static void setMinimum(XiQAbstractSlider* __thisPtr, int param0);
    static int maximum(XiQAbstractSlider* __thisPtr);
    static void setMaximum(XiQAbstractSlider* __thisPtr, int param0);
    static int pageStep(XiQAbstractSlider* __thisPtr);
    static void setPageStep(XiQAbstractSlider* __thisPtr, int param0);
    static void sliderMoved(XiQAbstractSlider* __thisPtr, int param0);
    static void addSliderListener(XiQAbstractSlider* __thisPtr, XiSliderListener* l);
};

inline QAbstractSlider* fromXi(XiQAbstractSlider* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQAbstractSlider_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiOrientation* (*orientation)(XiQAbstractSlider*);
    void (*setOrientation)(XiQAbstractSlider*, XiOrientation*);
    int (*getValue)(XiQAbstractSlider*);
    void (*setValue)(XiQAbstractSlider*, int);
    void (*setRange)(XiQAbstractSlider*, int, int);
    int (*minimum)(XiQAbstractSlider*);
    void (*setMinimum)(XiQAbstractSlider*, int);
    int (*maximum)(XiQAbstractSlider*);
    void (*setMaximum)(XiQAbstractSlider*, int);
    int (*pageStep)(XiQAbstractSlider*);
    void (*setPageStep)(XiQAbstractSlider*, int);
    void (*sliderMoved)(XiQAbstractSlider*, int);
    void (*addSliderListener)(XiQAbstractSlider*, XiSliderListener*);
};

inline XiQAbstractSlider_vtable* XiQAbstractSlider::vtable() {
    return static_cast<XiQAbstractSlider_vtable*>(vptr);
}

extern XiQAbstractSlider_vtable XI(_vt_QAbstractSlider);
extern int XI(_size_QAbstractSlider);
XI_EXPORT void XI(_init_QAbstractSlider)() __attribute__((constructor));




struct XiQScrollBar_vtable;
struct XiQScrollBar: public XiQAbstractSlider
{
    XiQScrollBar_vtable* vtable();
    XiQScrollBar();
    QScrollBar* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QScrollBar wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
};

inline QScrollBar* fromXi(XiQScrollBar* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQScrollBar_vtable: public XiQAbstractSlider_vtable
{
    void* reserved;
};

inline XiQScrollBar_vtable* XiQScrollBar::vtable() {
    return static_cast<XiQScrollBar_vtable*>(vptr);
}

extern XiQScrollBar_vtable XI(_vt_QScrollBar);
extern int XI(_size_QScrollBar);
XI_EXPORT void XI(_init_QScrollBar)() __attribute__((constructor));


XI_EXPORT XiQScrollBar* XI(qscrollbar_o10QScrollBaro11Orientation)(XiOrientation* o);
typedef QSlider::TickPosition SliderTickPosition;


struct XiSliderTickPosition_vtable;
struct XiSliderTickPosition: public Xiobj
{
    XiSliderTickPosition_vtable* vtable();
    XiSliderTickPosition();
    SliderTickPosition value;
    SliderTickPosition* impl() {
        if (!initialized) 
            new (this) XiSliderTickPosition();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiSliderTickPosition* me = static_cast<XiSliderTickPosition*>(mePtr);
        if (me->initialized)
            me->~XiSliderTickPosition();
    }

};

XI_EXPORT XiSliderTickPosition* XI(TicksBothSides_o18SliderTickPosition)();
XI_EXPORT XiSliderTickPosition* XI(TicksAbove_o18SliderTickPosition)();
XI_EXPORT XiSliderTickPosition* XI(TicksBelow_o18SliderTickPosition)();
inline XiSliderTickPosition* toXi(const SliderTickPosition& orig) {
    if (orig == QSlider::TicksBothSides)
        return XI(TicksBothSides_o18SliderTickPosition)();
    if (orig == QSlider::TicksAbove)
        return XI(TicksAbove_o18SliderTickPosition)();
    if (orig == QSlider::TicksBelow)
        return XI(TicksBelow_o18SliderTickPosition)();
    XiSliderTickPosition* r = gcNew<XiSliderTickPosition>();
    r->value = orig;
    return r;
}

inline SliderTickPosition fromXi(XiSliderTickPosition* wrapped) {
    return *wrapped->impl();
}

struct XiSliderTickPosition_vtable: public Xivtable
{
    void* reserved;
};

inline XiSliderTickPosition_vtable* XiSliderTickPosition::vtable() {
    return static_cast<XiSliderTickPosition_vtable*>(vptr);
}

extern XiSliderTickPosition_vtable XI(_vt_SliderTickPosition);
extern int XI(_size_SliderTickPosition);
XI_EXPORT void XI(_init_SliderTickPosition)() __attribute__((constructor));




struct XiQSlider_vtable;
struct XiQSlider: public XiQAbstractSlider
{
    XiQSlider_vtable* vtable();
    XiQSlider();
    QSlider* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QSlider wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static int tickInterval(XiQSlider* __thisPtr);
    static void setTickInterval(XiQSlider* __thisPtr, int param0);
    static void setTickPosition(XiQSlider* __thisPtr, XiSliderTickPosition* param0);
    static XiSliderTickPosition* tickPosition(XiQSlider* __thisPtr);
};

inline QSlider* fromXi(XiQSlider* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQSlider_vtable: public XiQAbstractSlider_vtable
{
    void* reserved;
    int (*tickInterval)(XiQSlider*);
    void (*setTickInterval)(XiQSlider*, int);
    void (*setTickPosition)(XiQSlider*, XiSliderTickPosition*);
    XiSliderTickPosition* (*tickPosition)(XiQSlider*);
};

inline XiQSlider_vtable* XiQSlider::vtable() {
    return static_cast<XiQSlider_vtable*>(vptr);
}

extern XiQSlider_vtable XI(_vt_QSlider);
extern int XI(_size_QSlider);
XI_EXPORT void XI(_init_QSlider)() __attribute__((constructor));


XI_EXPORT XiQSlider* XI(qslider_o7QSlider)();


struct XiStandardIcon_vtable;
struct XiStandardIcon: public Xiobj
{
    XiStandardIcon_vtable* vtable();
    XiStandardIcon();
    StandardIcon value;
    StandardIcon* impl() {
        if (!initialized) 
            new (this) XiStandardIcon();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiStandardIcon* me = static_cast<XiStandardIcon*>(mePtr);
        if (me->initialized)
            me->~XiStandardIcon();
    }

};

XI_EXPORT XiStandardIcon* XI(TitleBarMenuButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(TitleBarMinButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(TitleBarMaxButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(TitleBarCloseButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(TitleBarNormalButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(TitleBarShadeButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(TitleBarUnshadeButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(TitleBarContextHelpButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DockWidgetCloseButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MessageBoxInformation_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MessageBoxWarning_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MessageBoxCritical_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MessageBoxQuestion_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DesktopIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(TrashIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(ComputerIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DriveFDIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DriveHDIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DriveCDIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DriveDVDIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DriveNetIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DirOpenIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DirClosedIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DirLinkIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileLinkIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(ToolBarHorizontalExtensionButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(ToolBarVerticalExtensionButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileDialogStart_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileDialogEnd_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileDialogToParent_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileDialogNewFolder_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileDialogDetailedView_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileDialogInfoView_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileDialogContentsView_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileDialogListView_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(FileDialogBack_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DirIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogOkButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogCancelButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogHelpButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogOpenButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogSaveButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogCloseButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogApplyButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogResetButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogDiscardButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogYesButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DialogNoButton_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(ArrowUp_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(ArrowDown_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(ArrowLeft_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(ArrowRight_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(ArrowBack_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(ArrowForward_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(DirHomeIcon_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(CommandLink_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(VistaShield_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(BrowserReload_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(BrowserStop_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MediaPlay_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MediaStop_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MediaPause_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MediaSkipForward_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MediaSkipBackward_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MediaSeekForward_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MediaSeekBackward_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MediaVolume_o12StandardIcon)();
XI_EXPORT XiStandardIcon* XI(MediaVolumeMuted_o12StandardIcon)();
inline XiStandardIcon* toXi(const StandardIcon& orig) {
    if (orig == QStyle::SP_TitleBarMenuButton)
        return XI(TitleBarMenuButton_o12StandardIcon)();
    if (orig == QStyle::SP_TitleBarMinButton)
        return XI(TitleBarMinButton_o12StandardIcon)();
    if (orig == QStyle::SP_TitleBarMaxButton)
        return XI(TitleBarMaxButton_o12StandardIcon)();
    if (orig == QStyle::SP_TitleBarCloseButton)
        return XI(TitleBarCloseButton_o12StandardIcon)();
    if (orig == QStyle::SP_TitleBarNormalButton)
        return XI(TitleBarNormalButton_o12StandardIcon)();
    if (orig == QStyle::SP_TitleBarShadeButton)
        return XI(TitleBarShadeButton_o12StandardIcon)();
    if (orig == QStyle::SP_TitleBarUnshadeButton)
        return XI(TitleBarUnshadeButton_o12StandardIcon)();
    if (orig == QStyle::SP_TitleBarContextHelpButton)
        return XI(TitleBarContextHelpButton_o12StandardIcon)();
    if (orig == QStyle::SP_DockWidgetCloseButton)
        return XI(DockWidgetCloseButton_o12StandardIcon)();
    if (orig == QStyle::SP_MessageBoxInformation)
        return XI(MessageBoxInformation_o12StandardIcon)();
    if (orig == QStyle::SP_MessageBoxWarning)
        return XI(MessageBoxWarning_o12StandardIcon)();
    if (orig == QStyle::SP_MessageBoxCritical)
        return XI(MessageBoxCritical_o12StandardIcon)();
    if (orig == QStyle::SP_MessageBoxQuestion)
        return XI(MessageBoxQuestion_o12StandardIcon)();
    if (orig == QStyle::SP_DesktopIcon)
        return XI(DesktopIcon_o12StandardIcon)();
    if (orig == QStyle::SP_TrashIcon)
        return XI(TrashIcon_o12StandardIcon)();
    if (orig == QStyle::SP_ComputerIcon)
        return XI(ComputerIcon_o12StandardIcon)();
    if (orig == QStyle::SP_DriveFDIcon)
        return XI(DriveFDIcon_o12StandardIcon)();
    if (orig == QStyle::SP_DriveHDIcon)
        return XI(DriveHDIcon_o12StandardIcon)();
    if (orig == QStyle::SP_DriveCDIcon)
        return XI(DriveCDIcon_o12StandardIcon)();
    if (orig == QStyle::SP_DriveDVDIcon)
        return XI(DriveDVDIcon_o12StandardIcon)();
    if (orig == QStyle::SP_DriveNetIcon)
        return XI(DriveNetIcon_o12StandardIcon)();
    if (orig == QStyle::SP_DirOpenIcon)
        return XI(DirOpenIcon_o12StandardIcon)();
    if (orig == QStyle::SP_DirClosedIcon)
        return XI(DirClosedIcon_o12StandardIcon)();
    if (orig == QStyle::SP_DirLinkIcon)
        return XI(DirLinkIcon_o12StandardIcon)();
    if (orig == QStyle::SP_FileIcon)
        return XI(FileIcon_o12StandardIcon)();
    if (orig == QStyle::SP_FileLinkIcon)
        return XI(FileLinkIcon_o12StandardIcon)();
    if (orig == QStyle::SP_ToolBarHorizontalExtensionButton)
        return XI(ToolBarHorizontalExtensionButton_o12StandardIcon)();
    if (orig == QStyle::SP_ToolBarVerticalExtensionButton)
        return XI(ToolBarVerticalExtensionButton_o12StandardIcon)();
    if (orig == QStyle::SP_FileDialogStart)
        return XI(FileDialogStart_o12StandardIcon)();
    if (orig == QStyle::SP_FileDialogEnd)
        return XI(FileDialogEnd_o12StandardIcon)();
    if (orig == QStyle::SP_FileDialogToParent)
        return XI(FileDialogToParent_o12StandardIcon)();
    if (orig == QStyle::SP_FileDialogNewFolder)
        return XI(FileDialogNewFolder_o12StandardIcon)();
    if (orig == QStyle::SP_FileDialogDetailedView)
        return XI(FileDialogDetailedView_o12StandardIcon)();
    if (orig == QStyle::SP_FileDialogInfoView)
        return XI(FileDialogInfoView_o12StandardIcon)();
    if (orig == QStyle::SP_FileDialogContentsView)
        return XI(FileDialogContentsView_o12StandardIcon)();
    if (orig == QStyle::SP_FileDialogListView)
        return XI(FileDialogListView_o12StandardIcon)();
    if (orig == QStyle::SP_FileDialogBack)
        return XI(FileDialogBack_o12StandardIcon)();
    if (orig == QStyle::SP_DirIcon)
        return XI(DirIcon_o12StandardIcon)();
    if (orig == QStyle::SP_DialogOkButton)
        return XI(DialogOkButton_o12StandardIcon)();
    if (orig == QStyle::SP_DialogCancelButton)
        return XI(DialogCancelButton_o12StandardIcon)();
    if (orig == QStyle::SP_DialogHelpButton)
        return XI(DialogHelpButton_o12StandardIcon)();
    if (orig == QStyle::SP_DialogOpenButton)
        return XI(DialogOpenButton_o12StandardIcon)();
    if (orig == QStyle::SP_DialogSaveButton)
        return XI(DialogSaveButton_o12StandardIcon)();
    if (orig == QStyle::SP_DialogCloseButton)
        return XI(DialogCloseButton_o12StandardIcon)();
    if (orig == QStyle::SP_DialogApplyButton)
        return XI(DialogApplyButton_o12StandardIcon)();
    if (orig == QStyle::SP_DialogResetButton)
        return XI(DialogResetButton_o12StandardIcon)();
    if (orig == QStyle::SP_DialogDiscardButton)
        return XI(DialogDiscardButton_o12StandardIcon)();
    if (orig == QStyle::SP_DialogYesButton)
        return XI(DialogYesButton_o12StandardIcon)();
    if (orig == QStyle::SP_DialogNoButton)
        return XI(DialogNoButton_o12StandardIcon)();
    if (orig == QStyle::SP_ArrowUp)
        return XI(ArrowUp_o12StandardIcon)();
    if (orig == QStyle::SP_ArrowDown)
        return XI(ArrowDown_o12StandardIcon)();
    if (orig == QStyle::SP_ArrowLeft)
        return XI(ArrowLeft_o12StandardIcon)();
    if (orig == QStyle::SP_ArrowRight)
        return XI(ArrowRight_o12StandardIcon)();
    if (orig == QStyle::SP_ArrowBack)
        return XI(ArrowBack_o12StandardIcon)();
    if (orig == QStyle::SP_ArrowForward)
        return XI(ArrowForward_o12StandardIcon)();
    if (orig == QStyle::SP_DirHomeIcon)
        return XI(DirHomeIcon_o12StandardIcon)();
    if (orig == QStyle::SP_CommandLink)
        return XI(CommandLink_o12StandardIcon)();
    if (orig == QStyle::SP_VistaShield)
        return XI(VistaShield_o12StandardIcon)();
    if (orig == QStyle::SP_BrowserReload)
        return XI(BrowserReload_o12StandardIcon)();
    if (orig == QStyle::SP_BrowserStop)
        return XI(BrowserStop_o12StandardIcon)();
    if (orig == QStyle::SP_MediaPlay)
        return XI(MediaPlay_o12StandardIcon)();
    if (orig == QStyle::SP_MediaStop)
        return XI(MediaStop_o12StandardIcon)();
    if (orig == QStyle::SP_MediaPause)
        return XI(MediaPause_o12StandardIcon)();
    if (orig == QStyle::SP_MediaSkipForward)
        return XI(MediaSkipForward_o12StandardIcon)();
    if (orig == QStyle::SP_MediaSkipBackward)
        return XI(MediaSkipBackward_o12StandardIcon)();
    if (orig == QStyle::SP_MediaSeekForward)
        return XI(MediaSeekForward_o12StandardIcon)();
    if (orig == QStyle::SP_MediaSeekBackward)
        return XI(MediaSeekBackward_o12StandardIcon)();
    if (orig == QStyle::SP_MediaVolume)
        return XI(MediaVolume_o12StandardIcon)();
    if (orig == QStyle::SP_MediaVolumeMuted)
        return XI(MediaVolumeMuted_o12StandardIcon)();
    XiStandardIcon* r = gcNew<XiStandardIcon>();
    r->value = orig;
    return r;
}

inline StandardIcon fromXi(XiStandardIcon* wrapped) {
    return *wrapped->impl();
}

struct XiStandardIcon_vtable: public Xivtable
{
    void* reserved;
};

inline XiStandardIcon_vtable* XiStandardIcon::vtable() {
    return static_cast<XiStandardIcon_vtable*>(vptr);
}

extern XiStandardIcon_vtable XI(_vt_StandardIcon);
extern int XI(_size_StandardIcon);
XI_EXPORT void XI(_init_StandardIcon)() __attribute__((constructor));


XI_EXPORT int XI(ButtonOk_i)();
XI_EXPORT int XI(ButtonSave_i)();
XI_EXPORT int XI(ButtonSaveAll_i)();
XI_EXPORT int XI(ButtonOpen_i)();
XI_EXPORT int XI(ButtonYes_i)();
XI_EXPORT int XI(ButtonYesToAll_i)();
XI_EXPORT int XI(ButtonNo_i)();
XI_EXPORT int XI(ButtonNoToAll_i)();
XI_EXPORT int XI(ButtonAbort_i)();
XI_EXPORT int XI(ButtonRetry_i)();
XI_EXPORT int XI(ButtonIgnore_i)();
XI_EXPORT int XI(ButtonClose_i)();
XI_EXPORT int XI(ButtonCancel_i)();
XI_EXPORT int XI(ButtonDiscard_i)();
XI_EXPORT int XI(ButtonHelp_i)();
XI_EXPORT int XI(ButtonApply_i)();
XI_EXPORT int XI(ButtonReset_i)();
XI_EXPORT int XI(ButtonRestoreDefaults_i)();
XI_EXPORT int XI(qmessageBoxCritical_io7QWidgeto7QStringo7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons);
XI_EXPORT int XI(qmessageBoxInformation_io7QWidgeto7QStringo7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons);
XI_EXPORT int XI(qmessageBoxWarning_io7QWidgeto7QStringo7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons);
XI_EXPORT int XI(qmessageBoxQuestion_io7QWidgeto7QStringo7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons);
XI_EXPORT XiQWidget* XI(NO__WIDGET_o7QWidget)();

