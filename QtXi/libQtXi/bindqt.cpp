// WARNING: Portions of this file are autogenerated from qt.idl and /home/chesley/Desktop/GitHub/cs4120/2019sp/project/QtXi/src/libQtXi//bindqt.cpp.in.
// Any changes you make here may be lost!
#include "bindqt.h"

QApplication* XiQApplication::impl()
{
    if (!initialized)
        static_cast<XiQApplication_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQApplication::invokeDtor(void* mePtr, void*)
{
    XiQApplication* me = static_cast<XiQApplication*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQApplication::__classOp(ClassOp op, void* memory)
{
    XiQApplication* me = static_cast<XiQApplication*>(memory);
    if (op == CallCtor) {
        new (memory) XiQApplication();
        me->createImpl();
    } else {
        me->~XiQApplication();
    }
}

XiQApplication::XiQApplication()
{
    if (!vptr)
        vptr = &XI(_vt_QApplication);
}

void XiQApplication::exec(XiQApplication* __thisPtr)
{
    XiQApplication* __this = static_cast<XiQApplication*>(__thisPtr);
    __this->impl()->exec();
}

void XiQApplication::quit(XiQApplication* __thisPtr)
{
    XiQApplication* __this = static_cast<XiQApplication*>(__thisPtr);
    __this->impl()->quit();
}

void XiQApplication::closeAllWindows(XiQApplication* __thisPtr)
{
    XiQApplication* __this = static_cast<XiQApplication*>(__thisPtr);
    __this->impl()->closeAllWindows();
}

XiQString* XiQApplication::styleSheet(XiQApplication* __thisPtr)
{
    XiQApplication* __this = static_cast<XiQApplication*>(__thisPtr);
    return toXi(__this->impl()->styleSheet());
}

void XiQApplication::setStyleSheet(XiQApplication* __thisPtr, XiQString* sheet)
{
    XiQApplication* __this = static_cast<XiQApplication*>(__thisPtr);
    QString sheet__decode = fromXi(sheet);
    __this->impl()->setStyleSheet(sheet__decode);
}

XiQIcon* XiQApplication::windowIcon(XiQApplication* __thisPtr)
{
    XiQApplication* __this = static_cast<XiQApplication*>(__thisPtr);
    return toXi(__this->impl()->windowIcon());
}

void XiQApplication::setWindowIcon(XiQApplication* __thisPtr, XiQIcon* param0)
{
    XiQApplication* __this = static_cast<XiQApplication*>(__thisPtr);
    QIcon param0__decode = fromXi(param0);
    __this->impl()->setWindowIcon(param0__decode);
}

XiQFont* XiQApplication::font(XiQApplication* __thisPtr)
{
    XiQApplication* __this = static_cast<XiQApplication*>(__thisPtr);
    return toXi(__this->impl()->font());
}

void XiQApplication::setFont(XiQApplication* __thisPtr, XiQFont* param0)
{
    XiQApplication* __this = static_cast<XiQApplication*>(__thisPtr);
    QFont param0__decode = fromXi(param0);
    __this->impl()->setFont(param0__decode);
}

void XiQApplication::addAboutToQuitListener(XiQApplication* __thisPtr, XiAboutToQuitListener* l)
{
    XiQApplication* __this = static_cast<XiQApplication*>(__thisPtr);
    __this->quitListeners.append(l);
}

XiQApplication_vtable XI(_vt_QApplication);
int XI(_size_QApplication);
void XI(_init_QApplication)()
{
    if (XI(_size_QApplication)) return;
    XI(_size_QApplication) = sizeof(XiQApplication);
    XI(_vt_QApplication).exec = XiQApplication::exec;
    XI(_vt_QApplication).quit = XiQApplication::quit;
    XI(_vt_QApplication).closeAllWindows = XiQApplication::closeAllWindows;
    XI(_vt_QApplication).styleSheet = XiQApplication::styleSheet;
    XI(_vt_QApplication).setStyleSheet = XiQApplication::setStyleSheet;
    XI(_vt_QApplication).windowIcon = XiQApplication::windowIcon;
    XI(_vt_QApplication).setWindowIcon = XiQApplication::setWindowIcon;
    XI(_vt_QApplication).font = XiQApplication::font;
    XI(_vt_QApplication).setFont = XiQApplication::setFont;
    XI(_vt_QApplication).addAboutToQuitListener = XiQApplication::addAboutToQuitListener;
    XI(_vt_QApplication).__classOp = XiQApplication::__classOp;
}

XiAboutToQuitListener::XiAboutToQuitListener()
{
    if (!vptr)
        vptr = &XI(_vt_AboutToQuitListener);
}

void XiAboutToQuitListener::aboutToQuit(XiAboutToQuitListener* __thisPtr)
{
    XiAboutToQuitListener* __this = static_cast<XiAboutToQuitListener*>(__thisPtr);
}

XiAboutToQuitListener_vtable XI(_vt_AboutToQuitListener);
int XI(_size_AboutToQuitListener);
void XI(_init_AboutToQuitListener)()
{
    if (XI(_size_AboutToQuitListener)) return;
    XI(_size_AboutToQuitListener) = sizeof(XiAboutToQuitListener);
    XI(_vt_AboutToQuitListener).aboutToQuit = XiAboutToQuitListener::aboutToQuit;
}


XiQApplication* XI(qapplication_t2o12QApplicationaaiaai)(int64_t** args)
{
    int64_t argc    = ((int64_t*)args)[-1];
    char** argv = new char*[argc];
    // Demarshal the string arrays.
    // ### broken unicode-wise since it just discards upper bits
    // ### some memory gets leaked
    // ### BUT THAT MIGHT NOT BE TRUE IN 64-BIT not that anybody cares
    for (int a = 0; a < argc; ++a) {
        int64_t slen = args[a][-1];
        argv[a]  = (char*)malloc(slen + 1);
        for (int c = 0; c < slen; ++c)
            argv[a][c] = char(args[a][c]);

        argv[a][slen] = '\0';
    }

    // This is pretty awkward --- Qt actually expects to get a reference
    // to argc. To do that, we pass it reference to the length cell
    // of the out array, which we allocate with the initial size.
    // ### if it messes with argv after our copy below bad things will
    // happen, though.
    int64_t* outArgs = (int64_t*) _xi_alloc(argc*8 + 8);
    outArgs[0] = argc;

    QApplication*    qapp  = new QApplication(((int*)outArgs)[1], argv);
    XiQApplication*  xiApp = gcNew<XiQApplication>();
    xiApp->setObject(qapp);
    argc = outArgs[0];

    // Convert the strings back.
    int64_t** argsA = (int64_t**)&outArgs[1];

    for (int a = 0; a < argc; ++a) {
        int l = strlen(argv[a]);

        int64_t* buf = (int64_t*) _xi_alloc(l*8 + 8);
        buf[0] = l;
        argsA[a] = buf + 1;
        for (int c = 0; c < l; ++c)
            argsA[a][c] = argv[a][c];
    }

    SET2NDRESULT(argsA);
    return xiApp;
}
XiQString::XiQString()
{
    if (!vptr)
        vptr = &XI(_vt_QString);
}

void* XiQString::XiString(XiQString* __thisPtr)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QVector<uint> v = __this->impl()->toUcs4();

    // maybe I should have exported ximkArray...
    uint64_t* mem = reinterpret_cast<uint64_t*>(_xi_alloc(8*(v.size() + 1)));
    mem[0] = v.size();
    for (int c = 0; c < v.size(); ++c)
        mem[c + 1] = v[c];
    return mem + 1;
}

void XiQString::append(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QString other__decode = fromXi(other);
    __this->impl()->append(other__decode);
}

int XiQString::at(XiQString* __thisPtr, int pos)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    int pos__decode = fromXi(pos);
    return toXi(__this->impl()->at(pos__decode));
}

void XiQString::chop(XiQString* __thisPtr, int n)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    int n__decode = fromXi(n);
    __this->impl()->chop(n__decode);
}

void XiQString::clear(XiQString* __thisPtr)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    __this->impl()->clear();
}

int XiQString::compare(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QString other__decode = fromXi(other);
    return toXi(__this->impl()->compare(other__decode));
}

bool XiQString::contains(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QString other__decode = fromXi(other);
    return toXi(__this->impl()->contains(other__decode));
}

bool XiQString::containsCI(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return __this->impl()->contains(fromXi(other), Qt::CaseInsensitive);
}

int XiQString::count(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QString other__decode = fromXi(other);
    return toXi(__this->impl()->count(other__decode));
}

int XiQString::countCI(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return __this->impl()->count(fromXi(other), Qt::CaseInsensitive);
}

bool XiQString::endsWith(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QString other__decode = fromXi(other);
    return toXi(__this->impl()->endsWith(other__decode));
}

int XiQString::indexOf(XiQString* __thisPtr, XiQString* other, int from)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QString other__decode = fromXi(other);
    int from__decode = fromXi(from);
    return toXi(__this->impl()->indexOf(other__decode, from__decode));
}

int XiQString::indexOfCI(XiQString* __thisPtr, XiQString* other, int from)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return __this->impl()->indexOf(fromXi(other), Qt::CaseInsensitive);
}

void XiQString::insert(XiQString* __thisPtr, int pos, XiQString* str)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    int pos__decode = fromXi(pos);
    QString str__decode = fromXi(str);
    __this->impl()->insert(pos__decode, str__decode);
}

bool XiQString::isEmpty(XiQString* __thisPtr)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return toXi(__this->impl()->isEmpty());
}

XiQString* XiQString::left(XiQString* __thisPtr, int n)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    int n__decode = fromXi(n);
    return toXi(__this->impl()->left(n__decode));
}

int XiQString::getLength(XiQString* __thisPtr)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return __this->impl()->length();
}

XiQString* XiQString::mid(XiQString* __thisPtr, int pos, int n)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    int pos__decode = fromXi(pos);
    int n__decode = fromXi(n);
    return toXi(__this->impl()->mid(pos__decode, n__decode));
}

void XiQString::prepend(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QString other__decode = fromXi(other);
    __this->impl()->prepend(other__decode);
}

void XiQString::remove(XiQString* __thisPtr, int position, int n)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    int position__decode = fromXi(position);
    int n__decode = fromXi(n);
    __this->impl()->remove(position__decode, n__decode);
}

XiQString* XiQString::repeated(XiQString* __thisPtr, int n)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    int n__decode = fromXi(n);
    return toXi(__this->impl()->repeated(n__decode));
}

void XiQString::replace(XiQString* __thisPtr, XiQString* before, XiQString* after)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QString before__decode = fromXi(before);
    QString after__decode = fromXi(after);
    __this->impl()->replace(before__decode, after__decode);
}

void XiQString::replaceCI(XiQString* __thisPtr, XiQString* before, XiQString* after)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    __this->impl()->replace(fromXi(before), fromXi(after), Qt::CaseInsensitive);
}

XiQString* XiQString::right(XiQString* __thisPtr, int n)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    int n__decode = fromXi(n);
    return toXi(__this->impl()->right(n__decode));
}

void XiQString::setNum(XiQString* __thisPtr, int num)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    int num__decode = fromXi(num);
    __this->impl()->setNum(num__decode);
}

XiQString* XiQString::simplified(XiQString* __thisPtr)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return toXi(__this->impl()->simplified());
}

void* XiQString::split(XiQString* __thisPtr, XiQString* separator)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QStringList l = __this->impl()->split(fromXi(separator));

    uint* mem = reinterpret_cast<uint*>(_xi_alloc(8*(l.size() + 1)));
    mem[0] = l.size();
    XiQString** out = reinterpret_cast<XiQString**>(mem + 1);
    for (int i = 0; i < l.size(); ++ i)
        out[i] = toXi(l[i]);
    return out;
}

bool XiQString::startsWith(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    QString other__decode = fromXi(other);
    return toXi(__this->impl()->startsWith(other__decode));
}

XiQString* XiQString::toLower(XiQString* __thisPtr)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return toXi(__this->impl()->toLower());
}

XiQString* XiQString::toUpper(XiQString* __thisPtr)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return toXi(__this->impl()->toUpper());
}

XiQString* XiQString::trimmed(XiQString* __thisPtr)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return toXi(__this->impl()->trimmed());
}

void XiQString::truncate(XiQString* __thisPtr, int n)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    int n__decode = fromXi(n);
    __this->impl()->truncate(n__decode);
}

XiQString* XiQString::plus(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return toXi(*__this->impl() + fromXi(other));
}

bool XiQString::equals(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return *__this->impl() == fromXi(other);
}

bool XiQString::neq(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return *__this->impl() != fromXi(other);
}

bool XiQString::less(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return *__this->impl() < fromXi(other);
}

bool XiQString::leq(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return *__this->impl() <= fromXi(other);
}

bool XiQString::greater(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return *__this->impl() > fromXi(other);
}

bool XiQString::geq(XiQString* __thisPtr, XiQString* other)
{
    XiQString* __this = static_cast<XiQString*>(__thisPtr);
    return *__this->impl() > fromXi(other);
}

XiQString_vtable XI(_vt_QString);
int XI(_size_QString);
void XI(_init_QString)()
{
    if (XI(_size_QString)) return;
    XI(_size_QString) = sizeof(XiQString);
    XI(_vt_QString).XiString = XiQString::XiString;
    XI(_vt_QString).append = XiQString::append;
    XI(_vt_QString).at = XiQString::at;
    XI(_vt_QString).chop = XiQString::chop;
    XI(_vt_QString).clear = XiQString::clear;
    XI(_vt_QString).compare = XiQString::compare;
    XI(_vt_QString).contains = XiQString::contains;
    XI(_vt_QString).containsCI = XiQString::containsCI;
    XI(_vt_QString).count = XiQString::count;
    XI(_vt_QString).countCI = XiQString::countCI;
    XI(_vt_QString).endsWith = XiQString::endsWith;
    XI(_vt_QString).indexOf = XiQString::indexOf;
    XI(_vt_QString).indexOfCI = XiQString::indexOfCI;
    XI(_vt_QString).insert = XiQString::insert;
    XI(_vt_QString).isEmpty = XiQString::isEmpty;
    XI(_vt_QString).left = XiQString::left;
    XI(_vt_QString).getLength = XiQString::getLength;
    XI(_vt_QString).mid = XiQString::mid;
    XI(_vt_QString).prepend = XiQString::prepend;
    XI(_vt_QString).remove = XiQString::remove;
    XI(_vt_QString).repeated = XiQString::repeated;
    XI(_vt_QString).replace = XiQString::replace;
    XI(_vt_QString).replaceCI = XiQString::replaceCI;
    XI(_vt_QString).right = XiQString::right;
    XI(_vt_QString).setNum = XiQString::setNum;
    XI(_vt_QString).simplified = XiQString::simplified;
    XI(_vt_QString).split = XiQString::split;
    XI(_vt_QString).startsWith = XiQString::startsWith;
    XI(_vt_QString).toLower = XiQString::toLower;
    XI(_vt_QString).toUpper = XiQString::toUpper;
    XI(_vt_QString).trimmed = XiQString::trimmed;
    XI(_vt_QString).truncate = XiQString::truncate;
    XI(_vt_QString).plus = XiQString::plus;
    XI(_vt_QString).equals = XiQString::equals;
    XI(_vt_QString).neq = XiQString::neq;
    XI(_vt_QString).less = XiQString::less;
    XI(_vt_QString).leq = XiQString::leq;
    XI(_vt_QString).greater = XiQString::greater;
    XI(_vt_QString).geq = XiQString::geq;
}

XiQString* XI(qs_o7QStringai)(void* istr)
{
    XiQString* out = gcNew<XiQString>();
    // this is the laziest port possible.
    uint64_t* istrData = reinterpret_cast<uint64_t*>(istr);
    // gross. qt doesn't want 64-bit chars, so we have to shove em into ints
    unsigned int* str = (unsigned int*)malloc(istrData[-1] * sizeof(unsigned int));
    for (int i = 0; i < istrData[-1]; ++i) {
        str[i] = (unsigned int)istrData[i];
    }
    out->value = QString::fromUcs4(str, istrData[-1]);
    free(str);
    return out;
}

XiQString* XI(qsNum_o7QStringi)(int num)
{
    XiQString* out = gcNew<XiQString>();
    out->value = QString::number(num);
    return out;
}

XiQPoint::XiQPoint()
{
    if (!vptr)
        vptr = &XI(_vt_QPoint);
}

int XiQPoint::x(XiQPoint* __thisPtr)
{
    XiQPoint* __this = static_cast<XiQPoint*>(__thisPtr);
    return toXi(__this->impl()->x());
}

int XiQPoint::y(XiQPoint* __thisPtr)
{
    XiQPoint* __this = static_cast<XiQPoint*>(__thisPtr);
    return toXi(__this->impl()->y());
}

void XiQPoint::setX(XiQPoint* __thisPtr, int param0)
{
    XiQPoint* __this = static_cast<XiQPoint*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setX(param0__decode);
}

void XiQPoint::setY(XiQPoint* __thisPtr, int param0)
{
    XiQPoint* __this = static_cast<XiQPoint*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setY(param0__decode);
}

XiQPoint* XiQPoint::plus(XiQPoint* __thisPtr, XiQPoint* other)
{
    XiQPoint* __this = static_cast<XiQPoint*>(__thisPtr);
    return toXi(*__this->impl() + fromXi(other));
}

XiQPoint* XiQPoint::minus(XiQPoint* __thisPtr, XiQPoint* other)
{
    XiQPoint* __this = static_cast<XiQPoint*>(__thisPtr);
    return toXi(*__this->impl() + fromXi(other));
}

bool XiQPoint::equals(XiQPoint* __thisPtr, XiQPoint* other)
{
    XiQPoint* __this = static_cast<XiQPoint*>(__thisPtr);
    return *__this->impl() == fromXi(other);
}

bool XiQPoint::neq(XiQPoint* __thisPtr, XiQPoint* other)
{
    XiQPoint* __this = static_cast<XiQPoint*>(__thisPtr);
    return *__this->impl() != fromXi(other);
}

XiQPoint_vtable XI(_vt_QPoint);
int XI(_size_QPoint);
void XI(_init_QPoint)()
{
    if (XI(_size_QPoint)) return;
    XI(_size_QPoint) = sizeof(XiQPoint);
    XI(_vt_QPoint).x = XiQPoint::x;
    XI(_vt_QPoint).y = XiQPoint::y;
    XI(_vt_QPoint).setX = XiQPoint::setX;
    XI(_vt_QPoint).setY = XiQPoint::setY;
    XI(_vt_QPoint).plus = XiQPoint::plus;
    XI(_vt_QPoint).minus = XiQPoint::minus;
    XI(_vt_QPoint).equals = XiQPoint::equals;
    XI(_vt_QPoint).neq = XiQPoint::neq;
}

XiQPoint* XI(qpoint_o6QPointii)(int x, int y)
{
    XiQPoint* p = gcNew<XiQPoint>();
    p->impl()->setX(x);
    p->impl()->setY(x);
    return p;
}

XiQSize::XiQSize()
{
    if (!vptr)
        vptr = &XI(_vt_QSize);
}

XiQSize* XiQSize::boundedTo(XiQSize* __thisPtr, XiQSize* other)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    QSize other__decode = fromXi(other);
    return toXi(__this->impl()->boundedTo(other__decode));
}

XiQSize* XiQSize::expandedTo(XiQSize* __thisPtr, XiQSize* other)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    QSize other__decode = fromXi(other);
    return toXi(__this->impl()->expandedTo(other__decode));
}

bool XiQSize::isEmpty(XiQSize* __thisPtr)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    return toXi(__this->impl()->isEmpty());
}

bool XiQSize::isNull(XiQSize* __thisPtr)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    return toXi(__this->impl()->isNull());
}

bool XiQSize::isValid(XiQSize* __thisPtr)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    return toXi(__this->impl()->isValid());
}

void XiQSize::setHeight(XiQSize* __thisPtr, int param0)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setHeight(param0__decode);
}

void XiQSize::setWidth(XiQSize* __thisPtr, int param0)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setWidth(param0__decode);
}

void XiQSize::transpose(XiQSize* __thisPtr)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    __this->impl()->transpose();
}

int XiQSize::width(XiQSize* __thisPtr)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    return toXi(__this->impl()->width());
}

int XiQSize::height(XiQSize* __thisPtr)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    return toXi(__this->impl()->height());
}

XiQSize* XiQSize::plus(XiQSize* __thisPtr, XiQSize* other)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    return toXi(*__this->impl() + fromXi(other));
}

XiQSize* XiQSize::minus(XiQSize* __thisPtr, XiQSize* other)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    return toXi(*__this->impl() + fromXi(other));
}

bool XiQSize::equals(XiQSize* __thisPtr, XiQSize* other)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    return *__this->impl() == fromXi(other);
}

bool XiQSize::neq(XiQSize* __thisPtr, XiQSize* other)
{
    XiQSize* __this = static_cast<XiQSize*>(__thisPtr);
    return *__this->impl() != fromXi(other);
}

XiQSize_vtable XI(_vt_QSize);
int XI(_size_QSize);
void XI(_init_QSize)()
{
    if (XI(_size_QSize)) return;
    XI(_size_QSize) = sizeof(XiQSize);
    XI(_vt_QSize).boundedTo = XiQSize::boundedTo;
    XI(_vt_QSize).expandedTo = XiQSize::expandedTo;
    XI(_vt_QSize).isEmpty = XiQSize::isEmpty;
    XI(_vt_QSize).isNull = XiQSize::isNull;
    XI(_vt_QSize).isValid = XiQSize::isValid;
    XI(_vt_QSize).setHeight = XiQSize::setHeight;
    XI(_vt_QSize).setWidth = XiQSize::setWidth;
    XI(_vt_QSize).transpose = XiQSize::transpose;
    XI(_vt_QSize).width = XiQSize::width;
    XI(_vt_QSize).height = XiQSize::height;
    XI(_vt_QSize).plus = XiQSize::plus;
    XI(_vt_QSize).minus = XiQSize::minus;
    XI(_vt_QSize).equals = XiQSize::equals;
    XI(_vt_QSize).neq = XiQSize::neq;
}

XiQSize* XI(qsize_o5QSizeii)(int w, int h)
{
    XiQSize* s = gcNew<XiQSize>();
    s->impl()->setWidth(w);
    s->impl()->setHeight(h);
    return s;
}

XiQRect::XiQRect()
{
    if (!vptr)
        vptr = &XI(_vt_QRect);
}

void XiQRect::adjust(XiQRect* __thisPtr, int dx1, int dy1, int dx2, int dy2)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int dx1__decode = fromXi(dx1);
    int dy1__decode = fromXi(dy1);
    int dx2__decode = fromXi(dx2);
    int dy2__decode = fromXi(dy2);
    __this->impl()->adjust(dx1__decode, dy1__decode, dx2__decode, dy2__decode);
}

XiQRect* XiQRect::adjusted(XiQRect* __thisPtr, int dx1, int dy1, int dx2, int dy2)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int dx1__decode = fromXi(dx1);
    int dy1__decode = fromXi(dy1);
    int dx2__decode = fromXi(dx2);
    int dy2__decode = fromXi(dy2);
    return toXi(__this->impl()->adjusted(dx1__decode, dy1__decode, dx2__decode, dy2__decode));
}

int XiQRect::bottom(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->bottom());
}

XiQPoint* XiQRect::bottomLeft(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->bottomLeft());
}

XiQPoint* XiQRect::bottomRight(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->bottomRight());
}

XiQPoint* XiQRect::center(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->center());
}

bool XiQRect::contains(XiQRect* __thisPtr, XiQPoint* param0)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint param0__decode = fromXi(param0);
    return toXi(__this->impl()->contains(param0__decode));
}

int XiQRect::height(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->height());
}

XiQRect* XiQRect::intersected(XiQRect* __thisPtr, XiQRect* other)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QRect other__decode = fromXi(other);
    return toXi(__this->impl()->intersected(other__decode));
}

bool XiQRect::intersects(XiQRect* __thisPtr, XiQRect* other)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QRect other__decode = fromXi(other);
    return toXi(__this->impl()->intersects(other__decode));
}

bool XiQRect::isEmpty(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->isEmpty());
}

int XiQRect::left(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->left());
}

void XiQRect::moveBottom(XiQRect* __thisPtr, int y)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int y__decode = fromXi(y);
    __this->impl()->moveBottom(y__decode);
}

void XiQRect::moveBottomLeft(XiQRect* __thisPtr, XiQPoint* p)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->moveBottomLeft(p__decode);
}

void XiQRect::moveBottomRight(XiQRect* __thisPtr, XiQPoint* p)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->moveBottomRight(p__decode);
}

void XiQRect::moveCenter(XiQRect* __thisPtr, XiQPoint* p)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->moveCenter(p__decode);
}

void XiQRect::moveLeft(XiQRect* __thisPtr, int x)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int x__decode = fromXi(x);
    __this->impl()->moveLeft(x__decode);
}

void XiQRect::moveRight(XiQRect* __thisPtr, int x)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int x__decode = fromXi(x);
    __this->impl()->moveRight(x__decode);
}

void XiQRect::moveTo(XiQRect* __thisPtr, XiQPoint* p)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->moveTo(p__decode);
}

void XiQRect::moveTop(XiQRect* __thisPtr, int y)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int y__decode = fromXi(y);
    __this->impl()->moveTop(y__decode);
}

void XiQRect::moveTopLeft(XiQRect* __thisPtr, XiQPoint* p)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->moveTopLeft(p__decode);
}

void XiQRect::moveTopRight(XiQRect* __thisPtr, XiQPoint* p)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->moveTopRight(p__decode);
}

XiQRect* XiQRect::normalized(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->normalized());
}

int XiQRect::right(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->right());
}

void XiQRect::setBottom(XiQRect* __thisPtr, int y)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int y__decode = fromXi(y);
    __this->impl()->setBottom(y__decode);
}

void XiQRect::setBottomLeft(XiQRect* __thisPtr, XiQPoint* p)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->setBottomLeft(p__decode);
}

void XiQRect::setBottomRight(XiQRect* __thisPtr, XiQPoint* p)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->setBottomRight(p__decode);
}

void XiQRect::setCoords(XiQRect* __thisPtr, int x1, int y1, int x2, int y2)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int x1__decode = fromXi(x1);
    int y1__decode = fromXi(y1);
    int x2__decode = fromXi(x2);
    int y2__decode = fromXi(y2);
    __this->impl()->setCoords(x1__decode, y1__decode, x2__decode, y2__decode);
}

void XiQRect::setHeight(XiQRect* __thisPtr, int h)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int h__decode = fromXi(h);
    __this->impl()->setHeight(h__decode);
}

void XiQRect::setLeft(XiQRect* __thisPtr, int x)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int x__decode = fromXi(x);
    __this->impl()->setLeft(x__decode);
}

void XiQRect::setRect(XiQRect* __thisPtr, int x, int y, int w, int h)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int x__decode = fromXi(x);
    int y__decode = fromXi(y);
    int w__decode = fromXi(w);
    int h__decode = fromXi(h);
    __this->impl()->setRect(x__decode, y__decode, w__decode, h__decode);
}

void XiQRect::setRight(XiQRect* __thisPtr, int x)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int x__decode = fromXi(x);
    __this->impl()->setRight(x__decode);
}

void XiQRect::setSize(XiQRect* __thisPtr, XiQSize* size)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QSize size__decode = fromXi(size);
    __this->impl()->setSize(size__decode);
}

void XiQRect::setTop(XiQRect* __thisPtr, int y)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int y__decode = fromXi(y);
    __this->impl()->setTop(y__decode);
}

void XiQRect::setTopLeft(XiQRect* __thisPtr, XiQPoint* p)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->setTopLeft(p__decode);
}

void XiQRect::setTopRight(XiQRect* __thisPtr, XiQPoint* p)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->setTopRight(p__decode);
}

void XiQRect::setWidth(XiQRect* __thisPtr, int w)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int w__decode = fromXi(w);
    __this->impl()->setWidth(w__decode);
}

void XiQRect::setX(XiQRect* __thisPtr, int x)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int x__decode = fromXi(x);
    __this->impl()->setX(x__decode);
}

void XiQRect::setY(XiQRect* __thisPtr, int y)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int y__decode = fromXi(y);
    __this->impl()->setY(y__decode);
}

XiQSize* XiQRect::size(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->size());
}

int XiQRect::top(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->top());
}

XiQPoint* XiQRect::topLeft(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->topLeft());
}

XiQPoint* XiQRect::topRight(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->topRight());
}

void XiQRect::translate(XiQRect* __thisPtr, int dx, int y)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int dx__decode = fromXi(dx);
    int y__decode = fromXi(y);
    __this->impl()->translate(dx__decode, y__decode);
}

XiQRect* XiQRect::translated(XiQRect* __thisPtr, int dx, int dy)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    int dx__decode = fromXi(dx);
    int dy__decode = fromXi(dy);
    return toXi(__this->impl()->translated(dx__decode, dy__decode));
}

XiQRect* XiQRect::united(XiQRect* __thisPtr, XiQRect* other)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    QRect other__decode = fromXi(other);
    return toXi(__this->impl()->united(other__decode));
}

int XiQRect::width(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->width());
}

int XiQRect::x(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->x());
}

int XiQRect::y(XiQRect* __thisPtr)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return toXi(__this->impl()->y());
}

bool XiQRect::equals(XiQRect* __thisPtr, XiQRect* other)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return *__this->impl() == fromXi(other);
}

bool XiQRect::neq(XiQRect* __thisPtr, XiQRect* other)
{
    XiQRect* __this = static_cast<XiQRect*>(__thisPtr);
    return *__this->impl() != fromXi(other);
}

XiQRect_vtable XI(_vt_QRect);
int XI(_size_QRect);
void XI(_init_QRect)()
{
    if (XI(_size_QRect)) return;
    XI(_size_QRect) = sizeof(XiQRect);
    XI(_vt_QRect).adjust = XiQRect::adjust;
    XI(_vt_QRect).adjusted = XiQRect::adjusted;
    XI(_vt_QRect).bottom = XiQRect::bottom;
    XI(_vt_QRect).bottomLeft = XiQRect::bottomLeft;
    XI(_vt_QRect).bottomRight = XiQRect::bottomRight;
    XI(_vt_QRect).center = XiQRect::center;
    XI(_vt_QRect).contains = XiQRect::contains;
    XI(_vt_QRect).height = XiQRect::height;
    XI(_vt_QRect).intersected = XiQRect::intersected;
    XI(_vt_QRect).intersects = XiQRect::intersects;
    XI(_vt_QRect).isEmpty = XiQRect::isEmpty;
    XI(_vt_QRect).left = XiQRect::left;
    XI(_vt_QRect).moveBottom = XiQRect::moveBottom;
    XI(_vt_QRect).moveBottomLeft = XiQRect::moveBottomLeft;
    XI(_vt_QRect).moveBottomRight = XiQRect::moveBottomRight;
    XI(_vt_QRect).moveCenter = XiQRect::moveCenter;
    XI(_vt_QRect).moveLeft = XiQRect::moveLeft;
    XI(_vt_QRect).moveRight = XiQRect::moveRight;
    XI(_vt_QRect).moveTo = XiQRect::moveTo;
    XI(_vt_QRect).moveTop = XiQRect::moveTop;
    XI(_vt_QRect).moveTopLeft = XiQRect::moveTopLeft;
    XI(_vt_QRect).moveTopRight = XiQRect::moveTopRight;
    XI(_vt_QRect).normalized = XiQRect::normalized;
    XI(_vt_QRect).right = XiQRect::right;
    XI(_vt_QRect).setBottom = XiQRect::setBottom;
    XI(_vt_QRect).setBottomLeft = XiQRect::setBottomLeft;
    XI(_vt_QRect).setBottomRight = XiQRect::setBottomRight;
    XI(_vt_QRect).setCoords = XiQRect::setCoords;
    XI(_vt_QRect).setHeight = XiQRect::setHeight;
    XI(_vt_QRect).setLeft = XiQRect::setLeft;
    XI(_vt_QRect).setRect = XiQRect::setRect;
    XI(_vt_QRect).setRight = XiQRect::setRight;
    XI(_vt_QRect).setSize = XiQRect::setSize;
    XI(_vt_QRect).setTop = XiQRect::setTop;
    XI(_vt_QRect).setTopLeft = XiQRect::setTopLeft;
    XI(_vt_QRect).setTopRight = XiQRect::setTopRight;
    XI(_vt_QRect).setWidth = XiQRect::setWidth;
    XI(_vt_QRect).setX = XiQRect::setX;
    XI(_vt_QRect).setY = XiQRect::setY;
    XI(_vt_QRect).size = XiQRect::size;
    XI(_vt_QRect).top = XiQRect::top;
    XI(_vt_QRect).topLeft = XiQRect::topLeft;
    XI(_vt_QRect).topRight = XiQRect::topRight;
    XI(_vt_QRect).translate = XiQRect::translate;
    XI(_vt_QRect).translated = XiQRect::translated;
    XI(_vt_QRect).united = XiQRect::united;
    XI(_vt_QRect).width = XiQRect::width;
    XI(_vt_QRect).x = XiQRect::x;
    XI(_vt_QRect).y = XiQRect::y;
    XI(_vt_QRect).equals = XiQRect::equals;
    XI(_vt_QRect).neq = XiQRect::neq;
}

XiQRect* XI(qrect_o5QRectiiii)(int x, int y, int w, int h)
{
    XiQRect* r = gcNew<XiQRect>();
    r->impl()->setRect(x, y, w, h);
    return r;
}

XiOrientation::XiOrientation()
{
    if (!vptr)
        vptr = &XI(_vt_Orientation);
}

XiOrientation* XI(Horizontal_o11Orientation)()
{
    static XiOrientation* c = gcNew<XiOrientation>();
    c->value = Horizontal;
    return c;
}

XiOrientation* XI(Vertical_o11Orientation)()
{
    static XiOrientation* c = gcNew<XiOrientation>();
    c->value = Vertical;
    return c;
}

XiOrientation_vtable XI(_vt_Orientation);
int XI(_size_Orientation);
void XI(_init_Orientation)()
{
    if (XI(_size_Orientation)) return;
    XI(_size_Orientation) = sizeof(XiOrientation);
}

XiEventType::XiEventType()
{
    if (!vptr)
        vptr = &XI(_vt_EventType);
}

XiEventType* XI(ContextMenu_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::ContextMenu;
    return c;
}

XiEventType* XI(Close_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::Close;
    return c;
}

XiEventType* XI(Enter_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::Enter;
    return c;
}

XiEventType* XI(Hide_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::Hide;
    return c;
}

XiEventType* XI(KeyPress_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::KeyPress;
    return c;
}

XiEventType* XI(KeyRelease_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::KeyRelease;
    return c;
}

XiEventType* XI(Leave_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::Leave;
    return c;
}

XiEventType* XI(MouseButtonDblClick_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::MouseButtonDblClick;
    return c;
}

XiEventType* XI(MouseButtonPress_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::MouseButtonPress;
    return c;
}

XiEventType* XI(MouseButtonRelease_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::MouseButtonRelease;
    return c;
}

XiEventType* XI(MouseMove_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::MouseMove;
    return c;
}

XiEventType* XI(Paint_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::Paint;
    return c;
}

XiEventType* XI(Resize_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::Resize;
    return c;
}

XiEventType* XI(Show_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::Show;
    return c;
}

XiEventType* XI(Wheel_o9EventType)()
{
    static XiEventType* c = gcNew<XiEventType>();
    c->value = QEvent::Wheel;
    return c;
}

XiEventType_vtable XI(_vt_EventType);
int XI(_size_EventType);
void XI(_init_EventType)()
{
    if (XI(_size_EventType)) return;
    XI(_size_EventType) = sizeof(XiEventType);
}

QEvent* XiQEvent::impl()
{
    if (!initialized)
        static_cast<XiQEvent_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQEvent::invokeDtor(void* mePtr, void*)
{
    XiQEvent* me = static_cast<XiQEvent*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQEvent::__classOp(ClassOp op, void* memory)
{
    XiQEvent* me = static_cast<XiQEvent*>(memory);
    if (op == CallCtor) {
        new (memory) XiQEvent();
        me->createImpl();
    } else {
        me->~XiQEvent();
    }
}

XiQEvent::XiQEvent()
{
    if (!vptr)
        vptr = &XI(_vt_QEvent);
}

XiEventType* XiQEvent::type(XiQEvent* __thisPtr)
{
    XiQEvent* __this = static_cast<XiQEvent*>(__thisPtr);
    return toXi(__this->impl()->type());
}

void XiQEvent::accept(XiQEvent* __thisPtr)
{
    XiQEvent* __this = static_cast<XiQEvent*>(__thisPtr);
    __this->impl()->accept();
}

void XiQEvent::ignore(XiQEvent* __thisPtr)
{
    XiQEvent* __this = static_cast<XiQEvent*>(__thisPtr);
    __this->impl()->ignore();
}

bool XiQEvent::isAccepted(XiQEvent* __thisPtr)
{
    XiQEvent* __this = static_cast<XiQEvent*>(__thisPtr);
    return toXi(__this->impl()->isAccepted());
}

XiQEvent_vtable XI(_vt_QEvent);
int XI(_size_QEvent);
void XI(_init_QEvent)()
{
    if (XI(_size_QEvent)) return;
    XI(_size_QEvent) = sizeof(XiQEvent);
    XI(_vt_QEvent).type = XiQEvent::type;
    XI(_vt_QEvent).accept = XiQEvent::accept;
    XI(_vt_QEvent).ignore = XiQEvent::ignore;
    XI(_vt_QEvent).isAccepted = XiQEvent::isAccepted;
    XI(_vt_QEvent).__classOp = XiQEvent::__classOp;
}

QInputEvent* XiQInputEvent::impl()
{
    if (!initialized)
        static_cast<XiQInputEvent_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQInputEvent::invokeDtor(void* mePtr, void*)
{
    XiQInputEvent* me = static_cast<XiQInputEvent*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQInputEvent::__classOp(ClassOp op, void* memory)
{
    XiQInputEvent* me = static_cast<XiQInputEvent*>(memory);
    if (op == CallCtor) {
        new (memory) XiQInputEvent();
        me->createImpl();
    } else {
        me->~XiQInputEvent();
    }
}

XiQInputEvent::XiQInputEvent()
{
    if (vptr == &XI(_vt_QEvent))
        vptr = &XI(_vt_QInputEvent);
}

bool XiQInputEvent::shift(XiQInputEvent* __thisPtr)
{
    XiQInputEvent* __this = static_cast<XiQInputEvent*>(__thisPtr);
    return __this->impl()->modifiers() & Qt::ShiftModifier;
}

bool XiQInputEvent::ctrl(XiQInputEvent* __thisPtr)
{
    XiQInputEvent* __this = static_cast<XiQInputEvent*>(__thisPtr);
    return __this->impl()->modifiers() & Qt::ControlModifier;
}

bool XiQInputEvent::alt(XiQInputEvent* __thisPtr)
{
    XiQInputEvent* __this = static_cast<XiQInputEvent*>(__thisPtr);
    return __this->impl()->modifiers() & Qt::AltModifier;
}

bool XiQInputEvent::meta(XiQInputEvent* __thisPtr)
{
    XiQInputEvent* __this = static_cast<XiQInputEvent*>(__thisPtr);
    return __this->impl()->modifiers() & Qt::MetaModifier;
}

XiQInputEvent_vtable XI(_vt_QInputEvent);
int XI(_size_QInputEvent);
void XI(_init_QInputEvent)()
{
    if (XI(_size_QInputEvent)) return;
    XI(_init_QEvent)();
    XI(_size_QInputEvent) = sizeof(XiQInputEvent);
    XI(_vt_QInputEvent).shift = XiQInputEvent::shift;
    XI(_vt_QInputEvent).ctrl = XiQInputEvent::ctrl;
    XI(_vt_QInputEvent).alt = XiQInputEvent::alt;
    XI(_vt_QInputEvent).meta = XiQInputEvent::meta;
    XI(_vt_QInputEvent).type = XiQInputEvent::type;
    XI(_vt_QInputEvent).accept = XiQInputEvent::accept;
    XI(_vt_QInputEvent).ignore = XiQInputEvent::ignore;
    XI(_vt_QInputEvent).isAccepted = XiQInputEvent::isAccepted;
    XI(_vt_QInputEvent).__classOp = XiQInputEvent::__classOp;
}

QContextMenuEvent* XiQContextMenuEvent::impl()
{
    if (!initialized)
        static_cast<XiQContextMenuEvent_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQContextMenuEvent::invokeDtor(void* mePtr, void*)
{
    XiQContextMenuEvent* me = static_cast<XiQContextMenuEvent*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQContextMenuEvent::__classOp(ClassOp op, void* memory)
{
    XiQContextMenuEvent* me = static_cast<XiQContextMenuEvent*>(memory);
    if (op == CallCtor) {
        new (memory) XiQContextMenuEvent();
        me->createImpl();
    } else {
        me->~XiQContextMenuEvent();
    }
}

XiQContextMenuEvent::XiQContextMenuEvent()
{
    if (vptr == &XI(_vt_QInputEvent))
        vptr = &XI(_vt_QContextMenuEvent);
}

XiQPoint* XiQContextMenuEvent::globalPos(XiQContextMenuEvent* __thisPtr)
{
    XiQContextMenuEvent* __this = static_cast<XiQContextMenuEvent*>(__thisPtr);
    return toXi(__this->impl()->globalPos());
}

XiQPoint* XiQContextMenuEvent::pos(XiQContextMenuEvent* __thisPtr)
{
    XiQContextMenuEvent* __this = static_cast<XiQContextMenuEvent*>(__thisPtr);
    return toXi(__this->impl()->pos());
}

XiQContextMenuEvent_vtable XI(_vt_QContextMenuEvent);
int XI(_size_QContextMenuEvent);
void XI(_init_QContextMenuEvent)()
{
    if (XI(_size_QContextMenuEvent)) return;
    XI(_init_QInputEvent)();
    XI(_size_QContextMenuEvent) = sizeof(XiQContextMenuEvent);
    XI(_vt_QContextMenuEvent).globalPos = XiQContextMenuEvent::globalPos;
    XI(_vt_QContextMenuEvent).pos = XiQContextMenuEvent::pos;
    XI(_vt_QContextMenuEvent).shift = XiQContextMenuEvent::shift;
    XI(_vt_QContextMenuEvent).ctrl = XiQContextMenuEvent::ctrl;
    XI(_vt_QContextMenuEvent).alt = XiQContextMenuEvent::alt;
    XI(_vt_QContextMenuEvent).meta = XiQContextMenuEvent::meta;
    XI(_vt_QContextMenuEvent).type = XiQContextMenuEvent::type;
    XI(_vt_QContextMenuEvent).accept = XiQContextMenuEvent::accept;
    XI(_vt_QContextMenuEvent).ignore = XiQContextMenuEvent::ignore;
    XI(_vt_QContextMenuEvent).isAccepted = XiQContextMenuEvent::isAccepted;
    XI(_vt_QContextMenuEvent).__classOp = XiQContextMenuEvent::__classOp;
}

QKeyEvent* XiQKeyEvent::impl()
{
    if (!initialized)
        static_cast<XiQKeyEvent_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQKeyEvent::invokeDtor(void* mePtr, void*)
{
    XiQKeyEvent* me = static_cast<XiQKeyEvent*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQKeyEvent::__classOp(ClassOp op, void* memory)
{
    XiQKeyEvent* me = static_cast<XiQKeyEvent*>(memory);
    if (op == CallCtor) {
        new (memory) XiQKeyEvent();
        me->createImpl();
    } else {
        me->~XiQKeyEvent();
    }
}

XiQKeyEvent::XiQKeyEvent()
{
    if (vptr == &XI(_vt_QInputEvent))
        vptr = &XI(_vt_QKeyEvent);
}

int XiQKeyEvent::count(XiQKeyEvent* __thisPtr)
{
    XiQKeyEvent* __this = static_cast<XiQKeyEvent*>(__thisPtr);
    return toXi(__this->impl()->count());
}

XiQString* XiQKeyEvent::text(XiQKeyEvent* __thisPtr)
{
    XiQKeyEvent* __this = static_cast<XiQKeyEvent*>(__thisPtr);
    return toXi(__this->impl()->text());
}

bool XiQKeyEvent::isAutoRepeat(XiQKeyEvent* __thisPtr)
{
    XiQKeyEvent* __this = static_cast<XiQKeyEvent*>(__thisPtr);
    return toXi(__this->impl()->isAutoRepeat());
}

int XiQKeyEvent::key(XiQKeyEvent* __thisPtr)
{
    XiQKeyEvent* __this = static_cast<XiQKeyEvent*>(__thisPtr);
    return toXi(__this->impl()->key());
}

XiQKeyEvent_vtable XI(_vt_QKeyEvent);
int XI(_size_QKeyEvent);
void XI(_init_QKeyEvent)()
{
    if (XI(_size_QKeyEvent)) return;
    XI(_init_QInputEvent)();
    XI(_size_QKeyEvent) = sizeof(XiQKeyEvent);
    XI(_vt_QKeyEvent).count = XiQKeyEvent::count;
    XI(_vt_QKeyEvent).text = XiQKeyEvent::text;
    XI(_vt_QKeyEvent).isAutoRepeat = XiQKeyEvent::isAutoRepeat;
    XI(_vt_QKeyEvent).key = XiQKeyEvent::key;
    XI(_vt_QKeyEvent).shift = XiQKeyEvent::shift;
    XI(_vt_QKeyEvent).ctrl = XiQKeyEvent::ctrl;
    XI(_vt_QKeyEvent).alt = XiQKeyEvent::alt;
    XI(_vt_QKeyEvent).meta = XiQKeyEvent::meta;
    XI(_vt_QKeyEvent).type = XiQKeyEvent::type;
    XI(_vt_QKeyEvent).accept = XiQKeyEvent::accept;
    XI(_vt_QKeyEvent).ignore = XiQKeyEvent::ignore;
    XI(_vt_QKeyEvent).isAccepted = XiQKeyEvent::isAccepted;
    XI(_vt_QKeyEvent).__classOp = XiQKeyEvent::__classOp;
}

XiMouseButton::XiMouseButton()
{
    if (!vptr)
        vptr = &XI(_vt_MouseButton);
}

XiMouseButton* XI(LeftButton_o11MouseButton)()
{
    static XiMouseButton* c = gcNew<XiMouseButton>();
    c->value = LeftButton;
    return c;
}

XiMouseButton* XI(RightButton_o11MouseButton)()
{
    static XiMouseButton* c = gcNew<XiMouseButton>();
    c->value = RightButton;
    return c;
}

XiMouseButton* XI(MidButton_o11MouseButton)()
{
    static XiMouseButton* c = gcNew<XiMouseButton>();
    c->value = MidButton;
    return c;
}

XiMouseButton_vtable XI(_vt_MouseButton);
int XI(_size_MouseButton);
void XI(_init_MouseButton)()
{
    if (XI(_size_MouseButton)) return;
    XI(_size_MouseButton) = sizeof(XiMouseButton);
}

QMouseEvent* XiQMouseEvent::impl()
{
    if (!initialized)
        static_cast<XiQMouseEvent_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQMouseEvent::invokeDtor(void* mePtr, void*)
{
    XiQMouseEvent* me = static_cast<XiQMouseEvent*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQMouseEvent::__classOp(ClassOp op, void* memory)
{
    XiQMouseEvent* me = static_cast<XiQMouseEvent*>(memory);
    if (op == CallCtor) {
        new (memory) XiQMouseEvent();
        me->createImpl();
    } else {
        me->~XiQMouseEvent();
    }
}

XiQMouseEvent::XiQMouseEvent()
{
    if (vptr == &XI(_vt_QInputEvent))
        vptr = &XI(_vt_QMouseEvent);
}

XiQPoint* XiQMouseEvent::pos(XiQMouseEvent* __thisPtr)
{
    XiQMouseEvent* __this = static_cast<XiQMouseEvent*>(__thisPtr);
    return toXi(__this->impl()->pos());
}

XiQPoint* XiQMouseEvent::globalPos(XiQMouseEvent* __thisPtr)
{
    XiQMouseEvent* __this = static_cast<XiQMouseEvent*>(__thisPtr);
    return toXi(__this->impl()->globalPos());
}

XiMouseButton* XiQMouseEvent::button(XiQMouseEvent* __thisPtr)
{
    XiQMouseEvent* __this = static_cast<XiQMouseEvent*>(__thisPtr);
    return toXi(__this->impl()->button());
}

bool XiQMouseEvent::left(XiQMouseEvent* __thisPtr)
{
    XiQMouseEvent* __this = static_cast<XiQMouseEvent*>(__thisPtr);
    return __this->impl()->buttons() & LeftButton;
}

bool XiQMouseEvent::middle(XiQMouseEvent* __thisPtr)
{
    XiQMouseEvent* __this = static_cast<XiQMouseEvent*>(__thisPtr);
    return __this->impl()->buttons() & MidButton;
}

bool XiQMouseEvent::right(XiQMouseEvent* __thisPtr)
{
    XiQMouseEvent* __this = static_cast<XiQMouseEvent*>(__thisPtr);
    return __this->impl()->buttons() & RightButton;
}

XiQMouseEvent_vtable XI(_vt_QMouseEvent);
int XI(_size_QMouseEvent);
void XI(_init_QMouseEvent)()
{
    if (XI(_size_QMouseEvent)) return;
    XI(_init_QInputEvent)();
    XI(_size_QMouseEvent) = sizeof(XiQMouseEvent);
    XI(_vt_QMouseEvent).pos = XiQMouseEvent::pos;
    XI(_vt_QMouseEvent).globalPos = XiQMouseEvent::globalPos;
    XI(_vt_QMouseEvent).button = XiQMouseEvent::button;
    XI(_vt_QMouseEvent).left = XiQMouseEvent::left;
    XI(_vt_QMouseEvent).middle = XiQMouseEvent::middle;
    XI(_vt_QMouseEvent).right = XiQMouseEvent::right;
    XI(_vt_QMouseEvent).shift = XiQMouseEvent::shift;
    XI(_vt_QMouseEvent).ctrl = XiQMouseEvent::ctrl;
    XI(_vt_QMouseEvent).alt = XiQMouseEvent::alt;
    XI(_vt_QMouseEvent).meta = XiQMouseEvent::meta;
    XI(_vt_QMouseEvent).type = XiQMouseEvent::type;
    XI(_vt_QMouseEvent).accept = XiQMouseEvent::accept;
    XI(_vt_QMouseEvent).ignore = XiQMouseEvent::ignore;
    XI(_vt_QMouseEvent).isAccepted = XiQMouseEvent::isAccepted;
    XI(_vt_QMouseEvent).__classOp = XiQMouseEvent::__classOp;
}

QPaintEvent* XiQPaintEvent::impl()
{
    if (!initialized)
        static_cast<XiQPaintEvent_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQPaintEvent::invokeDtor(void* mePtr, void*)
{
    XiQPaintEvent* me = static_cast<XiQPaintEvent*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQPaintEvent::__classOp(ClassOp op, void* memory)
{
    XiQPaintEvent* me = static_cast<XiQPaintEvent*>(memory);
    if (op == CallCtor) {
        new (memory) XiQPaintEvent();
        me->createImpl();
    } else {
        me->~XiQPaintEvent();
    }
}

XiQPaintEvent::XiQPaintEvent()
{
    if (vptr == &XI(_vt_QEvent))
        vptr = &XI(_vt_QPaintEvent);
}

XiQRect* XiQPaintEvent::rect(XiQPaintEvent* __thisPtr)
{
    XiQPaintEvent* __this = static_cast<XiQPaintEvent*>(__thisPtr);
    return toXi(__this->impl()->rect());
}

XiQPaintEvent_vtable XI(_vt_QPaintEvent);
int XI(_size_QPaintEvent);
void XI(_init_QPaintEvent)()
{
    if (XI(_size_QPaintEvent)) return;
    XI(_init_QEvent)();
    XI(_size_QPaintEvent) = sizeof(XiQPaintEvent);
    XI(_vt_QPaintEvent).rect = XiQPaintEvent::rect;
    XI(_vt_QPaintEvent).type = XiQPaintEvent::type;
    XI(_vt_QPaintEvent).accept = XiQPaintEvent::accept;
    XI(_vt_QPaintEvent).ignore = XiQPaintEvent::ignore;
    XI(_vt_QPaintEvent).isAccepted = XiQPaintEvent::isAccepted;
    XI(_vt_QPaintEvent).__classOp = XiQPaintEvent::__classOp;
}

QResizeEvent* XiQResizeEvent::impl()
{
    if (!initialized)
        static_cast<XiQResizeEvent_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQResizeEvent::invokeDtor(void* mePtr, void*)
{
    XiQResizeEvent* me = static_cast<XiQResizeEvent*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQResizeEvent::__classOp(ClassOp op, void* memory)
{
    XiQResizeEvent* me = static_cast<XiQResizeEvent*>(memory);
    if (op == CallCtor) {
        new (memory) XiQResizeEvent();
        me->createImpl();
    } else {
        me->~XiQResizeEvent();
    }
}

XiQResizeEvent::XiQResizeEvent()
{
    if (vptr == &XI(_vt_QEvent))
        vptr = &XI(_vt_QResizeEvent);
}

XiQSize* XiQResizeEvent::oldSize(XiQResizeEvent* __thisPtr)
{
    XiQResizeEvent* __this = static_cast<XiQResizeEvent*>(__thisPtr);
    return toXi(__this->impl()->oldSize());
}

XiQSize* XiQResizeEvent::size(XiQResizeEvent* __thisPtr)
{
    XiQResizeEvent* __this = static_cast<XiQResizeEvent*>(__thisPtr);
    return toXi(__this->impl()->size());
}

XiQResizeEvent_vtable XI(_vt_QResizeEvent);
int XI(_size_QResizeEvent);
void XI(_init_QResizeEvent)()
{
    if (XI(_size_QResizeEvent)) return;
    XI(_init_QEvent)();
    XI(_size_QResizeEvent) = sizeof(XiQResizeEvent);
    XI(_vt_QResizeEvent).oldSize = XiQResizeEvent::oldSize;
    XI(_vt_QResizeEvent).size = XiQResizeEvent::size;
    XI(_vt_QResizeEvent).type = XiQResizeEvent::type;
    XI(_vt_QResizeEvent).accept = XiQResizeEvent::accept;
    XI(_vt_QResizeEvent).ignore = XiQResizeEvent::ignore;
    XI(_vt_QResizeEvent).isAccepted = XiQResizeEvent::isAccepted;
    XI(_vt_QResizeEvent).__classOp = XiQResizeEvent::__classOp;
}

QWheelEvent* XiQWheelEvent::impl()
{
    if (!initialized)
        static_cast<XiQWheelEvent_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQWheelEvent::invokeDtor(void* mePtr, void*)
{
    XiQWheelEvent* me = static_cast<XiQWheelEvent*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQWheelEvent::__classOp(ClassOp op, void* memory)
{
    XiQWheelEvent* me = static_cast<XiQWheelEvent*>(memory);
    if (op == CallCtor) {
        new (memory) XiQWheelEvent();
        me->createImpl();
    } else {
        me->~XiQWheelEvent();
    }
}

XiQWheelEvent::XiQWheelEvent()
{
    if (vptr == &XI(_vt_QInputEvent))
        vptr = &XI(_vt_QWheelEvent);
}

int XiQWheelEvent::delta(XiQWheelEvent* __thisPtr)
{
    XiQWheelEvent* __this = static_cast<XiQWheelEvent*>(__thisPtr);
    return toXi(__this->impl()->delta());
}

XiQPoint* XiQWheelEvent::pos(XiQWheelEvent* __thisPtr)
{
    XiQWheelEvent* __this = static_cast<XiQWheelEvent*>(__thisPtr);
    return toXi(__this->impl()->pos());
}

XiQPoint* XiQWheelEvent::globalPos(XiQWheelEvent* __thisPtr)
{
    XiQWheelEvent* __this = static_cast<XiQWheelEvent*>(__thisPtr);
    return toXi(__this->impl()->globalPos());
}

XiOrientation* XiQWheelEvent::orientation(XiQWheelEvent* __thisPtr)
{
    XiQWheelEvent* __this = static_cast<XiQWheelEvent*>(__thisPtr);
    return toXi(__this->impl()->orientation());
}

XiQWheelEvent_vtable XI(_vt_QWheelEvent);
int XI(_size_QWheelEvent);
void XI(_init_QWheelEvent)()
{
    if (XI(_size_QWheelEvent)) return;
    XI(_init_QInputEvent)();
    XI(_size_QWheelEvent) = sizeof(XiQWheelEvent);
    XI(_vt_QWheelEvent).delta = XiQWheelEvent::delta;
    XI(_vt_QWheelEvent).pos = XiQWheelEvent::pos;
    XI(_vt_QWheelEvent).globalPos = XiQWheelEvent::globalPos;
    XI(_vt_QWheelEvent).orientation = XiQWheelEvent::orientation;
    XI(_vt_QWheelEvent).shift = XiQWheelEvent::shift;
    XI(_vt_QWheelEvent).ctrl = XiQWheelEvent::ctrl;
    XI(_vt_QWheelEvent).alt = XiQWheelEvent::alt;
    XI(_vt_QWheelEvent).meta = XiQWheelEvent::meta;
    XI(_vt_QWheelEvent).type = XiQWheelEvent::type;
    XI(_vt_QWheelEvent).accept = XiQWheelEvent::accept;
    XI(_vt_QWheelEvent).ignore = XiQWheelEvent::ignore;
    XI(_vt_QWheelEvent).isAccepted = XiQWheelEvent::isAccepted;
    XI(_vt_QWheelEvent).__classOp = XiQWheelEvent::__classOp;
}

QPaintDevice* XiQPaintDevice::impl()
{
    if (!initialized)
        static_cast<XiQPaintDevice_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQPaintDevice::invokeDtor(void* mePtr, void*)
{
    XiQPaintDevice* me = static_cast<XiQPaintDevice*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQPaintDevice::__classOp(ClassOp op, void* memory)
{
    XiQPaintDevice* me = static_cast<XiQPaintDevice*>(memory);
    if (op == CallCtor) {
        new (memory) XiQPaintDevice();
        me->createImpl();
    } else {
        me->~XiQPaintDevice();
    }
}

XiQPaintDevice::XiQPaintDevice()
{
    if (!vptr)
        vptr = &XI(_vt_QPaintDevice);
}

    QPaintDevice* XiQPaintDevice::getImpl() {
        if (vtable()->toPixmap(this))
            return static_cast<XiQPixmap*>(this)->getImpl();
        if (vtable()->toWidget(this))
            return static_cast<XiQWidget*>(this)->getImpl();
        return 0;
    }
XiQPixmap* XiQPaintDevice::toPixmap(XiQPaintDevice* __thisPtr)
{
    XiQPaintDevice* __this = static_cast<XiQPaintDevice*>(__thisPtr);
    return 0;
}

XiQWidget* XiQPaintDevice::toWidget(XiQPaintDevice* __thisPtr)
{
    XiQPaintDevice* __this = static_cast<XiQPaintDevice*>(__thisPtr);
    return 0;
}

XiQPaintDevice_vtable XI(_vt_QPaintDevice);
int XI(_size_QPaintDevice);
void XI(_init_QPaintDevice)()
{
    if (XI(_size_QPaintDevice)) return;
    XI(_size_QPaintDevice) = sizeof(XiQPaintDevice);
    XI(_vt_QPaintDevice).toPixmap = XiQPaintDevice::toPixmap;
    XI(_vt_QPaintDevice).toWidget = XiQPaintDevice::toWidget;
    XI(_vt_QPaintDevice).__classOp = XiQPaintDevice::__classOp;
}

QPixmap* XiQPixmap::impl()
{
    if (!initialized)
        static_cast<XiQPixmap_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQPixmap::invokeDtor(void* mePtr, void*)
{
    XiQPixmap* me = static_cast<XiQPixmap*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQPixmap::__classOp(ClassOp op, void* memory)
{
    XiQPixmap* me = static_cast<XiQPixmap*>(memory);
    if (op == CallCtor) {
        new (memory) XiQPixmap();
        me->createImpl();
    } else {
        me->~XiQPixmap();
    }
}

XiQPixmap::XiQPixmap()
{
    if (vptr == &XI(_vt_QPaintDevice))
        vptr = &XI(_vt_QPixmap);
}

XiQPixmap* XiQPixmap::toPixmap(XiQPaintDevice* __thisPtr)
{
    XiQPixmap* __this = static_cast<XiQPixmap*>(__thisPtr);
    return __this;
}

void XiQPixmap::load(XiQPixmap* __thisPtr, XiQString* file)
{
    XiQPixmap* __this = static_cast<XiQPixmap*>(__thisPtr);
    QString file__decode = fromXi(file);
    __this->impl()->load(file__decode);
}

void XiQPixmap::save(XiQPixmap* __thisPtr, XiQString* file)
{
    XiQPixmap* __this = static_cast<XiQPixmap*>(__thisPtr);
    QString file__decode = fromXi(file);
    __this->impl()->save(file__decode);
}

void XiQPixmap::fill(XiQPixmap* __thisPtr, XiQColor* c)
{
    XiQPixmap* __this = static_cast<XiQPixmap*>(__thisPtr);
    QColor c__decode = fromXi(c);
    __this->impl()->fill(c__decode);
}

XiQPixmap* XiQPixmap::copy(XiQPixmap* __thisPtr, XiQRect* rect)
{
    XiQPixmap* __this = static_cast<XiQPixmap*>(__thisPtr);
    QRect rect__decode = fromXi(rect);
    return toXi(__this->impl()->copy(rect__decode));
}

bool XiQPixmap::isNull(XiQPixmap* __thisPtr)
{
    XiQPixmap* __this = static_cast<XiQPixmap*>(__thisPtr);
    return toXi(__this->impl()->isNull());
}

int XiQPixmap::height(XiQPixmap* __thisPtr)
{
    XiQPixmap* __this = static_cast<XiQPixmap*>(__thisPtr);
    return toXi(__this->impl()->height());
}

int XiQPixmap::width(XiQPixmap* __thisPtr)
{
    XiQPixmap* __this = static_cast<XiQPixmap*>(__thisPtr);
    return toXi(__this->impl()->width());
}

XiQSize* XiQPixmap::size(XiQPixmap* __thisPtr)
{
    XiQPixmap* __this = static_cast<XiQPixmap*>(__thisPtr);
    return toXi(__this->impl()->size());
}

XiQPixmap_vtable XI(_vt_QPixmap);
int XI(_size_QPixmap);
void XI(_init_QPixmap)()
{
    if (XI(_size_QPixmap)) return;
    XI(_init_QPaintDevice)();
    XI(_size_QPixmap) = sizeof(XiQPixmap);
    XI(_vt_QPixmap).load = XiQPixmap::load;
    XI(_vt_QPixmap).save = XiQPixmap::save;
    XI(_vt_QPixmap).fill = XiQPixmap::fill;
    XI(_vt_QPixmap).copy = XiQPixmap::copy;
    XI(_vt_QPixmap).isNull = XiQPixmap::isNull;
    XI(_vt_QPixmap).height = XiQPixmap::height;
    XI(_vt_QPixmap).width = XiQPixmap::width;
    XI(_vt_QPixmap).size = XiQPixmap::size;
    XI(_vt_QPixmap).toPixmap = XiQPixmap::toPixmap;
    XI(_vt_QPixmap).toWidget = XiQPixmap::toWidget;
    XI(_vt_QPixmap).__classOp = XiQPixmap::__classOp;
}

XiQPixmap* XI(qpixmap_o7QPixmapii)(int width, int height)
{
    XiQPixmap* p = gcNew<XiQPixmap>();
    p->handle = new QPixmap(width, height);
    return p;
}

XiQPixmap* XI(qpixmapFromFile_o7QPixmapo7QString)(XiQString* f)
{
    XiQPixmap* p = gcNew<XiQPixmap>();
    p->handle = new QPixmap();
    p->handle->load(fromXi(f));
    return p;
}

XiQColor::XiQColor()
{
    if (!vptr)
        vptr = &XI(_vt_QColor);
}

int XiQColor::alpha(XiQColor* __thisPtr)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    return toXi(__this->impl()->alpha());
}

int XiQColor::red(XiQColor* __thisPtr)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    return toXi(__this->impl()->red());
}

int XiQColor::green(XiQColor* __thisPtr)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    return toXi(__this->impl()->green());
}

int XiQColor::blue(XiQColor* __thisPtr)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    return toXi(__this->impl()->blue());
}

void XiQColor::setAlpha(XiQColor* __thisPtr, int param0)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setAlpha(param0__decode);
}

void XiQColor::setRed(XiQColor* __thisPtr, int param0)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setRed(param0__decode);
}

void XiQColor::setGreen(XiQColor* __thisPtr, int param0)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setGreen(param0__decode);
}

void XiQColor::setBlue(XiQColor* __thisPtr, int param0)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setBlue(param0__decode);
}

XiQString* XiQColor::name(XiQColor* __thisPtr)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    return toXi(__this->impl()->name());
}

void XiQColor::setNamedColor(XiQColor* __thisPtr, XiQString* param0)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setNamedColor(param0__decode);
}

bool XiQColor::equals(XiQColor* __thisPtr, XiQColor* other)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    return *__this->impl() == fromXi(other);
}

bool XiQColor::neq(XiQColor* __thisPtr, XiQColor* other)
{
    XiQColor* __this = static_cast<XiQColor*>(__thisPtr);
    return *__this->impl() != fromXi(other);
}

XiQColor_vtable XI(_vt_QColor);
int XI(_size_QColor);
void XI(_init_QColor)()
{
    if (XI(_size_QColor)) return;
    XI(_size_QColor) = sizeof(XiQColor);
    XI(_vt_QColor).alpha = XiQColor::alpha;
    XI(_vt_QColor).red = XiQColor::red;
    XI(_vt_QColor).green = XiQColor::green;
    XI(_vt_QColor).blue = XiQColor::blue;
    XI(_vt_QColor).setAlpha = XiQColor::setAlpha;
    XI(_vt_QColor).setRed = XiQColor::setRed;
    XI(_vt_QColor).setGreen = XiQColor::setGreen;
    XI(_vt_QColor).setBlue = XiQColor::setBlue;
    XI(_vt_QColor).name = XiQColor::name;
    XI(_vt_QColor).setNamedColor = XiQColor::setNamedColor;
    XI(_vt_QColor).equals = XiQColor::equals;
    XI(_vt_QColor).neq = XiQColor::neq;
}

XiQColor* XI(qcolor_o6QColoriii)(int r, int g, int b)
{
    XiQColor* o = gcNew<XiQColor>();
    o->value = QColor::fromRgb(r, g, b);
    return o;
}

XiQColor* XI(qcolorRGBA_o6QColoriiii)(int r, int g, int b, int a)
{
    XiQColor* o = gcNew<XiQColor>();
    o->value = QColor::fromRgb(r, g, b, a);
    return o;
}

XiPenStyle::XiPenStyle()
{
    if (!vptr)
        vptr = &XI(_vt_PenStyle);
}

XiPenStyle* XI(NoPen_o8PenStyle)()
{
    static XiPenStyle* c = gcNew<XiPenStyle>();
    c->value = NoPen;
    return c;
}

XiPenStyle* XI(SolidLine_o8PenStyle)()
{
    static XiPenStyle* c = gcNew<XiPenStyle>();
    c->value = SolidLine;
    return c;
}

XiPenStyle* XI(DashLine_o8PenStyle)()
{
    static XiPenStyle* c = gcNew<XiPenStyle>();
    c->value = DashLine;
    return c;
}

XiPenStyle* XI(DotLine_o8PenStyle)()
{
    static XiPenStyle* c = gcNew<XiPenStyle>();
    c->value = DotLine;
    return c;
}

XiPenStyle* XI(DashDotLine_o8PenStyle)()
{
    static XiPenStyle* c = gcNew<XiPenStyle>();
    c->value = DashDotLine;
    return c;
}

XiPenStyle* XI(DashDotDotLine_o8PenStyle)()
{
    static XiPenStyle* c = gcNew<XiPenStyle>();
    c->value = DashDotDotLine;
    return c;
}

XiPenStyle_vtable XI(_vt_PenStyle);
int XI(_size_PenStyle);
void XI(_init_PenStyle)()
{
    if (XI(_size_PenStyle)) return;
    XI(_size_PenStyle) = sizeof(XiPenStyle);
}

XiPenCapStyle::XiPenCapStyle()
{
    if (!vptr)
        vptr = &XI(_vt_PenCapStyle);
}

XiPenCapStyle* XI(FlatCap_o11PenCapStyle)()
{
    static XiPenCapStyle* c = gcNew<XiPenCapStyle>();
    c->value = FlatCap;
    return c;
}

XiPenCapStyle* XI(SquareCap_o11PenCapStyle)()
{
    static XiPenCapStyle* c = gcNew<XiPenCapStyle>();
    c->value = SquareCap;
    return c;
}

XiPenCapStyle* XI(RoundCap_o11PenCapStyle)()
{
    static XiPenCapStyle* c = gcNew<XiPenCapStyle>();
    c->value = RoundCap;
    return c;
}

XiPenCapStyle_vtable XI(_vt_PenCapStyle);
int XI(_size_PenCapStyle);
void XI(_init_PenCapStyle)()
{
    if (XI(_size_PenCapStyle)) return;
    XI(_size_PenCapStyle) = sizeof(XiPenCapStyle);
}

XiPenJoinStyle::XiPenJoinStyle()
{
    if (!vptr)
        vptr = &XI(_vt_PenJoinStyle);
}

XiPenJoinStyle* XI(MiterJoin_o12PenJoinStyle)()
{
    static XiPenJoinStyle* c = gcNew<XiPenJoinStyle>();
    c->value = MiterJoin;
    return c;
}

XiPenJoinStyle* XI(BevelJoin_o12PenJoinStyle)()
{
    static XiPenJoinStyle* c = gcNew<XiPenJoinStyle>();
    c->value = BevelJoin;
    return c;
}

XiPenJoinStyle* XI(RoundJoin_o12PenJoinStyle)()
{
    static XiPenJoinStyle* c = gcNew<XiPenJoinStyle>();
    c->value = RoundJoin;
    return c;
}

XiPenJoinStyle* XI(SvgMiterJoin_o12PenJoinStyle)()
{
    static XiPenJoinStyle* c = gcNew<XiPenJoinStyle>();
    c->value = SvgMiterJoin;
    return c;
}

XiPenJoinStyle_vtable XI(_vt_PenJoinStyle);
int XI(_size_PenJoinStyle);
void XI(_init_PenJoinStyle)()
{
    if (XI(_size_PenJoinStyle)) return;
    XI(_size_PenJoinStyle) = sizeof(XiPenJoinStyle);
}

XiQPen::XiQPen()
{
    if (!vptr)
        vptr = &XI(_vt_QPen);
}

XiQBrush* XiQPen::brush(XiQPen* __thisPtr)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    return toXi(__this->impl()->brush());
}

XiPenCapStyle* XiQPen::capStyle(XiQPen* __thisPtr)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    return toXi(__this->impl()->capStyle());
}

XiQColor* XiQPen::color(XiQPen* __thisPtr)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    return toXi(__this->impl()->color());
}

bool XiQPen::isCosmetic(XiQPen* __thisPtr)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    return toXi(__this->impl()->isCosmetic());
}

bool XiQPen::isSolid(XiQPen* __thisPtr)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    return toXi(__this->impl()->isSolid());
}

XiPenJoinStyle* XiQPen::joinStyle(XiQPen* __thisPtr)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    return toXi(__this->impl()->joinStyle());
}

void XiQPen::setBrush(XiQPen* __thisPtr, XiQBrush* param0)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    QBrush param0__decode = fromXi(param0);
    __this->impl()->setBrush(param0__decode);
}

void XiQPen::setCapStyle(XiQPen* __thisPtr, XiPenCapStyle* param0)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    PenCapStyle param0__decode = fromXi(param0);
    __this->impl()->setCapStyle(param0__decode);
}

void XiQPen::setColor(XiQPen* __thisPtr, XiQColor* param0)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    QColor param0__decode = fromXi(param0);
    __this->impl()->setColor(param0__decode);
}

void XiQPen::setCosmetic(XiQPen* __thisPtr, bool param0)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setCosmetic(param0__decode);
}

void XiQPen::setJoinStyle(XiQPen* __thisPtr, XiPenJoinStyle* param0)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    PenJoinStyle param0__decode = fromXi(param0);
    __this->impl()->setJoinStyle(param0__decode);
}

void XiQPen::setStyle(XiQPen* __thisPtr, XiPenStyle* param0)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    PenStyle param0__decode = fromXi(param0);
    __this->impl()->setStyle(param0__decode);
}

void XiQPen::setWidth(XiQPen* __thisPtr, int param0)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setWidth(param0__decode);
}

XiPenStyle* XiQPen::style(XiQPen* __thisPtr)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    return toXi(__this->impl()->style());
}

int XiQPen::width(XiQPen* __thisPtr)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    return toXi(__this->impl()->width());
}

bool XiQPen::equals(XiQPen* __thisPtr, XiQPen* other)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    return *__this->impl() == fromXi(other);
}

bool XiQPen::neq(XiQPen* __thisPtr, XiQPen* other)
{
    XiQPen* __this = static_cast<XiQPen*>(__thisPtr);
    return *__this->impl() != fromXi(other);
}

XiQPen_vtable XI(_vt_QPen);
int XI(_size_QPen);
void XI(_init_QPen)()
{
    if (XI(_size_QPen)) return;
    XI(_size_QPen) = sizeof(XiQPen);
    XI(_vt_QPen).brush = XiQPen::brush;
    XI(_vt_QPen).capStyle = XiQPen::capStyle;
    XI(_vt_QPen).color = XiQPen::color;
    XI(_vt_QPen).isCosmetic = XiQPen::isCosmetic;
    XI(_vt_QPen).isSolid = XiQPen::isSolid;
    XI(_vt_QPen).joinStyle = XiQPen::joinStyle;
    XI(_vt_QPen).setBrush = XiQPen::setBrush;
    XI(_vt_QPen).setCapStyle = XiQPen::setCapStyle;
    XI(_vt_QPen).setColor = XiQPen::setColor;
    XI(_vt_QPen).setCosmetic = XiQPen::setCosmetic;
    XI(_vt_QPen).setJoinStyle = XiQPen::setJoinStyle;
    XI(_vt_QPen).setStyle = XiQPen::setStyle;
    XI(_vt_QPen).setWidth = XiQPen::setWidth;
    XI(_vt_QPen).style = XiQPen::style;
    XI(_vt_QPen).width = XiQPen::width;
    XI(_vt_QPen).equals = XiQPen::equals;
    XI(_vt_QPen).neq = XiQPen::neq;
}

XiQPen* XI(qpen_o4QPeno6QColor)(XiQColor* c)
{
    XiQPen* pen = gcNew<XiQPen>();
    pen->value.setColor(fromXi(c));
    return pen;
}

XiQBrush::XiQBrush()
{
    if (!vptr)
        vptr = &XI(_vt_QBrush);
}

XiQColor* XiQBrush::color(XiQBrush* __thisPtr)
{
    XiQBrush* __this = static_cast<XiQBrush*>(__thisPtr);
    return toXi(__this->impl()->color());
}

XiQPixmap* XiQBrush::texture(XiQBrush* __thisPtr)
{
    XiQBrush* __this = static_cast<XiQBrush*>(__thisPtr);
    return toXi(__this->impl()->texture());
}

void XiQBrush::setColor(XiQBrush* __thisPtr, XiQColor* c)
{
    XiQBrush* __this = static_cast<XiQBrush*>(__thisPtr);
    QColor c__decode = fromXi(c);
    __this->impl()->setColor(c__decode);
}

void XiQBrush::setTexture(XiQBrush* __thisPtr, XiQPixmap* p)
{
    XiQBrush* __this = static_cast<XiQBrush*>(__thisPtr);
    __this->impl()->setTexture(*fromXi(p));
}

XiQBrush_vtable XI(_vt_QBrush);
int XI(_size_QBrush);
void XI(_init_QBrush)()
{
    if (XI(_size_QBrush)) return;
    XI(_size_QBrush) = sizeof(XiQBrush);
    XI(_vt_QBrush).color = XiQBrush::color;
    XI(_vt_QBrush).texture = XiQBrush::texture;
    XI(_vt_QBrush).setColor = XiQBrush::setColor;
    XI(_vt_QBrush).setTexture = XiQBrush::setTexture;
}

XiQBrush* XI(qbrush_o6QBrusho6QColor)(XiQColor* c)
{
    XiQBrush* b = gcNew<XiQBrush>();
    b->value = QBrush(fromXi(c));
    return b;
}

XiQBrush* XI(qtextureBrush_o6QBrusho7QPixmap)(XiQPixmap* p)
{
    XiQBrush* b = gcNew<XiQBrush>();
    b->value = QBrush(*fromXi(p));
    return b;
}

XiFontStyle::XiFontStyle()
{
    if (!vptr)
        vptr = &XI(_vt_FontStyle);
}

XiFontStyle* XI(StyleNormal_o9FontStyle)()
{
    static XiFontStyle* c = gcNew<XiFontStyle>();
    c->value = QFont::StyleNormal;
    return c;
}

XiFontStyle* XI(StyleItalic_o9FontStyle)()
{
    static XiFontStyle* c = gcNew<XiFontStyle>();
    c->value = QFont::StyleItalic;
    return c;
}

XiFontStyle* XI(StyleOblique_o9FontStyle)()
{
    static XiFontStyle* c = gcNew<XiFontStyle>();
    c->value = QFont::StyleOblique;
    return c;
}

XiFontStyle_vtable XI(_vt_FontStyle);
int XI(_size_FontStyle);
void XI(_init_FontStyle)()
{
    if (XI(_size_FontStyle)) return;
    XI(_size_FontStyle) = sizeof(XiFontStyle);
}

XiQFont::XiQFont()
{
    if (!vptr)
        vptr = &XI(_vt_QFont);
}

bool XiQFont::bold(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->bold());
}

void XiQFont::setBold(XiQFont* __thisPtr, bool param0)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setBold(param0__decode);
}

bool XiQFont::italic(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->italic());
}

void XiQFont::setItalic(XiQFont* __thisPtr, bool param0)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setItalic(param0__decode);
}

XiQString* XiQFont::family(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->family());
}

void XiQFont::setFamily(XiQFont* __thisPtr, XiQString* param0)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setFamily(param0__decode);
}

bool XiQFont::fixedPitch(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->fixedPitch());
}

void XiQFont::setFixedPitch(XiQFont* __thisPtr, bool param0)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setFixedPitch(param0__decode);
}

bool XiQFont::kerning(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->kerning());
}

void XiQFont::setKerning(XiQFont* __thisPtr, bool param0)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setKerning(param0__decode);
}

int XiQFont::pixelSize(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->pixelSize());
}

void XiQFont::setPixelSize(XiQFont* __thisPtr, int param0)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setPixelSize(param0__decode);
}

int XiQFont::pointSize(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->pointSize());
}

void XiQFont::setPointSize(XiQFont* __thisPtr, int param0)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setPointSize(param0__decode);
}

bool XiQFont::overline(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->overline());
}

bool XiQFont::underline(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->underline());
}

bool XiQFont::strikeOut(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->strikeOut());
}

void XiQFont::setOverline(XiQFont* __thisPtr, bool param0)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setOverline(param0__decode);
}

void XiQFont::setUnderline(XiQFont* __thisPtr, bool param0)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setUnderline(param0__decode);
}

void XiQFont::setStrikeOut(XiQFont* __thisPtr, bool param0)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setStrikeOut(param0__decode);
}

XiQString* XiQFont::toString(XiQFont* __thisPtr)
{
    XiQFont* __this = static_cast<XiQFont*>(__thisPtr);
    return toXi(__this->impl()->toString());
}

XiQFont_vtable XI(_vt_QFont);
int XI(_size_QFont);
void XI(_init_QFont)()
{
    if (XI(_size_QFont)) return;
    XI(_size_QFont) = sizeof(XiQFont);
    XI(_vt_QFont).bold = XiQFont::bold;
    XI(_vt_QFont).setBold = XiQFont::setBold;
    XI(_vt_QFont).italic = XiQFont::italic;
    XI(_vt_QFont).setItalic = XiQFont::setItalic;
    XI(_vt_QFont).family = XiQFont::family;
    XI(_vt_QFont).setFamily = XiQFont::setFamily;
    XI(_vt_QFont).fixedPitch = XiQFont::fixedPitch;
    XI(_vt_QFont).setFixedPitch = XiQFont::setFixedPitch;
    XI(_vt_QFont).kerning = XiQFont::kerning;
    XI(_vt_QFont).setKerning = XiQFont::setKerning;
    XI(_vt_QFont).pixelSize = XiQFont::pixelSize;
    XI(_vt_QFont).setPixelSize = XiQFont::setPixelSize;
    XI(_vt_QFont).pointSize = XiQFont::pointSize;
    XI(_vt_QFont).setPointSize = XiQFont::setPointSize;
    XI(_vt_QFont).overline = XiQFont::overline;
    XI(_vt_QFont).underline = XiQFont::underline;
    XI(_vt_QFont).strikeOut = XiQFont::strikeOut;
    XI(_vt_QFont).setOverline = XiQFont::setOverline;
    XI(_vt_QFont).setUnderline = XiQFont::setUnderline;
    XI(_vt_QFont).setStrikeOut = XiQFont::setStrikeOut;
    XI(_vt_QFont).toString = XiQFont::toString;
}

XiQFont* XI(qfont_o5QFont)()
{
    return gcNew<XiQFont>();
}

XiTextElideMode::XiTextElideMode()
{
    if (!vptr)
        vptr = &XI(_vt_TextElideMode);
}

XiTextElideMode* XI(ElideLeft_o13TextElideMode)()
{
    static XiTextElideMode* c = gcNew<XiTextElideMode>();
    c->value = ElideLeft;
    return c;
}

XiTextElideMode* XI(ElideRight_o13TextElideMode)()
{
    static XiTextElideMode* c = gcNew<XiTextElideMode>();
    c->value = ElideRight;
    return c;
}

XiTextElideMode* XI(ElideMiddle_o13TextElideMode)()
{
    static XiTextElideMode* c = gcNew<XiTextElideMode>();
    c->value = ElideMiddle;
    return c;
}

XiTextElideMode* XI(ElideNone_o13TextElideMode)()
{
    static XiTextElideMode* c = gcNew<XiTextElideMode>();
    c->value = ElideNone;
    return c;
}

XiTextElideMode_vtable XI(_vt_TextElideMode);
int XI(_size_TextElideMode);
void XI(_init_TextElideMode)()
{
    if (XI(_size_TextElideMode)) return;
    XI(_size_TextElideMode) = sizeof(XiTextElideMode);
}

QFontMetrics* XiQFontMetrics::impl()
{
    if (!initialized)
        static_cast<XiQFontMetrics_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQFontMetrics::invokeDtor(void* mePtr, void*)
{
    XiQFontMetrics* me = static_cast<XiQFontMetrics*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQFontMetrics::__classOp(ClassOp op, void* memory)
{
    XiQFontMetrics* me = static_cast<XiQFontMetrics*>(memory);
    if (op == CallCtor) {
        new (memory) XiQFontMetrics();
        me->createImpl();
    } else {
        me->~XiQFontMetrics();
    }
}

XiQFontMetrics::XiQFontMetrics()
{
    if (!vptr)
        vptr = &XI(_vt_QFontMetrics);
}

int XiQFontMetrics::ascent(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->ascent());
}

int XiQFontMetrics::descent(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->descent());
}

int XiQFontMetrics::height(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->height());
}

int XiQFontMetrics::leading(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->leading());
}

int XiQFontMetrics::lineSpacing(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->lineSpacing());
}

int XiQFontMetrics::xHeight(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->xHeight());
}

int XiQFontMetrics::averageCharWidth(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->averageCharWidth());
}

int XiQFontMetrics::maxWidth(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->maxWidth());
}

bool XiQFontMetrics::inFont(XiQFontMetrics* __thisPtr, int ch)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    int ch__decode = fromXi(ch);
    return toXi(__this->impl()->inFont(ch__decode));
}

int XiQFontMetrics::leftBearing(XiQFontMetrics* __thisPtr, int ch)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    int ch__decode = fromXi(ch);
    return toXi(__this->impl()->leftBearing(ch__decode));
}

int XiQFontMetrics::minLeftBearing(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->minLeftBearing());
}

int XiQFontMetrics::rightBearing(XiQFontMetrics* __thisPtr, int ch)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    int ch__decode = fromXi(ch);
    return toXi(__this->impl()->rightBearing(ch__decode));
}

int XiQFontMetrics::minRightBearing(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->minRightBearing());
}

int XiQFontMetrics::lineWidth(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->lineWidth());
}

int XiQFontMetrics::overlinePos(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->overlinePos());
}

int XiQFontMetrics::strikeOutPos(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->strikeOutPos());
}

int XiQFontMetrics::underlinePos(XiQFontMetrics* __thisPtr)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    return toXi(__this->impl()->underlinePos());
}

XiQRect* XiQFontMetrics::boundingRect(XiQFontMetrics* __thisPtr, XiQString* param0)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    return toXi(__this->impl()->boundingRect(param0__decode));
}

XiQRect* XiQFontMetrics::tightBoundingRect(XiQFontMetrics* __thisPtr, XiQString* param0)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    return toXi(__this->impl()->tightBoundingRect(param0__decode));
}

int XiQFontMetrics::width(XiQFontMetrics* __thisPtr, XiQString* param0)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    return toXi(__this->impl()->width(param0__decode));
}

XiQString* XiQFontMetrics::elidedText(XiQFontMetrics* __thisPtr, XiQString* text, XiTextElideMode* mode, int w)
{
    XiQFontMetrics* __this = static_cast<XiQFontMetrics*>(__thisPtr);
    QString text__decode = fromXi(text);
    TextElideMode mode__decode = fromXi(mode);
    int w__decode = fromXi(w);
    return toXi(__this->impl()->elidedText(text__decode, mode__decode, w__decode));
}

XiQFontMetrics_vtable XI(_vt_QFontMetrics);
int XI(_size_QFontMetrics);
void XI(_init_QFontMetrics)()
{
    if (XI(_size_QFontMetrics)) return;
    XI(_size_QFontMetrics) = sizeof(XiQFontMetrics);
    XI(_vt_QFontMetrics).ascent = XiQFontMetrics::ascent;
    XI(_vt_QFontMetrics).descent = XiQFontMetrics::descent;
    XI(_vt_QFontMetrics).height = XiQFontMetrics::height;
    XI(_vt_QFontMetrics).leading = XiQFontMetrics::leading;
    XI(_vt_QFontMetrics).lineSpacing = XiQFontMetrics::lineSpacing;
    XI(_vt_QFontMetrics).xHeight = XiQFontMetrics::xHeight;
    XI(_vt_QFontMetrics).averageCharWidth = XiQFontMetrics::averageCharWidth;
    XI(_vt_QFontMetrics).maxWidth = XiQFontMetrics::maxWidth;
    XI(_vt_QFontMetrics).inFont = XiQFontMetrics::inFont;
    XI(_vt_QFontMetrics).leftBearing = XiQFontMetrics::leftBearing;
    XI(_vt_QFontMetrics).minLeftBearing = XiQFontMetrics::minLeftBearing;
    XI(_vt_QFontMetrics).rightBearing = XiQFontMetrics::rightBearing;
    XI(_vt_QFontMetrics).minRightBearing = XiQFontMetrics::minRightBearing;
    XI(_vt_QFontMetrics).lineWidth = XiQFontMetrics::lineWidth;
    XI(_vt_QFontMetrics).overlinePos = XiQFontMetrics::overlinePos;
    XI(_vt_QFontMetrics).strikeOutPos = XiQFontMetrics::strikeOutPos;
    XI(_vt_QFontMetrics).underlinePos = XiQFontMetrics::underlinePos;
    XI(_vt_QFontMetrics).boundingRect = XiQFontMetrics::boundingRect;
    XI(_vt_QFontMetrics).tightBoundingRect = XiQFontMetrics::tightBoundingRect;
    XI(_vt_QFontMetrics).width = XiQFontMetrics::width;
    XI(_vt_QFontMetrics).elidedText = XiQFontMetrics::elidedText;
    XI(_vt_QFontMetrics).__classOp = XiQFontMetrics::__classOp;
}

XiQFontMetrics* XI(qfontMetrics_o12QFontMetricso5QFont)(XiQFont* f)
{
    XiQFontMetrics* fm = gcNew<XiQFontMetrics>();
    fm->handle = new QFontMetrics(fromXi(f));
    return fm;
}

QPainter* XiQPainter::impl()
{
    if (!initialized)
        static_cast<XiQPainter_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQPainter::invokeDtor(void* mePtr, void*)
{
    XiQPainter* me = static_cast<XiQPainter*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQPainter::__classOp(ClassOp op, void* memory)
{
    XiQPainter* me = static_cast<XiQPainter*>(memory);
    if (op == CallCtor) {
        new (memory) XiQPainter();
        me->createImpl();
    } else {
        me->~XiQPainter();
    }
}

XiQPainter::XiQPainter()
{
    if (!vptr)
        vptr = &XI(_vt_QPainter);
}

void XiQPainter::begin(XiQPainter* __thisPtr, XiQPaintDevice* param0)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QPaintDevice* param0__decode = fromXi(param0);
    __this->impl()->begin(param0__decode);
}

void XiQPainter::end(XiQPainter* __thisPtr)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    __this->impl()->end();
}

bool XiQPainter::isActive(XiQPainter* __thisPtr)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    return toXi(__this->impl()->isActive());
}

void XiQPainter::setHighQuality(XiQPainter* __thisPtr, bool on)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    __this->impl()->setRenderHints(QPainter::Antialiasing |
                                   QPainter::SmoothPixmapTransform, on);
}

void XiQPainter::save(XiQPainter* __thisPtr)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    __this->impl()->save();
}

void XiQPainter::restore(XiQPainter* __thisPtr)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    __this->impl()->restore();
}

XiQPoint* XiQPainter::brushOrigin(XiQPainter* __thisPtr)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    return toXi(__this->impl()->brushOrigin());
}

void XiQPainter::setBrushOrigin(XiQPainter* __thisPtr, XiQPoint* param0)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QPoint param0__decode = fromXi(param0);
    __this->impl()->setBrushOrigin(param0__decode);
}

XiQFont* XiQPainter::font(XiQPainter* __thisPtr)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    return toXi(__this->impl()->font());
}

void XiQPainter::setFont(XiQPainter* __thisPtr, XiQFont* f)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QFont f__decode = fromXi(f);
    __this->impl()->setFont(f__decode);
}

int XiQPainter::opacity(XiQPainter* __thisPtr)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    return qRound(__this->impl()->opacity() * 100);
}

void XiQPainter::setOpacity(XiQPainter* __thisPtr, int o)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    __this->impl()->setOpacity(o / 100.0);
}

XiQPen* XiQPainter::pen(XiQPainter* __thisPtr)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    return toXi(__this->impl()->pen());
}

void XiQPainter::setPen(XiQPainter* __thisPtr, XiQPen* param0)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QPen param0__decode = fromXi(param0);
    __this->impl()->setPen(param0__decode);
}

XiQBrush* XiQPainter::brush(XiQPainter* __thisPtr)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    return toXi(__this->impl()->brush());
}

void XiQPainter::setBrush(XiQPainter* __thisPtr, XiQBrush* param0)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QBrush param0__decode = fromXi(param0);
    __this->impl()->setBrush(param0__decode);
}

void XiQPainter::drawArc(XiQPainter* __thisPtr, XiQRect* rect, int starAngle, int spanAngle)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QRect rect__decode = fromXi(rect);
    int starAngle__decode = fromXi(starAngle);
    int spanAngle__decode = fromXi(spanAngle);
    __this->impl()->drawArc(rect__decode, starAngle__decode, spanAngle__decode);
}

void XiQPainter::drawChord(XiQPainter* __thisPtr, XiQRect* rect, int starAngle, int spanAngle)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QRect rect__decode = fromXi(rect);
    int starAngle__decode = fromXi(starAngle);
    int spanAngle__decode = fromXi(spanAngle);
    __this->impl()->drawChord(rect__decode, starAngle__decode, spanAngle__decode);
}

void XiQPainter::drawEllipse(XiQPainter* __thisPtr, XiQRect* rect)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QRect rect__decode = fromXi(rect);
    __this->impl()->drawEllipse(rect__decode);
}

void XiQPainter::drawPie(XiQPainter* __thisPtr, XiQRect* rect, int starAngle, int spanAngle)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QRect rect__decode = fromXi(rect);
    int starAngle__decode = fromXi(starAngle);
    int spanAngle__decode = fromXi(spanAngle);
    __this->impl()->drawPie(rect__decode, starAngle__decode, spanAngle__decode);
}

    static QPoint* toPointArray(void* points, int* len) {
        *len = reinterpret_cast<int*>(points)[-1];
        XiQPoint** pp = reinterpret_cast<XiQPoint**>(points);

        QPoint* arr = new QPoint[*len];
        for (int i = 0; i < *len; ++i)
            arr[i] = pp[i]->value;
        return arr;
    }
void XiQPainter::drawConvexPolygon(XiQPainter* __thisPtr, void* points)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    int len;
    QPoint* arr = toPointArray(points, &len);
    __this->impl()->drawConvexPolygon(arr, len);
    delete[] arr;
}

void XiQPainter::drawPolygon(XiQPainter* __thisPtr, void* points)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    int len;
    QPoint* arr = toPointArray(points, &len);
    __this->impl()->drawPolygon(arr, len);
    delete[] arr;
}

void XiQPainter::drawRect(XiQPainter* __thisPtr, XiQRect* r)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QRect r__decode = fromXi(r);
    __this->impl()->drawRect(r__decode);
}

void XiQPainter::eraseRect(XiQPainter* __thisPtr, XiQRect* r)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QRect r__decode = fromXi(r);
    __this->impl()->eraseRect(r__decode);
}

void XiQPainter::fillRect(XiQPainter* __thisPtr, XiQRect* r, XiQBrush* b)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QRect r__decode = fromXi(r);
    QBrush b__decode = fromXi(b);
    __this->impl()->fillRect(r__decode, b__decode);
}

void XiQPainter::drawPixmap(XiQPainter* __thisPtr, XiQPoint* p, XiQPixmap* pm)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    __this->impl()->drawPixmap(fromXi(p), *fromXi(pm));
}

void XiQPainter::drawPixmapPortion(XiQPainter* __thisPtr, XiQPoint* p, XiQPixmap* pm, XiQRect* portion)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    __this->impl()->drawPixmap(fromXi(p), *fromXi(pm), fromXi(portion));
}

void XiQPainter::drawScaledPixmapPortion(XiQPainter* __thisPtr, XiQRect* d, XiQPixmap* pm, XiQRect* portion)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    __this->impl()->drawPixmap(fromXi(d), *fromXi(pm), fromXi(portion));
}

void XiQPainter::drawTiledPixmap(XiQPainter* __thisPtr, XiQRect* d, XiQPixmap* p)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    __this->impl()->drawTiledPixmap(fromXi(d), *fromXi(p));
}

void XiQPainter::drawTiledOffsetPixmap(XiQPainter* __thisPtr, XiQRect* d, XiQPixmap* p, XiQPoint* origin)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    __this->impl()->drawTiledPixmap(fromXi(d), *fromXi(p), fromXi(origin));
}

void XiQPainter::drawPoint(XiQPainter* __thisPtr, XiQPoint* p)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->drawPoint(p__decode);
}

void XiQPainter::drawLine(XiQPainter* __thisPtr, XiQPoint* p1, XiQPoint* p2)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QPoint p1__decode = fromXi(p1);
    QPoint p2__decode = fromXi(p2);
    __this->impl()->drawLine(p1__decode, p2__decode);
}

void XiQPainter::drawText(XiQPainter* __thisPtr, XiQPoint* p, XiQString* text)
{
    XiQPainter* __this = static_cast<XiQPainter*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    QString text__decode = fromXi(text);
    __this->impl()->drawText(p__decode, text__decode);
}

XiQPainter_vtable XI(_vt_QPainter);
int XI(_size_QPainter);
void XI(_init_QPainter)()
{
    if (XI(_size_QPainter)) return;
    XI(_size_QPainter) = sizeof(XiQPainter);
    XI(_vt_QPainter).begin = XiQPainter::begin;
    XI(_vt_QPainter).end = XiQPainter::end;
    XI(_vt_QPainter).isActive = XiQPainter::isActive;
    XI(_vt_QPainter).setHighQuality = XiQPainter::setHighQuality;
    XI(_vt_QPainter).save = XiQPainter::save;
    XI(_vt_QPainter).restore = XiQPainter::restore;
    XI(_vt_QPainter).brushOrigin = XiQPainter::brushOrigin;
    XI(_vt_QPainter).setBrushOrigin = XiQPainter::setBrushOrigin;
    XI(_vt_QPainter).font = XiQPainter::font;
    XI(_vt_QPainter).setFont = XiQPainter::setFont;
    XI(_vt_QPainter).opacity = XiQPainter::opacity;
    XI(_vt_QPainter).setOpacity = XiQPainter::setOpacity;
    XI(_vt_QPainter).pen = XiQPainter::pen;
    XI(_vt_QPainter).setPen = XiQPainter::setPen;
    XI(_vt_QPainter).brush = XiQPainter::brush;
    XI(_vt_QPainter).setBrush = XiQPainter::setBrush;
    XI(_vt_QPainter).drawArc = XiQPainter::drawArc;
    XI(_vt_QPainter).drawChord = XiQPainter::drawChord;
    XI(_vt_QPainter).drawEllipse = XiQPainter::drawEllipse;
    XI(_vt_QPainter).drawPie = XiQPainter::drawPie;
    XI(_vt_QPainter).drawConvexPolygon = XiQPainter::drawConvexPolygon;
    XI(_vt_QPainter).drawPolygon = XiQPainter::drawPolygon;
    XI(_vt_QPainter).drawRect = XiQPainter::drawRect;
    XI(_vt_QPainter).eraseRect = XiQPainter::eraseRect;
    XI(_vt_QPainter).fillRect = XiQPainter::fillRect;
    XI(_vt_QPainter).drawPixmap = XiQPainter::drawPixmap;
    XI(_vt_QPainter).drawPixmapPortion = XiQPainter::drawPixmapPortion;
    XI(_vt_QPainter).drawScaledPixmapPortion = XiQPainter::drawScaledPixmapPortion;
    XI(_vt_QPainter).drawTiledPixmap = XiQPainter::drawTiledPixmap;
    XI(_vt_QPainter).drawTiledOffsetPixmap = XiQPainter::drawTiledOffsetPixmap;
    XI(_vt_QPainter).drawPoint = XiQPainter::drawPoint;
    XI(_vt_QPainter).drawLine = XiQPainter::drawLine;
    XI(_vt_QPainter).drawText = XiQPainter::drawText;
    XI(_vt_QPainter).__classOp = XiQPainter::__classOp;
}

XiQPainter* XI(qpainter_o8QPaintero12QPaintDevice)(XiQPaintDevice* target)
{
    XiQPainter* p = gcNew<XiQPainter>();
    p->handle = new QPainter(fromXi(target));
    return p;
}

QLayout* XiQLayout::impl()
{
    if (!initialized)
        static_cast<XiQLayout_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQLayout::invokeDtor(void* mePtr, void*)
{
    XiQLayout* me = static_cast<XiQLayout*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQLayout::__classOp(ClassOp op, void* memory)
{
    XiQLayout* me = static_cast<XiQLayout*>(memory);
    if (op == CallCtor) {
        new (memory) XiQLayout();
        me->createImpl();
    } else {
        me->~XiQLayout();
    }
}

XiQLayout::XiQLayout()
{
    if (!vptr)
        vptr = &XI(_vt_QLayout);
}

void XiQLayout::removeWidget(XiQLayout* __thisPtr, XiQWidget* iw)
{
    XiQLayout* __this = static_cast<XiQLayout*>(__thisPtr);
    QWidget* w = fromXi(iw);
    __this->impl()->removeWidget(w);
    w->setParent(0);
    iw->handle.parentChange();
}

XiQLayout_vtable XI(_vt_QLayout);
int XI(_size_QLayout);
void XI(_init_QLayout)()
{
    if (XI(_size_QLayout)) return;
    XI(_size_QLayout) = sizeof(XiQLayout);
    XI(_vt_QLayout).removeWidget = XiQLayout::removeWidget;
    XI(_vt_QLayout).__classOp = XiQLayout::__classOp;
}

XiBoxLayoutDirection::XiBoxLayoutDirection()
{
    if (!vptr)
        vptr = &XI(_vt_BoxLayoutDirection);
}

XiBoxLayoutDirection* XI(LeftToRight_o18BoxLayoutDirection)()
{
    static XiBoxLayoutDirection* c = gcNew<XiBoxLayoutDirection>();
    c->value = QBoxLayout::LeftToRight;
    return c;
}

XiBoxLayoutDirection* XI(RightToLeft_o18BoxLayoutDirection)()
{
    static XiBoxLayoutDirection* c = gcNew<XiBoxLayoutDirection>();
    c->value = QBoxLayout::RightToLeft;
    return c;
}

XiBoxLayoutDirection* XI(TopToBottom_o18BoxLayoutDirection)()
{
    static XiBoxLayoutDirection* c = gcNew<XiBoxLayoutDirection>();
    c->value = QBoxLayout::TopToBottom;
    return c;
}

XiBoxLayoutDirection* XI(BottomToTop_o18BoxLayoutDirection)()
{
    static XiBoxLayoutDirection* c = gcNew<XiBoxLayoutDirection>();
    c->value = QBoxLayout::BottomToTop;
    return c;
}

XiBoxLayoutDirection_vtable XI(_vt_BoxLayoutDirection);
int XI(_size_BoxLayoutDirection);
void XI(_init_BoxLayoutDirection)()
{
    if (XI(_size_BoxLayoutDirection)) return;
    XI(_size_BoxLayoutDirection) = sizeof(XiBoxLayoutDirection);
}

QBoxLayout* XiQBoxLayout::impl()
{
    if (!initialized)
        static_cast<XiQBoxLayout_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQBoxLayout::invokeDtor(void* mePtr, void*)
{
    XiQBoxLayout* me = static_cast<XiQBoxLayout*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQBoxLayout::__classOp(ClassOp op, void* memory)
{
    XiQBoxLayout* me = static_cast<XiQBoxLayout*>(memory);
    if (op == CallCtor) {
        new (memory) XiQBoxLayout();
        me->createImpl();
    } else {
        me->~XiQBoxLayout();
    }
}

XiQBoxLayout::XiQBoxLayout()
{
    if (vptr == &XI(_vt_QLayout))
        vptr = &XI(_vt_QBoxLayout);
}

XiBoxLayoutDirection* XiQBoxLayout::direction(XiQBoxLayout* __thisPtr)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    return toXi(__this->impl()->direction());
}

void XiQBoxLayout::setDirection(XiQBoxLayout* __thisPtr, XiBoxLayoutDirection* d)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    BoxLayoutDirection d__decode = fromXi(d);
    __this->impl()->setDirection(d__decode);
}

void XiQBoxLayout::addLayout(XiQBoxLayout* __thisPtr, XiQLayout* child)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    QLayout* k = fromXi(child);
    __this->impl()->addLayout(k);
    child->handle.parentChange();
}

void XiQBoxLayout::addStretch(XiQBoxLayout* __thisPtr)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    __this->impl()->addStretch();
}

void XiQBoxLayout::addWidget(XiQBoxLayout* __thisPtr, XiQWidget* w)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    QWidget* qw = fromXi(w);
    __this->impl()->addWidget(qw);
    w->handle.parentChange();
}

void XiQBoxLayout::insertLayout(XiQBoxLayout* __thisPtr, int idx, XiQLayout* l)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    QLayout* k = fromXi(l);
    __this->impl()->insertLayout(idx, k);
    l->handle.parentChange();
}

void XiQBoxLayout::insertStretch(XiQBoxLayout* __thisPtr, int idx)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    int idx__decode = fromXi(idx);
    __this->impl()->insertStretch(idx__decode);
}

void XiQBoxLayout::insertWidget(XiQBoxLayout* __thisPtr, int idx, XiQWidget* w)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    QWidget* qw = fromXi(w);
    __this->impl()->insertWidget(idx, qw);
    w->handle.parentChange();
}

void XiQBoxLayout::addSpacing(XiQBoxLayout* __thisPtr, int param0)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->addSpacing(param0__decode);
}

int XiQBoxLayout::lastIdx(XiQBoxLayout* __thisPtr)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    return __this->impl()->count() - 1;
}

void XiQBoxLayout::setStretch(XiQBoxLayout* __thisPtr, int idx, int stretch)
{
    XiQBoxLayout* __this = static_cast<XiQBoxLayout*>(__thisPtr);
    int idx__decode = fromXi(idx);
    int stretch__decode = fromXi(stretch);
    __this->impl()->setStretch(idx__decode, stretch__decode);
}

XiQBoxLayout_vtable XI(_vt_QBoxLayout);
int XI(_size_QBoxLayout);
void XI(_init_QBoxLayout)()
{
    if (XI(_size_QBoxLayout)) return;
    XI(_init_QLayout)();
    XI(_size_QBoxLayout) = sizeof(XiQBoxLayout);
    XI(_vt_QBoxLayout).direction = XiQBoxLayout::direction;
    XI(_vt_QBoxLayout).setDirection = XiQBoxLayout::setDirection;
    XI(_vt_QBoxLayout).addLayout = XiQBoxLayout::addLayout;
    XI(_vt_QBoxLayout).addStretch = XiQBoxLayout::addStretch;
    XI(_vt_QBoxLayout).addWidget = XiQBoxLayout::addWidget;
    XI(_vt_QBoxLayout).insertLayout = XiQBoxLayout::insertLayout;
    XI(_vt_QBoxLayout).insertStretch = XiQBoxLayout::insertStretch;
    XI(_vt_QBoxLayout).insertWidget = XiQBoxLayout::insertWidget;
    XI(_vt_QBoxLayout).addSpacing = XiQBoxLayout::addSpacing;
    XI(_vt_QBoxLayout).lastIdx = XiQBoxLayout::lastIdx;
    XI(_vt_QBoxLayout).setStretch = XiQBoxLayout::setStretch;
    XI(_vt_QBoxLayout).removeWidget = XiQBoxLayout::removeWidget;
    XI(_vt_QBoxLayout).__classOp = XiQBoxLayout::__classOp;
}

QHBoxLayout* XiQHBoxLayout::impl()
{
    if (!initialized)
        static_cast<XiQHBoxLayout_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQHBoxLayout::invokeDtor(void* mePtr, void*)
{
    XiQHBoxLayout* me = static_cast<XiQHBoxLayout*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQHBoxLayout::__classOp(ClassOp op, void* memory)
{
    XiQHBoxLayout* me = static_cast<XiQHBoxLayout*>(memory);
    if (op == CallCtor) {
        new (memory) XiQHBoxLayout();
        me->createImpl();
    } else {
        me->~XiQHBoxLayout();
    }
}

XiQHBoxLayout::XiQHBoxLayout()
{
    if (vptr == &XI(_vt_QBoxLayout))
        vptr = &XI(_vt_QHBoxLayout);
}

XiQHBoxLayout_vtable XI(_vt_QHBoxLayout);
int XI(_size_QHBoxLayout);
void XI(_init_QHBoxLayout)()
{
    if (XI(_size_QHBoxLayout)) return;
    XI(_init_QBoxLayout)();
    XI(_size_QHBoxLayout) = sizeof(XiQHBoxLayout);
    XI(_vt_QHBoxLayout).direction = XiQHBoxLayout::direction;
    XI(_vt_QHBoxLayout).setDirection = XiQHBoxLayout::setDirection;
    XI(_vt_QHBoxLayout).addLayout = XiQHBoxLayout::addLayout;
    XI(_vt_QHBoxLayout).addStretch = XiQHBoxLayout::addStretch;
    XI(_vt_QHBoxLayout).addWidget = XiQHBoxLayout::addWidget;
    XI(_vt_QHBoxLayout).insertLayout = XiQHBoxLayout::insertLayout;
    XI(_vt_QHBoxLayout).insertStretch = XiQHBoxLayout::insertStretch;
    XI(_vt_QHBoxLayout).insertWidget = XiQHBoxLayout::insertWidget;
    XI(_vt_QHBoxLayout).addSpacing = XiQHBoxLayout::addSpacing;
    XI(_vt_QHBoxLayout).lastIdx = XiQHBoxLayout::lastIdx;
    XI(_vt_QHBoxLayout).setStretch = XiQHBoxLayout::setStretch;
    XI(_vt_QHBoxLayout).removeWidget = XiQHBoxLayout::removeWidget;
    XI(_vt_QHBoxLayout).__classOp = XiQHBoxLayout::__classOp;
}

XiQHBoxLayout* XI(qhboxLayout_o11QHBoxLayout)()
{
    XiQHBoxLayout* l = gcNew<XiQHBoxLayout>();
    l->createImpl();
    return l;
}

QVBoxLayout* XiQVBoxLayout::impl()
{
    if (!initialized)
        static_cast<XiQVBoxLayout_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQVBoxLayout::invokeDtor(void* mePtr, void*)
{
    XiQVBoxLayout* me = static_cast<XiQVBoxLayout*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQVBoxLayout::__classOp(ClassOp op, void* memory)
{
    XiQVBoxLayout* me = static_cast<XiQVBoxLayout*>(memory);
    if (op == CallCtor) {
        new (memory) XiQVBoxLayout();
        me->createImpl();
    } else {
        me->~XiQVBoxLayout();
    }
}

XiQVBoxLayout::XiQVBoxLayout()
{
    if (vptr == &XI(_vt_QBoxLayout))
        vptr = &XI(_vt_QVBoxLayout);
}

XiQVBoxLayout_vtable XI(_vt_QVBoxLayout);
int XI(_size_QVBoxLayout);
void XI(_init_QVBoxLayout)()
{
    if (XI(_size_QVBoxLayout)) return;
    XI(_init_QBoxLayout)();
    XI(_size_QVBoxLayout) = sizeof(XiQVBoxLayout);
    XI(_vt_QVBoxLayout).direction = XiQVBoxLayout::direction;
    XI(_vt_QVBoxLayout).setDirection = XiQVBoxLayout::setDirection;
    XI(_vt_QVBoxLayout).addLayout = XiQVBoxLayout::addLayout;
    XI(_vt_QVBoxLayout).addStretch = XiQVBoxLayout::addStretch;
    XI(_vt_QVBoxLayout).addWidget = XiQVBoxLayout::addWidget;
    XI(_vt_QVBoxLayout).insertLayout = XiQVBoxLayout::insertLayout;
    XI(_vt_QVBoxLayout).insertStretch = XiQVBoxLayout::insertStretch;
    XI(_vt_QVBoxLayout).insertWidget = XiQVBoxLayout::insertWidget;
    XI(_vt_QVBoxLayout).addSpacing = XiQVBoxLayout::addSpacing;
    XI(_vt_QVBoxLayout).lastIdx = XiQVBoxLayout::lastIdx;
    XI(_vt_QVBoxLayout).setStretch = XiQVBoxLayout::setStretch;
    XI(_vt_QVBoxLayout).removeWidget = XiQVBoxLayout::removeWidget;
    XI(_vt_QVBoxLayout).__classOp = XiQVBoxLayout::__classOp;
}

XiQVBoxLayout* XI(qvboxLayout_o11QVBoxLayout)()
{
    XiQVBoxLayout* l = gcNew<XiQVBoxLayout>();
    l->createImpl();
    return l;
}

QGridLayout* XiQGridLayout::impl()
{
    if (!initialized)
        static_cast<XiQGridLayout_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQGridLayout::invokeDtor(void* mePtr, void*)
{
    XiQGridLayout* me = static_cast<XiQGridLayout*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQGridLayout::__classOp(ClassOp op, void* memory)
{
    XiQGridLayout* me = static_cast<XiQGridLayout*>(memory);
    if (op == CallCtor) {
        new (memory) XiQGridLayout();
        me->createImpl();
    } else {
        me->~XiQGridLayout();
    }
}

XiQGridLayout::XiQGridLayout()
{
    if (vptr == &XI(_vt_QLayout))
        vptr = &XI(_vt_QGridLayout);
}

void XiQGridLayout::addLayout(XiQGridLayout* __thisPtr, XiQLayout* l, int row, int col)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    QLayout* ql = fromXi(l);
    __this->impl()->addLayout(ql, row, col);
    l->handle.parentChange();
}

void XiQGridLayout::addWidget(XiQGridLayout* __thisPtr, XiQWidget* w, int row, int col)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    QWidget* qw = fromXi(w);
    __this->impl()->addWidget(qw, row, col);
    w->handle.parentChange();
}

XiQRect* XiQGridLayout::cellRect(XiQGridLayout* __thisPtr, int row, int col)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int row__decode = fromXi(row);
    int col__decode = fromXi(col);
    return toXi(__this->impl()->cellRect(row__decode, col__decode));
}

int XiQGridLayout::columnCount(XiQGridLayout* __thisPtr)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    return toXi(__this->impl()->columnCount());
}

int XiQGridLayout::columnMinimumWidth(XiQGridLayout* __thisPtr, int col)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int col__decode = fromXi(col);
    return toXi(__this->impl()->columnMinimumWidth(col__decode));
}

void XiQGridLayout::setColumnMinimumWidth(XiQGridLayout* __thisPtr, int col, int m)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int col__decode = fromXi(col);
    int m__decode = fromXi(m);
    __this->impl()->setColumnMinimumWidth(col__decode, m__decode);
}

int XiQGridLayout::columnStretch(XiQGridLayout* __thisPtr, int col)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int col__decode = fromXi(col);
    return toXi(__this->impl()->columnStretch(col__decode));
}

void XiQGridLayout::setColumnStretch(XiQGridLayout* __thisPtr, int col, int s)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int col__decode = fromXi(col);
    int s__decode = fromXi(s);
    __this->impl()->setColumnStretch(col__decode, s__decode);
}

int XiQGridLayout::rowCount(XiQGridLayout* __thisPtr)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    return toXi(__this->impl()->rowCount());
}

int XiQGridLayout::rowMinimumHeight(XiQGridLayout* __thisPtr, int row)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int row__decode = fromXi(row);
    return toXi(__this->impl()->rowMinimumHeight(row__decode));
}

void XiQGridLayout::setRowMinimumHeight(XiQGridLayout* __thisPtr, int row, int m)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int row__decode = fromXi(row);
    int m__decode = fromXi(m);
    __this->impl()->setRowMinimumHeight(row__decode, m__decode);
}

int XiQGridLayout::rowStretch(XiQGridLayout* __thisPtr, int row)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int row__decode = fromXi(row);
    return toXi(__this->impl()->rowStretch(row__decode));
}

void XiQGridLayout::setRowStretch(XiQGridLayout* __thisPtr, int row, int s)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int row__decode = fromXi(row);
    int s__decode = fromXi(s);
    __this->impl()->setRowStretch(row__decode, s__decode);
}

int XiQGridLayout::horizontalSpacing(XiQGridLayout* __thisPtr)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    return toXi(__this->impl()->horizontalSpacing());
}

void XiQGridLayout::setHorizontalSpacing(XiQGridLayout* __thisPtr, int s)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int s__decode = fromXi(s);
    __this->impl()->setHorizontalSpacing(s__decode);
}

int XiQGridLayout::spacing(XiQGridLayout* __thisPtr)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    return toXi(__this->impl()->spacing());
}

void XiQGridLayout::setSpacing(XiQGridLayout* __thisPtr, int s)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int s__decode = fromXi(s);
    __this->impl()->setSpacing(s__decode);
}

void XiQGridLayout::setVerticalSpacing(XiQGridLayout* __thisPtr, int s)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    int s__decode = fromXi(s);
    __this->impl()->setVerticalSpacing(s__decode);
}

int XiQGridLayout::verticalSpacing(XiQGridLayout* __thisPtr)
{
    XiQGridLayout* __this = static_cast<XiQGridLayout*>(__thisPtr);
    return toXi(__this->impl()->verticalSpacing());
}

XiQGridLayout_vtable XI(_vt_QGridLayout);
int XI(_size_QGridLayout);
void XI(_init_QGridLayout)()
{
    if (XI(_size_QGridLayout)) return;
    XI(_init_QLayout)();
    XI(_size_QGridLayout) = sizeof(XiQGridLayout);
    XI(_vt_QGridLayout).addLayout = XiQGridLayout::addLayout;
    XI(_vt_QGridLayout).addWidget = XiQGridLayout::addWidget;
    XI(_vt_QGridLayout).cellRect = XiQGridLayout::cellRect;
    XI(_vt_QGridLayout).columnCount = XiQGridLayout::columnCount;
    XI(_vt_QGridLayout).columnMinimumWidth = XiQGridLayout::columnMinimumWidth;
    XI(_vt_QGridLayout).setColumnMinimumWidth = XiQGridLayout::setColumnMinimumWidth;
    XI(_vt_QGridLayout).columnStretch = XiQGridLayout::columnStretch;
    XI(_vt_QGridLayout).setColumnStretch = XiQGridLayout::setColumnStretch;
    XI(_vt_QGridLayout).rowCount = XiQGridLayout::rowCount;
    XI(_vt_QGridLayout).rowMinimumHeight = XiQGridLayout::rowMinimumHeight;
    XI(_vt_QGridLayout).setRowMinimumHeight = XiQGridLayout::setRowMinimumHeight;
    XI(_vt_QGridLayout).rowStretch = XiQGridLayout::rowStretch;
    XI(_vt_QGridLayout).setRowStretch = XiQGridLayout::setRowStretch;
    XI(_vt_QGridLayout).horizontalSpacing = XiQGridLayout::horizontalSpacing;
    XI(_vt_QGridLayout).setHorizontalSpacing = XiQGridLayout::setHorizontalSpacing;
    XI(_vt_QGridLayout).spacing = XiQGridLayout::spacing;
    XI(_vt_QGridLayout).setSpacing = XiQGridLayout::setSpacing;
    XI(_vt_QGridLayout).setVerticalSpacing = XiQGridLayout::setVerticalSpacing;
    XI(_vt_QGridLayout).verticalSpacing = XiQGridLayout::verticalSpacing;
    XI(_vt_QGridLayout).removeWidget = XiQGridLayout::removeWidget;
    XI(_vt_QGridLayout).__classOp = XiQGridLayout::__classOp;
}

XiQGridLayout* XI(qgridLayout_o11QGridLayout)()
{
    XiQGridLayout* l = gcNew<XiQGridLayout>();
    l->createImpl();
    return l;
}

QStackedLayout* XiQStackedLayout::impl()
{
    if (!initialized)
        static_cast<XiQStackedLayout_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQStackedLayout::invokeDtor(void* mePtr, void*)
{
    XiQStackedLayout* me = static_cast<XiQStackedLayout*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQStackedLayout::__classOp(ClassOp op, void* memory)
{
    XiQStackedLayout* me = static_cast<XiQStackedLayout*>(memory);
    if (op == CallCtor) {
        new (memory) XiQStackedLayout();
        me->createImpl();
    } else {
        me->~XiQStackedLayout();
    }
}

XiQStackedLayout::XiQStackedLayout()
{
    if (vptr == &XI(_vt_QLayout))
        vptr = &XI(_vt_QStackedLayout);
}

int XiQStackedLayout::addWidget(XiQStackedLayout* __thisPtr, XiQWidget* w)
{
    XiQStackedLayout* __this = static_cast<XiQStackedLayout*>(__thisPtr);
    QWidget* qw = fromXi(w);
    int r = __this->impl()->addWidget(qw);
    w->handle.parentChange();
    return r;
}

int XiQStackedLayout::insertWidget(XiQStackedLayout* __thisPtr, int idx, XiQWidget* w)
{
    XiQStackedLayout* __this = static_cast<XiQStackedLayout*>(__thisPtr);
    QWidget* qw = fromXi(w);
    int r = __this->impl()->insertWidget(idx, qw);
    w->handle.parentChange();
    return r;
}

int XiQStackedLayout::currentIndex(XiQStackedLayout* __thisPtr)
{
    XiQStackedLayout* __this = static_cast<XiQStackedLayout*>(__thisPtr);
    return toXi(__this->impl()->currentIndex());
}

void XiQStackedLayout::setCurrentIndex(XiQStackedLayout* __thisPtr, int param0)
{
    XiQStackedLayout* __this = static_cast<XiQStackedLayout*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setCurrentIndex(param0__decode);
}

void XiQStackedLayout::setCurrentWidget(XiQStackedLayout* __thisPtr, XiQWidget* w)
{
    XiQStackedLayout* __this = static_cast<XiQStackedLayout*>(__thisPtr);
    QWidget* w__decode = fromXi(w);
    __this->impl()->setCurrentWidget(w__decode);
}

XiQWidget* XiQStackedLayout::currentWidget(XiQStackedLayout* __thisPtr)
{
    XiQStackedLayout* __this = static_cast<XiQStackedLayout*>(__thisPtr);
    return toXi(__this->impl()->currentWidget());
}

XiQStackedLayout_vtable XI(_vt_QStackedLayout);
int XI(_size_QStackedLayout);
void XI(_init_QStackedLayout)()
{
    if (XI(_size_QStackedLayout)) return;
    XI(_init_QLayout)();
    XI(_size_QStackedLayout) = sizeof(XiQStackedLayout);
    XI(_vt_QStackedLayout).addWidget = XiQStackedLayout::addWidget;
    XI(_vt_QStackedLayout).insertWidget = XiQStackedLayout::insertWidget;
    XI(_vt_QStackedLayout).currentIndex = XiQStackedLayout::currentIndex;
    XI(_vt_QStackedLayout).setCurrentIndex = XiQStackedLayout::setCurrentIndex;
    XI(_vt_QStackedLayout).setCurrentWidget = XiQStackedLayout::setCurrentWidget;
    XI(_vt_QStackedLayout).currentWidget = XiQStackedLayout::currentWidget;
    XI(_vt_QStackedLayout).removeWidget = XiQStackedLayout::removeWidget;
    XI(_vt_QStackedLayout).__classOp = XiQStackedLayout::__classOp;
}

XiQStackedLayout* XI(qstackedLayout_o14QStackedLayout)()
{
    XiQStackedLayout* l = gcNew<XiQStackedLayout>();
    l->createImpl();
    return l;
}

QTimer* XiQTimer::impl()
{
    if (!initialized)
        static_cast<XiQTimer_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQTimer::invokeDtor(void* mePtr, void*)
{
    XiQTimer* me = static_cast<XiQTimer*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQTimer::__classOp(ClassOp op, void* memory)
{
    XiQTimer* me = static_cast<XiQTimer*>(memory);
    if (op == CallCtor) {
        new (memory) XiQTimer();
        me->createImpl();
    } else {
        me->~XiQTimer();
    }
}

XiQTimer::XiQTimer()
{
    if (!vptr)
        vptr = &XI(_vt_QTimer);
}

int XiQTimer::interval(XiQTimer* __thisPtr)
{
    XiQTimer* __this = static_cast<XiQTimer*>(__thisPtr);
    return toXi(__this->impl()->interval());
}

bool XiQTimer::isActive(XiQTimer* __thisPtr)
{
    XiQTimer* __this = static_cast<XiQTimer*>(__thisPtr);
    return toXi(__this->impl()->isActive());
}

bool XiQTimer::isSingleShot(XiQTimer* __thisPtr)
{
    XiQTimer* __this = static_cast<XiQTimer*>(__thisPtr);
    return toXi(__this->impl()->isSingleShot());
}

void XiQTimer::setInterval(XiQTimer* __thisPtr, int param0)
{
    XiQTimer* __this = static_cast<XiQTimer*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setInterval(param0__decode);
}

void XiQTimer::setSingleShot(XiQTimer* __thisPtr, bool param0)
{
    XiQTimer* __this = static_cast<XiQTimer*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setSingleShot(param0__decode);
}

void XiQTimer::start(XiQTimer* __thisPtr)
{
    XiQTimer* __this = static_cast<XiQTimer*>(__thisPtr);
    __this->impl()->start();
}

void XiQTimer::stop(XiQTimer* __thisPtr)
{
    XiQTimer* __this = static_cast<XiQTimer*>(__thisPtr);
    __this->impl()->stop();
}

void XiQTimer::timeout(XiQTimer* __thisPtr)
{
    XiQTimer* __this = static_cast<XiQTimer*>(__thisPtr);
}

void XiQTimer::addTimerListener(XiQTimer* __thisPtr, XiTimerListener* tl)
{
    XiQTimer* __this = static_cast<XiQTimer*>(__thisPtr);
    __this->timerListeners.append(tl);
}

XiQTimer_vtable XI(_vt_QTimer);
int XI(_size_QTimer);
void XI(_init_QTimer)()
{
    if (XI(_size_QTimer)) return;
    XI(_size_QTimer) = sizeof(XiQTimer);
    XI(_vt_QTimer).interval = XiQTimer::interval;
    XI(_vt_QTimer).isActive = XiQTimer::isActive;
    XI(_vt_QTimer).isSingleShot = XiQTimer::isSingleShot;
    XI(_vt_QTimer).setInterval = XiQTimer::setInterval;
    XI(_vt_QTimer).setSingleShot = XiQTimer::setSingleShot;
    XI(_vt_QTimer).start = XiQTimer::start;
    XI(_vt_QTimer).stop = XiQTimer::stop;
    XI(_vt_QTimer).timeout = XiQTimer::timeout;
    XI(_vt_QTimer).addTimerListener = XiQTimer::addTimerListener;
    XI(_vt_QTimer).__classOp = XiQTimer::__classOp;
}

XiQTimer* XI(qtimer_o6QTimer)()
{
    XiQTimer* t = gcNew<XiQTimer>();
    t->createImpl();
    return t;
}

XiTimerListener::XiTimerListener()
{
    if (!vptr)
        vptr = &XI(_vt_TimerListener);
}

void XiTimerListener::timeout(XiTimerListener* __thisPtr, XiQTimer* timer)
{
    XiTimerListener* __this = static_cast<XiTimerListener*>(__thisPtr);
}

XiTimerListener_vtable XI(_vt_TimerListener);
int XI(_size_TimerListener);
void XI(_init_TimerListener)()
{
    if (XI(_size_TimerListener)) return;
    XI(_size_TimerListener) = sizeof(XiTimerListener);
    XI(_vt_TimerListener).timeout = XiTimerListener::timeout;
}

QAction* XiQAction::impl()
{
    if (!initialized)
        static_cast<XiQAction_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQAction::invokeDtor(void* mePtr, void*)
{
    XiQAction* me = static_cast<XiQAction*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQAction::__classOp(ClassOp op, void* memory)
{
    XiQAction* me = static_cast<XiQAction*>(memory);
    if (op == CallCtor) {
        new (memory) XiQAction();
        me->createImpl();
    } else {
        me->~XiQAction();
    }
}

XiQAction::XiQAction()
{
    if (!vptr)
        vptr = &XI(_vt_QAction);
}

bool XiQAction::isCheckable(XiQAction* __thisPtr)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    return toXi(__this->impl()->isCheckable());
}

void XiQAction::setCheckable(XiQAction* __thisPtr, bool param0)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setCheckable(param0__decode);
}

bool XiQAction::isChecked(XiQAction* __thisPtr)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    return toXi(__this->impl()->isChecked());
}

void XiQAction::setChecked(XiQAction* __thisPtr, bool param0)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setChecked(param0__decode);
}

bool XiQAction::isEnabled(XiQAction* __thisPtr)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    return toXi(__this->impl()->isEnabled());
}

void XiQAction::setEnabled(XiQAction* __thisPtr, bool param0)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setEnabled(param0__decode);
}

XiQFont* XiQAction::font(XiQAction* __thisPtr)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    return toXi(__this->impl()->font());
}

void XiQAction::setFont(XiQAction* __thisPtr, XiQFont* param0)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    QFont param0__decode = fromXi(param0);
    __this->impl()->setFont(param0__decode);
}

XiQIcon* XiQAction::icon(XiQAction* __thisPtr)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    return toXi(__this->impl()->icon());
}

void XiQAction::setIcon(XiQAction* __thisPtr, XiQIcon* param0)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    QIcon param0__decode = fromXi(param0);
    __this->impl()->setIcon(param0__decode);
}

XiQString* XiQAction::text(XiQAction* __thisPtr)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    return toXi(__this->impl()->text());
}

void XiQAction::setText(XiQAction* __thisPtr, XiQString* param0)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setText(param0__decode);
}

XiQString* XiQAction::toolTip(XiQAction* __thisPtr)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    return toXi(__this->impl()->toolTip());
}

void XiQAction::setToolTip(XiQAction* __thisPtr, XiQString* param0)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setToolTip(param0__decode);
}

XiQMenu* XiQAction::menu(XiQAction* __thisPtr)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    return toXi(__this->impl()->menu());
}

void XiQAction::setMenu(XiQAction* __thisPtr, XiQMenu* param0)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    QMenu* param0__decode = fromXi(param0);
    __this->impl()->setMenu(param0__decode);
}

void XiQAction::triggered(XiQAction* __thisPtr)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
}

void XiQAction::addActionListener(XiQAction* __thisPtr, XiActionListener* l)
{
    XiQAction* __this = static_cast<XiQAction*>(__thisPtr);
    __this->actionListeners.append(l);
}

XiQAction_vtable XI(_vt_QAction);
int XI(_size_QAction);
void XI(_init_QAction)()
{
    if (XI(_size_QAction)) return;
    XI(_size_QAction) = sizeof(XiQAction);
    XI(_vt_QAction).isCheckable = XiQAction::isCheckable;
    XI(_vt_QAction).setCheckable = XiQAction::setCheckable;
    XI(_vt_QAction).isChecked = XiQAction::isChecked;
    XI(_vt_QAction).setChecked = XiQAction::setChecked;
    XI(_vt_QAction).isEnabled = XiQAction::isEnabled;
    XI(_vt_QAction).setEnabled = XiQAction::setEnabled;
    XI(_vt_QAction).font = XiQAction::font;
    XI(_vt_QAction).setFont = XiQAction::setFont;
    XI(_vt_QAction).icon = XiQAction::icon;
    XI(_vt_QAction).setIcon = XiQAction::setIcon;
    XI(_vt_QAction).text = XiQAction::text;
    XI(_vt_QAction).setText = XiQAction::setText;
    XI(_vt_QAction).toolTip = XiQAction::toolTip;
    XI(_vt_QAction).setToolTip = XiQAction::setToolTip;
    XI(_vt_QAction).menu = XiQAction::menu;
    XI(_vt_QAction).setMenu = XiQAction::setMenu;
    XI(_vt_QAction).triggered = XiQAction::triggered;
    XI(_vt_QAction).addActionListener = XiQAction::addActionListener;
    XI(_vt_QAction).__classOp = XiQAction::__classOp;
}

XiQAction* XI(qaction_o7QActiono7QString)(XiQString* text)
{
    XiQAction* a = gcNew<XiQAction>();
    a->setObject(new QAction(fromXi(text), 0));
    return a;
}

XiActionListener::XiActionListener()
{
    if (!vptr)
        vptr = &XI(_vt_ActionListener);
}

void XiActionListener::triggered(XiActionListener* __thisPtr, XiQAction* a)
{
    XiActionListener* __this = static_cast<XiActionListener*>(__thisPtr);
}

XiActionListener_vtable XI(_vt_ActionListener);
int XI(_size_ActionListener);
void XI(_init_ActionListener)()
{
    if (XI(_size_ActionListener)) return;
    XI(_size_ActionListener) = sizeof(XiActionListener);
    XI(_vt_ActionListener).triggered = XiActionListener::triggered;
}

XiQIcon::XiQIcon()
{
    if (!vptr)
        vptr = &XI(_vt_QIcon);
}

XiQIcon_vtable XI(_vt_QIcon);
int XI(_size_QIcon);
void XI(_init_QIcon)()
{
    if (XI(_size_QIcon)) return;
    XI(_size_QIcon) = sizeof(XiQIcon);
}

XiQIcon* XI(qicon_o5QIcono7QString)(XiQString* fname)
{
    XiQIcon* i = gcNew<XiQIcon>();
    i->value = QIcon(fromXi(fname));
    return i;
}

XiQIcon* XI(qiconFromPixmap_o5QIcono7QPixmap)(XiQPixmap* pmap)
{
    XiQIcon* i = gcNew<XiQIcon>();
    i->value = QIcon(*fromXi(pmap));
    return i;
}

XiQIcon* XI(qiconNull_o5QIcon)()
{
    return gcNew<XiQIcon>();
}

XiQIcon* XI(qiconStandard_o5QIcono12StandardIcon)(XiStandardIcon* id)
{
    return toXi(qApp->style()->standardIcon(fromXi(id)));
}

XiFocusPolicy::XiFocusPolicy()
{
    if (!vptr)
        vptr = &XI(_vt_FocusPolicy);
}

XiFocusPolicy* XI(TabFocus_o11FocusPolicy)()
{
    static XiFocusPolicy* c = gcNew<XiFocusPolicy>();
    c->value = TabFocus;
    return c;
}

XiFocusPolicy* XI(ClickFocus_o11FocusPolicy)()
{
    static XiFocusPolicy* c = gcNew<XiFocusPolicy>();
    c->value = ClickFocus;
    return c;
}

XiFocusPolicy* XI(StrongFocus_o11FocusPolicy)()
{
    static XiFocusPolicy* c = gcNew<XiFocusPolicy>();
    c->value = StrongFocus;
    return c;
}

XiFocusPolicy* XI(WheelFocus_o11FocusPolicy)()
{
    static XiFocusPolicy* c = gcNew<XiFocusPolicy>();
    c->value = WheelFocus;
    return c;
}

XiFocusPolicy* XI(NoFocus_o11FocusPolicy)()
{
    static XiFocusPolicy* c = gcNew<XiFocusPolicy>();
    c->value = NoFocus;
    return c;
}

XiFocusPolicy_vtable XI(_vt_FocusPolicy);
int XI(_size_FocusPolicy);
void XI(_init_FocusPolicy)()
{
    if (XI(_size_FocusPolicy)) return;
    XI(_size_FocusPolicy) = sizeof(XiFocusPolicy);
}

QWidget* XiQWidget::impl()
{
    if (!initialized)
        static_cast<XiQWidget_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQWidget::invokeDtor(void* mePtr, void*)
{
    XiQWidget* me = static_cast<XiQWidget*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQWidget::__classOp(ClassOp op, void* memory)
{
    XiQWidget* me = static_cast<XiQWidget*>(memory);
    if (op == CallCtor) {
        new (memory) XiQWidget();
        me->createImpl();
    } else {
        me->~XiQWidget();
    }
}

XiQWidget::XiQWidget()
{
    if (vptr == &XI(_vt_QPaintDevice))
        vptr = &XI(_vt_QWidget);
}

    // To protect a QObject which doesn't get parented by Qt,
    // we add a PinHolder object as child of the logical parent,
    // and have that hold an Xi pin for the logical kid
    class PinHolder: public QObject
    {
        GCPin pin;
    public:
        PinHolder(QObject* logicalParent, Xiobj* logicalKid):
            QObject(logicalParent), pin(logicalKid)
        {}
    };

    void XiQWidget::protectObject(XiQWidget* kid) {
        QWidget* qKid = kid->impl();
        if (qKid->parent()) {
            kid->handle.parentChange();
            return;
        }
        // We're forced to pin..
        new PinHolder(impl(), kid);
    }

    void XiQWidget::protectObject(XiQAction* kid) {
        QAction* qKid = kid->impl();
        if (qKid->parent()) {
            kid->handle.parentChange();
            return;
        }
        // We're forced to pin..
        new PinHolder(impl(), kid);
    }
XiQWidget* XiQWidget::toWidget(XiQPaintDevice* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return __this;
}

void XiQWidget::show(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->show();
}

void XiQWidget::hide(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->hide();
}

void XiQWidget::raise(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->raise();
}

void XiQWidget::lower(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->lower();
}

void XiQWidget::close(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->close();
}

bool XiQWidget::isEnabled(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->isEnabled());
}

void XiQWidget::setEnabled(XiQWidget* __thisPtr, bool param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setEnabled(param0__decode);
}

void XiQWidget::setLayout(XiQWidget* __thisPtr, XiQLayout* layout)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QLayout* ql = fromXi(layout);
    __this->impl()->setLayout(ql);
    layout->handle.parentChange();
}

bool XiQWidget::isWindowModified(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->isWindowModified());
}

void XiQWidget::setWindowModified(XiQWidget* __thisPtr, bool param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setWindowModified(param0__decode);
}

XiQString* XiQWidget::windowTitle(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->windowTitle());
}

void XiQWidget::setWindowTitle(XiQWidget* __thisPtr, XiQString* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setWindowTitle(param0__decode);
}

XiQIcon* XiQWidget::windowIcon(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->windowIcon());
}

void XiQWidget::setWindowIcon(XiQWidget* __thisPtr, XiQIcon* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QIcon param0__decode = fromXi(param0);
    __this->impl()->setWindowIcon(param0__decode);
}

bool XiQWidget::isActiveWindow(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->isActiveWindow());
}

void XiQWidget::activateWindow(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->activateWindow();
}

bool XiQWidget::isMinimized(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->isMinimized());
}

bool XiQWidget::isMaximized(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->isMaximized());
}

bool XiQWidget::isFullScreen(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->isFullScreen());
}

void XiQWidget::showMinimized(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->showMinimized();
}

void XiQWidget::showMaximized(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->showMaximized();
}

void XiQWidget::showFullScreen(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->showFullScreen();
}

void XiQWidget::showNormal(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->showNormal();
}

void XiQWidget::update(XiQWidget* __thisPtr, XiQRect* r)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QRect r__decode = fromXi(r);
    __this->impl()->update(r__decode);
}

void XiQWidget::repaint(XiQWidget* __thisPtr, XiQRect* r)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QRect r__decode = fromXi(r);
    __this->impl()->repaint(r__decode);
}

void XiQWidget::setMinimumSize(XiQWidget* __thisPtr, XiQSize* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QSize param0__decode = fromXi(param0);
    __this->impl()->setMinimumSize(param0__decode);
}

XiQSize* XiQWidget::minimumSize(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->minimumSize());
}

void XiQWidget::setMaximumSize(XiQWidget* __thisPtr, XiQSize* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QSize param0__decode = fromXi(param0);
    __this->impl()->setMaximumSize(param0__decode);
}

XiQSize* XiQWidget::maximumSize(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->maximumSize());
}

void XiQWidget::setFixedSize(XiQWidget* __thisPtr, XiQSize* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QSize param0__decode = fromXi(param0);
    __this->impl()->setFixedSize(param0__decode);
}

void XiQWidget::resize(XiQWidget* __thisPtr, XiQSize* s)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QSize s__decode = fromXi(s);
    __this->impl()->resize(s__decode);
}

void XiQWidget::adjustSize(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->adjustSize();
}

XiQPoint* XiQWidget::pos(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->pos());
}

void XiQWidget::move(XiQWidget* __thisPtr, XiQPoint* p)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    __this->impl()->move(p__decode);
}

XiQSize* XiQWidget::sizeHint(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->sizeHint());
}

XiQSize* XiQWidget::minimumSizeHint(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->minimumSizeHint());
}

XiQPoint* XiQWidget::mapFrom(XiQWidget* __thisPtr, XiQWidget* w, XiQPoint* param1)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QWidget* w__decode = fromXi(w);
    QPoint param1__decode = fromXi(param1);
    return toXi(__this->impl()->mapFrom(w__decode, param1__decode));
}

XiQPoint* XiQWidget::mapFromGlobal(XiQWidget* __thisPtr, XiQPoint* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QPoint param0__decode = fromXi(param0);
    return toXi(__this->impl()->mapFromGlobal(param0__decode));
}

XiQPoint* XiQWidget::mapFromParent(XiQWidget* __thisPtr, XiQPoint* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QPoint param0__decode = fromXi(param0);
    return toXi(__this->impl()->mapFromParent(param0__decode));
}

XiQPoint* XiQWidget::mapTo(XiQWidget* __thisPtr, XiQWidget* w, XiQPoint* param1)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QWidget* w__decode = fromXi(w);
    QPoint param1__decode = fromXi(param1);
    return toXi(__this->impl()->mapTo(w__decode, param1__decode));
}

XiQPoint* XiQWidget::mapToGlobal(XiQWidget* __thisPtr, XiQPoint* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QPoint param0__decode = fromXi(param0);
    return toXi(__this->impl()->mapToGlobal(param0__decode));
}

XiQPoint* XiQWidget::mapToParent(XiQWidget* __thisPtr, XiQPoint* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QPoint param0__decode = fromXi(param0);
    return toXi(__this->impl()->mapToParent(param0__decode));
}

void XiQWidget::setFont(XiQWidget* __thisPtr, XiQFont* f)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QFont f__decode = fromXi(f);
    __this->impl()->setFont(f__decode);
}

XiQFont* XiQWidget::font(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->font());
}

XiQString* XiQWidget::styleSheet(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->styleSheet());
}

void XiQWidget::setStyleSheet(XiQWidget* __thisPtr, XiQString* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setStyleSheet(param0__decode);
}

XiFocusPolicy* XiQWidget::focusPolicy(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->focusPolicy());
}

void XiQWidget::setFocusPolicy(XiQWidget* __thisPtr, XiFocusPolicy* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    FocusPolicy param0__decode = fromXi(param0);
    __this->impl()->setFocusPolicy(param0__decode);
}

void XiQWidget::setFocus(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->setFocus();
}

void XiQWidget::clearFocus(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->impl()->clearFocus();
}

bool XiQWidget::hasFocus(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->hasFocus());
}

XiQString* XiQWidget::toolTip(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->toolTip());
}

void XiQWidget::setToolTip(XiQWidget* __thisPtr, XiQString* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setToolTip(param0__decode);
}

XiQString* XiQWidget::whatsThis(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->whatsThis());
}

void XiQWidget::setWhatsThis(XiQWidget* __thisPtr, XiQString* param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setWhatsThis(param0__decode);
}

bool XiQWidget::hasMouseTracking(XiQWidget* __thisPtr)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    return toXi(__this->impl()->hasMouseTracking());
}

void XiQWidget::setMouseTracking(XiQWidget* __thisPtr, bool param0)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setMouseTracking(param0__decode);
}

void XiQWidget::addAction(XiQWidget* __thisPtr, XiQAction* action)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    QAction* qa = fromXi(action);
    __this->impl()->addAction(qa);
    __this->protectObject(action);
}

void XiQWidget::paintEvent(XiQWidget* __thisPtr, XiQPaintEvent* pe)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    // By default, just call up to paintEvent of the class behind the
    // proxy. We dispatch to the native type by calling the appropriate
    // defaultEvent via the vtable.
    __this->vtable()->defaultEvent(__this, pe);
}

void XiQWidget::mousePressEvent(XiQWidget* __thisPtr, XiQMouseEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::mouseReleaseEvent(XiQWidget* __thisPtr, XiQMouseEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::mouseDoubleClickEvent(XiQWidget* __thisPtr, XiQMouseEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::mouseMoveEvent(XiQWidget* __thisPtr, XiQMouseEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::wheelEvent(XiQWidget* __thisPtr, XiQWheelEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::keyPressEvent(XiQWidget* __thisPtr, XiQKeyEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::keyReleaseEvent(XiQWidget* __thisPtr, XiQKeyEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::enterEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::leaveEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::resizeEvent(XiQWidget* __thisPtr, XiQResizeEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::closeEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::contextMenuEvent(XiQWidget* __thisPtr, XiQContextMenuEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::showEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::hideEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    __this->vtable()->defaultEvent(__this, e);
}

void XiQWidget::defaultEvent(XiQWidget* __thisPtr, XiQEvent* pe)
{
    XiQWidget* __this = static_cast<XiQWidget*>(__thisPtr);
    static_cast<Proxy<QWidget>*>(__this->getImpl())->defaultEvent(fromXi(pe));
}

XiQWidget_vtable XI(_vt_QWidget);
int XI(_size_QWidget);
void XI(_init_QWidget)()
{
    if (XI(_size_QWidget)) return;
    XI(_init_QPaintDevice)();
    XI(_size_QWidget) = sizeof(XiQWidget);
    XI(_vt_QWidget).show = XiQWidget::show;
    XI(_vt_QWidget).hide = XiQWidget::hide;
    XI(_vt_QWidget).raise = XiQWidget::raise;
    XI(_vt_QWidget).lower = XiQWidget::lower;
    XI(_vt_QWidget).close = XiQWidget::close;
    XI(_vt_QWidget).isEnabled = XiQWidget::isEnabled;
    XI(_vt_QWidget).setEnabled = XiQWidget::setEnabled;
    XI(_vt_QWidget).setLayout = XiQWidget::setLayout;
    XI(_vt_QWidget).isWindowModified = XiQWidget::isWindowModified;
    XI(_vt_QWidget).setWindowModified = XiQWidget::setWindowModified;
    XI(_vt_QWidget).windowTitle = XiQWidget::windowTitle;
    XI(_vt_QWidget).setWindowTitle = XiQWidget::setWindowTitle;
    XI(_vt_QWidget).windowIcon = XiQWidget::windowIcon;
    XI(_vt_QWidget).setWindowIcon = XiQWidget::setWindowIcon;
    XI(_vt_QWidget).isActiveWindow = XiQWidget::isActiveWindow;
    XI(_vt_QWidget).activateWindow = XiQWidget::activateWindow;
    XI(_vt_QWidget).isMinimized = XiQWidget::isMinimized;
    XI(_vt_QWidget).isMaximized = XiQWidget::isMaximized;
    XI(_vt_QWidget).isFullScreen = XiQWidget::isFullScreen;
    XI(_vt_QWidget).showMinimized = XiQWidget::showMinimized;
    XI(_vt_QWidget).showMaximized = XiQWidget::showMaximized;
    XI(_vt_QWidget).showFullScreen = XiQWidget::showFullScreen;
    XI(_vt_QWidget).showNormal = XiQWidget::showNormal;
    XI(_vt_QWidget).update = XiQWidget::update;
    XI(_vt_QWidget).repaint = XiQWidget::repaint;
    XI(_vt_QWidget).setMinimumSize = XiQWidget::setMinimumSize;
    XI(_vt_QWidget).minimumSize = XiQWidget::minimumSize;
    XI(_vt_QWidget).setMaximumSize = XiQWidget::setMaximumSize;
    XI(_vt_QWidget).maximumSize = XiQWidget::maximumSize;
    XI(_vt_QWidget).setFixedSize = XiQWidget::setFixedSize;
    XI(_vt_QWidget).resize = XiQWidget::resize;
    XI(_vt_QWidget).adjustSize = XiQWidget::adjustSize;
    XI(_vt_QWidget).pos = XiQWidget::pos;
    XI(_vt_QWidget).move = XiQWidget::move;
    XI(_vt_QWidget).sizeHint = XiQWidget::sizeHint;
    XI(_vt_QWidget).minimumSizeHint = XiQWidget::minimumSizeHint;
    XI(_vt_QWidget).mapFrom = XiQWidget::mapFrom;
    XI(_vt_QWidget).mapFromGlobal = XiQWidget::mapFromGlobal;
    XI(_vt_QWidget).mapFromParent = XiQWidget::mapFromParent;
    XI(_vt_QWidget).mapTo = XiQWidget::mapTo;
    XI(_vt_QWidget).mapToGlobal = XiQWidget::mapToGlobal;
    XI(_vt_QWidget).mapToParent = XiQWidget::mapToParent;
    XI(_vt_QWidget).setFont = XiQWidget::setFont;
    XI(_vt_QWidget).font = XiQWidget::font;
    XI(_vt_QWidget).styleSheet = XiQWidget::styleSheet;
    XI(_vt_QWidget).setStyleSheet = XiQWidget::setStyleSheet;
    XI(_vt_QWidget).focusPolicy = XiQWidget::focusPolicy;
    XI(_vt_QWidget).setFocusPolicy = XiQWidget::setFocusPolicy;
    XI(_vt_QWidget).setFocus = XiQWidget::setFocus;
    XI(_vt_QWidget).clearFocus = XiQWidget::clearFocus;
    XI(_vt_QWidget).hasFocus = XiQWidget::hasFocus;
    XI(_vt_QWidget).toolTip = XiQWidget::toolTip;
    XI(_vt_QWidget).setToolTip = XiQWidget::setToolTip;
    XI(_vt_QWidget).whatsThis = XiQWidget::whatsThis;
    XI(_vt_QWidget).setWhatsThis = XiQWidget::setWhatsThis;
    XI(_vt_QWidget).hasMouseTracking = XiQWidget::hasMouseTracking;
    XI(_vt_QWidget).setMouseTracking = XiQWidget::setMouseTracking;
    XI(_vt_QWidget).addAction = XiQWidget::addAction;
    XI(_vt_QWidget).paintEvent = XiQWidget::paintEvent;
    XI(_vt_QWidget).mousePressEvent = XiQWidget::mousePressEvent;
    XI(_vt_QWidget).mouseReleaseEvent = XiQWidget::mouseReleaseEvent;
    XI(_vt_QWidget).mouseDoubleClickEvent = XiQWidget::mouseDoubleClickEvent;
    XI(_vt_QWidget).mouseMoveEvent = XiQWidget::mouseMoveEvent;
    XI(_vt_QWidget).wheelEvent = XiQWidget::wheelEvent;
    XI(_vt_QWidget).keyPressEvent = XiQWidget::keyPressEvent;
    XI(_vt_QWidget).keyReleaseEvent = XiQWidget::keyReleaseEvent;
    XI(_vt_QWidget).enterEvent = XiQWidget::enterEvent;
    XI(_vt_QWidget).leaveEvent = XiQWidget::leaveEvent;
    XI(_vt_QWidget).resizeEvent = XiQWidget::resizeEvent;
    XI(_vt_QWidget).closeEvent = XiQWidget::closeEvent;
    XI(_vt_QWidget).contextMenuEvent = XiQWidget::contextMenuEvent;
    XI(_vt_QWidget).showEvent = XiQWidget::showEvent;
    XI(_vt_QWidget).hideEvent = XiQWidget::hideEvent;
    XI(_vt_QWidget).defaultEvent = XiQWidget::defaultEvent;
    XI(_vt_QWidget).toPixmap = XiQWidget::toPixmap;
    XI(_vt_QWidget).toWidget = XiQWidget::toWidget;
    XI(_vt_QWidget).__classOp = XiQWidget::__classOp;
}

QPushButton* XiQPushButton::impl()
{
    if (!initialized)
        static_cast<XiQPushButton_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQPushButton::invokeDtor(void* mePtr, void*)
{
    XiQPushButton* me = static_cast<XiQPushButton*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQPushButton::__classOp(ClassOp op, void* memory)
{
    XiQPushButton* me = static_cast<XiQPushButton*>(memory);
    if (op == CallCtor) {
        new (memory) XiQPushButton();
        me->createImpl();
    } else {
        me->~XiQPushButton();
    }
}

XiQPushButton::XiQPushButton()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QPushButton);
}

XiQIcon* XiQPushButton::icon(XiQPushButton* __thisPtr)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    return toXi(__this->impl()->icon());
}

void XiQPushButton::setIcon(XiQPushButton* __thisPtr, XiQIcon* param0)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    QIcon param0__decode = fromXi(param0);
    __this->impl()->setIcon(param0__decode);
}

XiQString* XiQPushButton::text(XiQPushButton* __thisPtr)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    return toXi(__this->impl()->text());
}

void XiQPushButton::setText(XiQPushButton* __thisPtr, XiQString* param0)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setText(param0__decode);
}

XiQMenu* XiQPushButton::menu(XiQPushButton* __thisPtr)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    return toXi(__this->impl()->menu());
}

void XiQPushButton::setMenu(XiQPushButton* __thisPtr, XiQMenu* param0)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    QMenu* param0__decode = fromXi(param0);
    __this->impl()->setMenu(param0__decode);
}

void XiQPushButton::showMenu(XiQPushButton* __thisPtr)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    __this->impl()->showMenu();
}

bool XiQPushButton::isDefault(XiQPushButton* __thisPtr)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    return toXi(__this->impl()->isDefault());
}

void XiQPushButton::setDefault(XiQPushButton* __thisPtr, bool param0)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setDefault(param0__decode);
}

bool XiQPushButton::autoDefault(XiQPushButton* __thisPtr)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    return toXi(__this->impl()->autoDefault());
}

void XiQPushButton::setAutoDefault(XiQPushButton* __thisPtr, bool param0)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setAutoDefault(param0__decode);
}

bool XiQPushButton::isFlat(XiQPushButton* __thisPtr)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    return toXi(__this->impl()->isFlat());
}

void XiQPushButton::setFlat(XiQPushButton* __thisPtr, bool param0)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setFlat(param0__decode);
}

void XiQPushButton::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    static_cast<Proxy<QPushButton>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

void XiQPushButton::addClickListener(XiQPushButton* __thisPtr, XiClickListener* cl)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
    __this->clickListeners.append(cl);
}

void XiQPushButton::clicked(XiQPushButton* __thisPtr)
{
    XiQPushButton* __this = static_cast<XiQPushButton*>(__thisPtr);
}

XiQPushButton_vtable XI(_vt_QPushButton);
int XI(_size_QPushButton);
void XI(_init_QPushButton)()
{
    if (XI(_size_QPushButton)) return;
    XI(_init_QWidget)();
    XI(_size_QPushButton) = sizeof(XiQPushButton);
    XI(_vt_QPushButton).icon = XiQPushButton::icon;
    XI(_vt_QPushButton).setIcon = XiQPushButton::setIcon;
    XI(_vt_QPushButton).text = XiQPushButton::text;
    XI(_vt_QPushButton).setText = XiQPushButton::setText;
    XI(_vt_QPushButton).menu = XiQPushButton::menu;
    XI(_vt_QPushButton).setMenu = XiQPushButton::setMenu;
    XI(_vt_QPushButton).showMenu = XiQPushButton::showMenu;
    XI(_vt_QPushButton).isDefault = XiQPushButton::isDefault;
    XI(_vt_QPushButton).setDefault = XiQPushButton::setDefault;
    XI(_vt_QPushButton).autoDefault = XiQPushButton::autoDefault;
    XI(_vt_QPushButton).setAutoDefault = XiQPushButton::setAutoDefault;
    XI(_vt_QPushButton).isFlat = XiQPushButton::isFlat;
    XI(_vt_QPushButton).setFlat = XiQPushButton::setFlat;
    XI(_vt_QPushButton).addClickListener = XiQPushButton::addClickListener;
    XI(_vt_QPushButton).clicked = XiQPushButton::clicked;
    XI(_vt_QPushButton).show = XiQPushButton::show;
    XI(_vt_QPushButton).hide = XiQPushButton::hide;
    XI(_vt_QPushButton).raise = XiQPushButton::raise;
    XI(_vt_QPushButton).lower = XiQPushButton::lower;
    XI(_vt_QPushButton).close = XiQPushButton::close;
    XI(_vt_QPushButton).isEnabled = XiQPushButton::isEnabled;
    XI(_vt_QPushButton).setEnabled = XiQPushButton::setEnabled;
    XI(_vt_QPushButton).setLayout = XiQPushButton::setLayout;
    XI(_vt_QPushButton).isWindowModified = XiQPushButton::isWindowModified;
    XI(_vt_QPushButton).setWindowModified = XiQPushButton::setWindowModified;
    XI(_vt_QPushButton).windowTitle = XiQPushButton::windowTitle;
    XI(_vt_QPushButton).setWindowTitle = XiQPushButton::setWindowTitle;
    XI(_vt_QPushButton).windowIcon = XiQPushButton::windowIcon;
    XI(_vt_QPushButton).setWindowIcon = XiQPushButton::setWindowIcon;
    XI(_vt_QPushButton).isActiveWindow = XiQPushButton::isActiveWindow;
    XI(_vt_QPushButton).activateWindow = XiQPushButton::activateWindow;
    XI(_vt_QPushButton).isMinimized = XiQPushButton::isMinimized;
    XI(_vt_QPushButton).isMaximized = XiQPushButton::isMaximized;
    XI(_vt_QPushButton).isFullScreen = XiQPushButton::isFullScreen;
    XI(_vt_QPushButton).showMinimized = XiQPushButton::showMinimized;
    XI(_vt_QPushButton).showMaximized = XiQPushButton::showMaximized;
    XI(_vt_QPushButton).showFullScreen = XiQPushButton::showFullScreen;
    XI(_vt_QPushButton).showNormal = XiQPushButton::showNormal;
    XI(_vt_QPushButton).update = XiQPushButton::update;
    XI(_vt_QPushButton).repaint = XiQPushButton::repaint;
    XI(_vt_QPushButton).setMinimumSize = XiQPushButton::setMinimumSize;
    XI(_vt_QPushButton).minimumSize = XiQPushButton::minimumSize;
    XI(_vt_QPushButton).setMaximumSize = XiQPushButton::setMaximumSize;
    XI(_vt_QPushButton).maximumSize = XiQPushButton::maximumSize;
    XI(_vt_QPushButton).setFixedSize = XiQPushButton::setFixedSize;
    XI(_vt_QPushButton).resize = XiQPushButton::resize;
    XI(_vt_QPushButton).adjustSize = XiQPushButton::adjustSize;
    XI(_vt_QPushButton).pos = XiQPushButton::pos;
    XI(_vt_QPushButton).move = XiQPushButton::move;
    XI(_vt_QPushButton).sizeHint = XiQPushButton::sizeHint;
    XI(_vt_QPushButton).minimumSizeHint = XiQPushButton::minimumSizeHint;
    XI(_vt_QPushButton).mapFrom = XiQPushButton::mapFrom;
    XI(_vt_QPushButton).mapFromGlobal = XiQPushButton::mapFromGlobal;
    XI(_vt_QPushButton).mapFromParent = XiQPushButton::mapFromParent;
    XI(_vt_QPushButton).mapTo = XiQPushButton::mapTo;
    XI(_vt_QPushButton).mapToGlobal = XiQPushButton::mapToGlobal;
    XI(_vt_QPushButton).mapToParent = XiQPushButton::mapToParent;
    XI(_vt_QPushButton).setFont = XiQPushButton::setFont;
    XI(_vt_QPushButton).font = XiQPushButton::font;
    XI(_vt_QPushButton).styleSheet = XiQPushButton::styleSheet;
    XI(_vt_QPushButton).setStyleSheet = XiQPushButton::setStyleSheet;
    XI(_vt_QPushButton).focusPolicy = XiQPushButton::focusPolicy;
    XI(_vt_QPushButton).setFocusPolicy = XiQPushButton::setFocusPolicy;
    XI(_vt_QPushButton).setFocus = XiQPushButton::setFocus;
    XI(_vt_QPushButton).clearFocus = XiQPushButton::clearFocus;
    XI(_vt_QPushButton).hasFocus = XiQPushButton::hasFocus;
    XI(_vt_QPushButton).toolTip = XiQPushButton::toolTip;
    XI(_vt_QPushButton).setToolTip = XiQPushButton::setToolTip;
    XI(_vt_QPushButton).whatsThis = XiQPushButton::whatsThis;
    XI(_vt_QPushButton).setWhatsThis = XiQPushButton::setWhatsThis;
    XI(_vt_QPushButton).hasMouseTracking = XiQPushButton::hasMouseTracking;
    XI(_vt_QPushButton).setMouseTracking = XiQPushButton::setMouseTracking;
    XI(_vt_QPushButton).addAction = XiQPushButton::addAction;
    XI(_vt_QPushButton).paintEvent = XiQPushButton::paintEvent;
    XI(_vt_QPushButton).mousePressEvent = XiQPushButton::mousePressEvent;
    XI(_vt_QPushButton).mouseReleaseEvent = XiQPushButton::mouseReleaseEvent;
    XI(_vt_QPushButton).mouseDoubleClickEvent = XiQPushButton::mouseDoubleClickEvent;
    XI(_vt_QPushButton).mouseMoveEvent = XiQPushButton::mouseMoveEvent;
    XI(_vt_QPushButton).wheelEvent = XiQPushButton::wheelEvent;
    XI(_vt_QPushButton).keyPressEvent = XiQPushButton::keyPressEvent;
    XI(_vt_QPushButton).keyReleaseEvent = XiQPushButton::keyReleaseEvent;
    XI(_vt_QPushButton).enterEvent = XiQPushButton::enterEvent;
    XI(_vt_QPushButton).leaveEvent = XiQPushButton::leaveEvent;
    XI(_vt_QPushButton).resizeEvent = XiQPushButton::resizeEvent;
    XI(_vt_QPushButton).closeEvent = XiQPushButton::closeEvent;
    XI(_vt_QPushButton).contextMenuEvent = XiQPushButton::contextMenuEvent;
    XI(_vt_QPushButton).showEvent = XiQPushButton::showEvent;
    XI(_vt_QPushButton).hideEvent = XiQPushButton::hideEvent;
    XI(_vt_QPushButton).defaultEvent = XiQPushButton::defaultEvent;
    XI(_vt_QPushButton).toPixmap = XiQPushButton::toPixmap;
    XI(_vt_QPushButton).toWidget = XiQPushButton::toWidget;
    XI(_vt_QPushButton).__classOp = XiQPushButton::__classOp;
}

XiQPushButton* XI(qpushbutton_o11QPushButtono7QString)(XiQString* label)
{
    return toXi(new QPushButton(fromXi(label)));
}

XiClickListener::XiClickListener()
{
    if (!vptr)
        vptr = &XI(_vt_ClickListener);
}

void XiClickListener::clicked(XiClickListener* __thisPtr, XiQPushButton* pb)
{
    XiClickListener* __this = static_cast<XiClickListener*>(__thisPtr);
}

XiClickListener_vtable XI(_vt_ClickListener);
int XI(_size_ClickListener);
void XI(_init_ClickListener)()
{
    if (XI(_size_ClickListener)) return;
    XI(_size_ClickListener) = sizeof(XiClickListener);
    XI(_vt_ClickListener).clicked = XiClickListener::clicked;
}

QCheckBox* XiQCheckBox::impl()
{
    if (!initialized)
        static_cast<XiQCheckBox_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQCheckBox::invokeDtor(void* mePtr, void*)
{
    XiQCheckBox* me = static_cast<XiQCheckBox*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQCheckBox::__classOp(ClassOp op, void* memory)
{
    XiQCheckBox* me = static_cast<XiQCheckBox*>(memory);
    if (op == CallCtor) {
        new (memory) XiQCheckBox();
        me->createImpl();
    } else {
        me->~XiQCheckBox();
    }
}

XiQCheckBox::XiQCheckBox()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QCheckBox);
}

XiQString* XiQCheckBox::text(XiQCheckBox* __thisPtr)
{
    XiQCheckBox* __this = static_cast<XiQCheckBox*>(__thisPtr);
    return toXi(__this->impl()->text());
}

void XiQCheckBox::setText(XiQCheckBox* __thisPtr, XiQString* param0)
{
    XiQCheckBox* __this = static_cast<XiQCheckBox*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setText(param0__decode);
}

bool XiQCheckBox::isChecked(XiQCheckBox* __thisPtr)
{
    XiQCheckBox* __this = static_cast<XiQCheckBox*>(__thisPtr);
    return toXi(__this->impl()->isChecked());
}

void XiQCheckBox::setChecked(XiQCheckBox* __thisPtr, bool param0)
{
    XiQCheckBox* __this = static_cast<XiQCheckBox*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setChecked(param0__decode);
}

void XiQCheckBox::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQCheckBox* __this = static_cast<XiQCheckBox*>(__thisPtr);
    static_cast<Proxy<QCheckBox>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

void XiQCheckBox::addToggleListener(XiQCheckBox* __thisPtr, XiToggleListener* l)
{
    XiQCheckBox* __this = static_cast<XiQCheckBox*>(__thisPtr);
    __this->listeners.append(l);
}

void XiQCheckBox::toggled(XiQCheckBox* __thisPtr, bool param0)
{
    XiQCheckBox* __this = static_cast<XiQCheckBox*>(__thisPtr);
}

XiQCheckBox_vtable XI(_vt_QCheckBox);
int XI(_size_QCheckBox);
void XI(_init_QCheckBox)()
{
    if (XI(_size_QCheckBox)) return;
    XI(_init_QWidget)();
    XI(_size_QCheckBox) = sizeof(XiQCheckBox);
    XI(_vt_QCheckBox).text = XiQCheckBox::text;
    XI(_vt_QCheckBox).setText = XiQCheckBox::setText;
    XI(_vt_QCheckBox).isChecked = XiQCheckBox::isChecked;
    XI(_vt_QCheckBox).setChecked = XiQCheckBox::setChecked;
    XI(_vt_QCheckBox).addToggleListener = XiQCheckBox::addToggleListener;
    XI(_vt_QCheckBox).toggled = XiQCheckBox::toggled;
    XI(_vt_QCheckBox).show = XiQCheckBox::show;
    XI(_vt_QCheckBox).hide = XiQCheckBox::hide;
    XI(_vt_QCheckBox).raise = XiQCheckBox::raise;
    XI(_vt_QCheckBox).lower = XiQCheckBox::lower;
    XI(_vt_QCheckBox).close = XiQCheckBox::close;
    XI(_vt_QCheckBox).isEnabled = XiQCheckBox::isEnabled;
    XI(_vt_QCheckBox).setEnabled = XiQCheckBox::setEnabled;
    XI(_vt_QCheckBox).setLayout = XiQCheckBox::setLayout;
    XI(_vt_QCheckBox).isWindowModified = XiQCheckBox::isWindowModified;
    XI(_vt_QCheckBox).setWindowModified = XiQCheckBox::setWindowModified;
    XI(_vt_QCheckBox).windowTitle = XiQCheckBox::windowTitle;
    XI(_vt_QCheckBox).setWindowTitle = XiQCheckBox::setWindowTitle;
    XI(_vt_QCheckBox).windowIcon = XiQCheckBox::windowIcon;
    XI(_vt_QCheckBox).setWindowIcon = XiQCheckBox::setWindowIcon;
    XI(_vt_QCheckBox).isActiveWindow = XiQCheckBox::isActiveWindow;
    XI(_vt_QCheckBox).activateWindow = XiQCheckBox::activateWindow;
    XI(_vt_QCheckBox).isMinimized = XiQCheckBox::isMinimized;
    XI(_vt_QCheckBox).isMaximized = XiQCheckBox::isMaximized;
    XI(_vt_QCheckBox).isFullScreen = XiQCheckBox::isFullScreen;
    XI(_vt_QCheckBox).showMinimized = XiQCheckBox::showMinimized;
    XI(_vt_QCheckBox).showMaximized = XiQCheckBox::showMaximized;
    XI(_vt_QCheckBox).showFullScreen = XiQCheckBox::showFullScreen;
    XI(_vt_QCheckBox).showNormal = XiQCheckBox::showNormal;
    XI(_vt_QCheckBox).update = XiQCheckBox::update;
    XI(_vt_QCheckBox).repaint = XiQCheckBox::repaint;
    XI(_vt_QCheckBox).setMinimumSize = XiQCheckBox::setMinimumSize;
    XI(_vt_QCheckBox).minimumSize = XiQCheckBox::minimumSize;
    XI(_vt_QCheckBox).setMaximumSize = XiQCheckBox::setMaximumSize;
    XI(_vt_QCheckBox).maximumSize = XiQCheckBox::maximumSize;
    XI(_vt_QCheckBox).setFixedSize = XiQCheckBox::setFixedSize;
    XI(_vt_QCheckBox).resize = XiQCheckBox::resize;
    XI(_vt_QCheckBox).adjustSize = XiQCheckBox::adjustSize;
    XI(_vt_QCheckBox).pos = XiQCheckBox::pos;
    XI(_vt_QCheckBox).move = XiQCheckBox::move;
    XI(_vt_QCheckBox).sizeHint = XiQCheckBox::sizeHint;
    XI(_vt_QCheckBox).minimumSizeHint = XiQCheckBox::minimumSizeHint;
    XI(_vt_QCheckBox).mapFrom = XiQCheckBox::mapFrom;
    XI(_vt_QCheckBox).mapFromGlobal = XiQCheckBox::mapFromGlobal;
    XI(_vt_QCheckBox).mapFromParent = XiQCheckBox::mapFromParent;
    XI(_vt_QCheckBox).mapTo = XiQCheckBox::mapTo;
    XI(_vt_QCheckBox).mapToGlobal = XiQCheckBox::mapToGlobal;
    XI(_vt_QCheckBox).mapToParent = XiQCheckBox::mapToParent;
    XI(_vt_QCheckBox).setFont = XiQCheckBox::setFont;
    XI(_vt_QCheckBox).font = XiQCheckBox::font;
    XI(_vt_QCheckBox).styleSheet = XiQCheckBox::styleSheet;
    XI(_vt_QCheckBox).setStyleSheet = XiQCheckBox::setStyleSheet;
    XI(_vt_QCheckBox).focusPolicy = XiQCheckBox::focusPolicy;
    XI(_vt_QCheckBox).setFocusPolicy = XiQCheckBox::setFocusPolicy;
    XI(_vt_QCheckBox).setFocus = XiQCheckBox::setFocus;
    XI(_vt_QCheckBox).clearFocus = XiQCheckBox::clearFocus;
    XI(_vt_QCheckBox).hasFocus = XiQCheckBox::hasFocus;
    XI(_vt_QCheckBox).toolTip = XiQCheckBox::toolTip;
    XI(_vt_QCheckBox).setToolTip = XiQCheckBox::setToolTip;
    XI(_vt_QCheckBox).whatsThis = XiQCheckBox::whatsThis;
    XI(_vt_QCheckBox).setWhatsThis = XiQCheckBox::setWhatsThis;
    XI(_vt_QCheckBox).hasMouseTracking = XiQCheckBox::hasMouseTracking;
    XI(_vt_QCheckBox).setMouseTracking = XiQCheckBox::setMouseTracking;
    XI(_vt_QCheckBox).addAction = XiQCheckBox::addAction;
    XI(_vt_QCheckBox).paintEvent = XiQCheckBox::paintEvent;
    XI(_vt_QCheckBox).mousePressEvent = XiQCheckBox::mousePressEvent;
    XI(_vt_QCheckBox).mouseReleaseEvent = XiQCheckBox::mouseReleaseEvent;
    XI(_vt_QCheckBox).mouseDoubleClickEvent = XiQCheckBox::mouseDoubleClickEvent;
    XI(_vt_QCheckBox).mouseMoveEvent = XiQCheckBox::mouseMoveEvent;
    XI(_vt_QCheckBox).wheelEvent = XiQCheckBox::wheelEvent;
    XI(_vt_QCheckBox).keyPressEvent = XiQCheckBox::keyPressEvent;
    XI(_vt_QCheckBox).keyReleaseEvent = XiQCheckBox::keyReleaseEvent;
    XI(_vt_QCheckBox).enterEvent = XiQCheckBox::enterEvent;
    XI(_vt_QCheckBox).leaveEvent = XiQCheckBox::leaveEvent;
    XI(_vt_QCheckBox).resizeEvent = XiQCheckBox::resizeEvent;
    XI(_vt_QCheckBox).closeEvent = XiQCheckBox::closeEvent;
    XI(_vt_QCheckBox).contextMenuEvent = XiQCheckBox::contextMenuEvent;
    XI(_vt_QCheckBox).showEvent = XiQCheckBox::showEvent;
    XI(_vt_QCheckBox).hideEvent = XiQCheckBox::hideEvent;
    XI(_vt_QCheckBox).defaultEvent = XiQCheckBox::defaultEvent;
    XI(_vt_QCheckBox).toPixmap = XiQCheckBox::toPixmap;
    XI(_vt_QCheckBox).toWidget = XiQCheckBox::toWidget;
    XI(_vt_QCheckBox).__classOp = XiQCheckBox::__classOp;
}

XiQCheckBox* XI(qcheckbox_o9QCheckBoxo7QString)(XiQString* label)
{
    return toXi(new QCheckBox(fromXi(label)));
}

XiToggleListener::XiToggleListener()
{
    if (!vptr)
        vptr = &XI(_vt_ToggleListener);
}

void XiToggleListener::toggled(XiToggleListener* __thisPtr, XiQWidget* widget, bool state)
{
    XiToggleListener* __this = static_cast<XiToggleListener*>(__thisPtr);
}

XiToggleListener_vtable XI(_vt_ToggleListener);
int XI(_size_ToggleListener);
void XI(_init_ToggleListener)()
{
    if (XI(_size_ToggleListener)) return;
    XI(_size_ToggleListener) = sizeof(XiToggleListener);
    XI(_vt_ToggleListener).toggled = XiToggleListener::toggled;
}

QRadioButton* XiQRadioButton::impl()
{
    if (!initialized)
        static_cast<XiQRadioButton_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQRadioButton::invokeDtor(void* mePtr, void*)
{
    XiQRadioButton* me = static_cast<XiQRadioButton*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQRadioButton::__classOp(ClassOp op, void* memory)
{
    XiQRadioButton* me = static_cast<XiQRadioButton*>(memory);
    if (op == CallCtor) {
        new (memory) XiQRadioButton();
        me->createImpl();
    } else {
        me->~XiQRadioButton();
    }
}

XiQRadioButton::XiQRadioButton()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QRadioButton);
}

XiQString* XiQRadioButton::text(XiQRadioButton* __thisPtr)
{
    XiQRadioButton* __this = static_cast<XiQRadioButton*>(__thisPtr);
    return toXi(__this->impl()->text());
}

void XiQRadioButton::setText(XiQRadioButton* __thisPtr, XiQString* param0)
{
    XiQRadioButton* __this = static_cast<XiQRadioButton*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setText(param0__decode);
}

bool XiQRadioButton::isChecked(XiQRadioButton* __thisPtr)
{
    XiQRadioButton* __this = static_cast<XiQRadioButton*>(__thisPtr);
    return toXi(__this->impl()->isChecked());
}

void XiQRadioButton::setChecked(XiQRadioButton* __thisPtr, bool param0)
{
    XiQRadioButton* __this = static_cast<XiQRadioButton*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setChecked(param0__decode);
}

void XiQRadioButton::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQRadioButton* __this = static_cast<XiQRadioButton*>(__thisPtr);
    static_cast<Proxy<QRadioButton>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

void XiQRadioButton::addToggleListener(XiQRadioButton* __thisPtr, XiToggleListener* l)
{
    XiQRadioButton* __this = static_cast<XiQRadioButton*>(__thisPtr);
    __this->listeners.append(l);
}

void XiQRadioButton::toggled(XiQRadioButton* __thisPtr, bool param0)
{
    XiQRadioButton* __this = static_cast<XiQRadioButton*>(__thisPtr);
}

XiQRadioButton_vtable XI(_vt_QRadioButton);
int XI(_size_QRadioButton);
void XI(_init_QRadioButton)()
{
    if (XI(_size_QRadioButton)) return;
    XI(_init_QWidget)();
    XI(_size_QRadioButton) = sizeof(XiQRadioButton);
    XI(_vt_QRadioButton).text = XiQRadioButton::text;
    XI(_vt_QRadioButton).setText = XiQRadioButton::setText;
    XI(_vt_QRadioButton).isChecked = XiQRadioButton::isChecked;
    XI(_vt_QRadioButton).setChecked = XiQRadioButton::setChecked;
    XI(_vt_QRadioButton).addToggleListener = XiQRadioButton::addToggleListener;
    XI(_vt_QRadioButton).toggled = XiQRadioButton::toggled;
    XI(_vt_QRadioButton).show = XiQRadioButton::show;
    XI(_vt_QRadioButton).hide = XiQRadioButton::hide;
    XI(_vt_QRadioButton).raise = XiQRadioButton::raise;
    XI(_vt_QRadioButton).lower = XiQRadioButton::lower;
    XI(_vt_QRadioButton).close = XiQRadioButton::close;
    XI(_vt_QRadioButton).isEnabled = XiQRadioButton::isEnabled;
    XI(_vt_QRadioButton).setEnabled = XiQRadioButton::setEnabled;
    XI(_vt_QRadioButton).setLayout = XiQRadioButton::setLayout;
    XI(_vt_QRadioButton).isWindowModified = XiQRadioButton::isWindowModified;
    XI(_vt_QRadioButton).setWindowModified = XiQRadioButton::setWindowModified;
    XI(_vt_QRadioButton).windowTitle = XiQRadioButton::windowTitle;
    XI(_vt_QRadioButton).setWindowTitle = XiQRadioButton::setWindowTitle;
    XI(_vt_QRadioButton).windowIcon = XiQRadioButton::windowIcon;
    XI(_vt_QRadioButton).setWindowIcon = XiQRadioButton::setWindowIcon;
    XI(_vt_QRadioButton).isActiveWindow = XiQRadioButton::isActiveWindow;
    XI(_vt_QRadioButton).activateWindow = XiQRadioButton::activateWindow;
    XI(_vt_QRadioButton).isMinimized = XiQRadioButton::isMinimized;
    XI(_vt_QRadioButton).isMaximized = XiQRadioButton::isMaximized;
    XI(_vt_QRadioButton).isFullScreen = XiQRadioButton::isFullScreen;
    XI(_vt_QRadioButton).showMinimized = XiQRadioButton::showMinimized;
    XI(_vt_QRadioButton).showMaximized = XiQRadioButton::showMaximized;
    XI(_vt_QRadioButton).showFullScreen = XiQRadioButton::showFullScreen;
    XI(_vt_QRadioButton).showNormal = XiQRadioButton::showNormal;
    XI(_vt_QRadioButton).update = XiQRadioButton::update;
    XI(_vt_QRadioButton).repaint = XiQRadioButton::repaint;
    XI(_vt_QRadioButton).setMinimumSize = XiQRadioButton::setMinimumSize;
    XI(_vt_QRadioButton).minimumSize = XiQRadioButton::minimumSize;
    XI(_vt_QRadioButton).setMaximumSize = XiQRadioButton::setMaximumSize;
    XI(_vt_QRadioButton).maximumSize = XiQRadioButton::maximumSize;
    XI(_vt_QRadioButton).setFixedSize = XiQRadioButton::setFixedSize;
    XI(_vt_QRadioButton).resize = XiQRadioButton::resize;
    XI(_vt_QRadioButton).adjustSize = XiQRadioButton::adjustSize;
    XI(_vt_QRadioButton).pos = XiQRadioButton::pos;
    XI(_vt_QRadioButton).move = XiQRadioButton::move;
    XI(_vt_QRadioButton).sizeHint = XiQRadioButton::sizeHint;
    XI(_vt_QRadioButton).minimumSizeHint = XiQRadioButton::minimumSizeHint;
    XI(_vt_QRadioButton).mapFrom = XiQRadioButton::mapFrom;
    XI(_vt_QRadioButton).mapFromGlobal = XiQRadioButton::mapFromGlobal;
    XI(_vt_QRadioButton).mapFromParent = XiQRadioButton::mapFromParent;
    XI(_vt_QRadioButton).mapTo = XiQRadioButton::mapTo;
    XI(_vt_QRadioButton).mapToGlobal = XiQRadioButton::mapToGlobal;
    XI(_vt_QRadioButton).mapToParent = XiQRadioButton::mapToParent;
    XI(_vt_QRadioButton).setFont = XiQRadioButton::setFont;
    XI(_vt_QRadioButton).font = XiQRadioButton::font;
    XI(_vt_QRadioButton).styleSheet = XiQRadioButton::styleSheet;
    XI(_vt_QRadioButton).setStyleSheet = XiQRadioButton::setStyleSheet;
    XI(_vt_QRadioButton).focusPolicy = XiQRadioButton::focusPolicy;
    XI(_vt_QRadioButton).setFocusPolicy = XiQRadioButton::setFocusPolicy;
    XI(_vt_QRadioButton).setFocus = XiQRadioButton::setFocus;
    XI(_vt_QRadioButton).clearFocus = XiQRadioButton::clearFocus;
    XI(_vt_QRadioButton).hasFocus = XiQRadioButton::hasFocus;
    XI(_vt_QRadioButton).toolTip = XiQRadioButton::toolTip;
    XI(_vt_QRadioButton).setToolTip = XiQRadioButton::setToolTip;
    XI(_vt_QRadioButton).whatsThis = XiQRadioButton::whatsThis;
    XI(_vt_QRadioButton).setWhatsThis = XiQRadioButton::setWhatsThis;
    XI(_vt_QRadioButton).hasMouseTracking = XiQRadioButton::hasMouseTracking;
    XI(_vt_QRadioButton).setMouseTracking = XiQRadioButton::setMouseTracking;
    XI(_vt_QRadioButton).addAction = XiQRadioButton::addAction;
    XI(_vt_QRadioButton).paintEvent = XiQRadioButton::paintEvent;
    XI(_vt_QRadioButton).mousePressEvent = XiQRadioButton::mousePressEvent;
    XI(_vt_QRadioButton).mouseReleaseEvent = XiQRadioButton::mouseReleaseEvent;
    XI(_vt_QRadioButton).mouseDoubleClickEvent = XiQRadioButton::mouseDoubleClickEvent;
    XI(_vt_QRadioButton).mouseMoveEvent = XiQRadioButton::mouseMoveEvent;
    XI(_vt_QRadioButton).wheelEvent = XiQRadioButton::wheelEvent;
    XI(_vt_QRadioButton).keyPressEvent = XiQRadioButton::keyPressEvent;
    XI(_vt_QRadioButton).keyReleaseEvent = XiQRadioButton::keyReleaseEvent;
    XI(_vt_QRadioButton).enterEvent = XiQRadioButton::enterEvent;
    XI(_vt_QRadioButton).leaveEvent = XiQRadioButton::leaveEvent;
    XI(_vt_QRadioButton).resizeEvent = XiQRadioButton::resizeEvent;
    XI(_vt_QRadioButton).closeEvent = XiQRadioButton::closeEvent;
    XI(_vt_QRadioButton).contextMenuEvent = XiQRadioButton::contextMenuEvent;
    XI(_vt_QRadioButton).showEvent = XiQRadioButton::showEvent;
    XI(_vt_QRadioButton).hideEvent = XiQRadioButton::hideEvent;
    XI(_vt_QRadioButton).defaultEvent = XiQRadioButton::defaultEvent;
    XI(_vt_QRadioButton).toPixmap = XiQRadioButton::toPixmap;
    XI(_vt_QRadioButton).toWidget = XiQRadioButton::toWidget;
    XI(_vt_QRadioButton).__classOp = XiQRadioButton::__classOp;
}

XiQRadioButton* XI(qradio_o12QRadioButtono7QString)(XiQString* label)
{
    return toXi(new QRadioButton(fromXi(label)));
}

QButtonGroup* XiQButtonGroup::impl()
{
    if (!initialized)
        static_cast<XiQButtonGroup_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQButtonGroup::invokeDtor(void* mePtr, void*)
{
    XiQButtonGroup* me = static_cast<XiQButtonGroup*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQButtonGroup::__classOp(ClassOp op, void* memory)
{
    XiQButtonGroup* me = static_cast<XiQButtonGroup*>(memory);
    if (op == CallCtor) {
        new (memory) XiQButtonGroup();
        me->createImpl();
    } else {
        me->~XiQButtonGroup();
    }
}

XiQButtonGroup::XiQButtonGroup()
{
    if (!vptr)
        vptr = &XI(_vt_QButtonGroup);
}

void XiQButtonGroup::addButton(XiQButtonGroup* __thisPtr, XiQRadioButton* button)
{
    XiQButtonGroup* __this = static_cast<XiQButtonGroup*>(__thisPtr);
    __this->buttons.append(button);
    __this->impl()->addButton(fromXi(button));
}

XiQButtonGroup_vtable XI(_vt_QButtonGroup);
int XI(_size_QButtonGroup);
void XI(_init_QButtonGroup)()
{
    if (XI(_size_QButtonGroup)) return;
    XI(_size_QButtonGroup) = sizeof(XiQButtonGroup);
    XI(_vt_QButtonGroup).addButton = XiQButtonGroup::addButton;
    XI(_vt_QButtonGroup).__classOp = XiQButtonGroup::__classOp;
}

XiQButtonGroup* XI(qbuttongroup_o12QButtonGroup)()
{
    XiQButtonGroup* g = gcNew<XiQButtonGroup>();
    g->createImpl();
    return g;
}

QMenu* XiQMenu::impl()
{
    if (!initialized)
        static_cast<XiQMenu_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQMenu::invokeDtor(void* mePtr, void*)
{
    XiQMenu* me = static_cast<XiQMenu*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQMenu::__classOp(ClassOp op, void* memory)
{
    XiQMenu* me = static_cast<XiQMenu*>(memory);
    if (op == CallCtor) {
        new (memory) XiQMenu();
        me->createImpl();
    } else {
        me->~XiQMenu();
    }
}

XiQMenu::XiQMenu()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QMenu);
}

void XiQMenu::addAction(XiQWidget* __thisPtr, XiQAction* a)
{
    XiQMenu* __this = static_cast<XiQMenu*>(__thisPtr);
     // non-virtual in QWidget somehow?
    QAction* qa = fromXi(a);
    __this->impl()->addAction(qa);
    __this->protectObject(a);
}

void XiQMenu::addMenu(XiQMenu* __thisPtr, XiQMenu* m)
{
    XiQMenu* __this = static_cast<XiQMenu*>(__thisPtr);
    QMenu* qm = fromXi(m);
    __this->impl()->addMenu(qm);
    __this->protectObject(m);
}

void XiQMenu::addSeparator(XiQMenu* __thisPtr)
{
    XiQMenu* __this = static_cast<XiQMenu*>(__thisPtr);
    __this->impl()->addSeparator();
}

XiQAction* XiQMenu::menuAction(XiQMenu* __thisPtr)
{
    XiQMenu* __this = static_cast<XiQMenu*>(__thisPtr);
    return toXi(__this->impl()->menuAction());
}

XiQAction* XiQMenu::exec(XiQMenu* __thisPtr, XiQPoint* p)
{
    XiQMenu* __this = static_cast<XiQMenu*>(__thisPtr);
    QPoint p__decode = fromXi(p);
    return toXi(__this->impl()->exec(p__decode));
}

XiQString* XiQMenu::title(XiQMenu* __thisPtr)
{
    XiQMenu* __this = static_cast<XiQMenu*>(__thisPtr);
    return toXi(__this->impl()->title());
}

void XiQMenu::setTitle(XiQMenu* __thisPtr, XiQString* param0)
{
    XiQMenu* __this = static_cast<XiQMenu*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setTitle(param0__decode);
}

XiQIcon* XiQMenu::icon(XiQMenu* __thisPtr)
{
    XiQMenu* __this = static_cast<XiQMenu*>(__thisPtr);
    return toXi(__this->impl()->icon());
}

void XiQMenu::setIcon(XiQMenu* __thisPtr, XiQIcon* param0)
{
    XiQMenu* __this = static_cast<XiQMenu*>(__thisPtr);
    QIcon param0__decode = fromXi(param0);
    __this->impl()->setIcon(param0__decode);
}

void XiQMenu::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQMenu* __this = static_cast<XiQMenu*>(__thisPtr);
    static_cast<Proxy<QMenu>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

XiQMenu_vtable XI(_vt_QMenu);
int XI(_size_QMenu);
void XI(_init_QMenu)()
{
    if (XI(_size_QMenu)) return;
    XI(_init_QWidget)();
    XI(_size_QMenu) = sizeof(XiQMenu);
    XI(_vt_QMenu).addMenu = XiQMenu::addMenu;
    XI(_vt_QMenu).addSeparator = XiQMenu::addSeparator;
    XI(_vt_QMenu).menuAction = XiQMenu::menuAction;
    XI(_vt_QMenu).exec = XiQMenu::exec;
    XI(_vt_QMenu).title = XiQMenu::title;
    XI(_vt_QMenu).setTitle = XiQMenu::setTitle;
    XI(_vt_QMenu).icon = XiQMenu::icon;
    XI(_vt_QMenu).setIcon = XiQMenu::setIcon;
    XI(_vt_QMenu).show = XiQMenu::show;
    XI(_vt_QMenu).hide = XiQMenu::hide;
    XI(_vt_QMenu).raise = XiQMenu::raise;
    XI(_vt_QMenu).lower = XiQMenu::lower;
    XI(_vt_QMenu).close = XiQMenu::close;
    XI(_vt_QMenu).isEnabled = XiQMenu::isEnabled;
    XI(_vt_QMenu).setEnabled = XiQMenu::setEnabled;
    XI(_vt_QMenu).setLayout = XiQMenu::setLayout;
    XI(_vt_QMenu).isWindowModified = XiQMenu::isWindowModified;
    XI(_vt_QMenu).setWindowModified = XiQMenu::setWindowModified;
    XI(_vt_QMenu).windowTitle = XiQMenu::windowTitle;
    XI(_vt_QMenu).setWindowTitle = XiQMenu::setWindowTitle;
    XI(_vt_QMenu).windowIcon = XiQMenu::windowIcon;
    XI(_vt_QMenu).setWindowIcon = XiQMenu::setWindowIcon;
    XI(_vt_QMenu).isActiveWindow = XiQMenu::isActiveWindow;
    XI(_vt_QMenu).activateWindow = XiQMenu::activateWindow;
    XI(_vt_QMenu).isMinimized = XiQMenu::isMinimized;
    XI(_vt_QMenu).isMaximized = XiQMenu::isMaximized;
    XI(_vt_QMenu).isFullScreen = XiQMenu::isFullScreen;
    XI(_vt_QMenu).showMinimized = XiQMenu::showMinimized;
    XI(_vt_QMenu).showMaximized = XiQMenu::showMaximized;
    XI(_vt_QMenu).showFullScreen = XiQMenu::showFullScreen;
    XI(_vt_QMenu).showNormal = XiQMenu::showNormal;
    XI(_vt_QMenu).update = XiQMenu::update;
    XI(_vt_QMenu).repaint = XiQMenu::repaint;
    XI(_vt_QMenu).setMinimumSize = XiQMenu::setMinimumSize;
    XI(_vt_QMenu).minimumSize = XiQMenu::minimumSize;
    XI(_vt_QMenu).setMaximumSize = XiQMenu::setMaximumSize;
    XI(_vt_QMenu).maximumSize = XiQMenu::maximumSize;
    XI(_vt_QMenu).setFixedSize = XiQMenu::setFixedSize;
    XI(_vt_QMenu).resize = XiQMenu::resize;
    XI(_vt_QMenu).adjustSize = XiQMenu::adjustSize;
    XI(_vt_QMenu).pos = XiQMenu::pos;
    XI(_vt_QMenu).move = XiQMenu::move;
    XI(_vt_QMenu).sizeHint = XiQMenu::sizeHint;
    XI(_vt_QMenu).minimumSizeHint = XiQMenu::minimumSizeHint;
    XI(_vt_QMenu).mapFrom = XiQMenu::mapFrom;
    XI(_vt_QMenu).mapFromGlobal = XiQMenu::mapFromGlobal;
    XI(_vt_QMenu).mapFromParent = XiQMenu::mapFromParent;
    XI(_vt_QMenu).mapTo = XiQMenu::mapTo;
    XI(_vt_QMenu).mapToGlobal = XiQMenu::mapToGlobal;
    XI(_vt_QMenu).mapToParent = XiQMenu::mapToParent;
    XI(_vt_QMenu).setFont = XiQMenu::setFont;
    XI(_vt_QMenu).font = XiQMenu::font;
    XI(_vt_QMenu).styleSheet = XiQMenu::styleSheet;
    XI(_vt_QMenu).setStyleSheet = XiQMenu::setStyleSheet;
    XI(_vt_QMenu).focusPolicy = XiQMenu::focusPolicy;
    XI(_vt_QMenu).setFocusPolicy = XiQMenu::setFocusPolicy;
    XI(_vt_QMenu).setFocus = XiQMenu::setFocus;
    XI(_vt_QMenu).clearFocus = XiQMenu::clearFocus;
    XI(_vt_QMenu).hasFocus = XiQMenu::hasFocus;
    XI(_vt_QMenu).toolTip = XiQMenu::toolTip;
    XI(_vt_QMenu).setToolTip = XiQMenu::setToolTip;
    XI(_vt_QMenu).whatsThis = XiQMenu::whatsThis;
    XI(_vt_QMenu).setWhatsThis = XiQMenu::setWhatsThis;
    XI(_vt_QMenu).hasMouseTracking = XiQMenu::hasMouseTracking;
    XI(_vt_QMenu).setMouseTracking = XiQMenu::setMouseTracking;
    XI(_vt_QMenu).addAction = XiQMenu::addAction;
    XI(_vt_QMenu).paintEvent = XiQMenu::paintEvent;
    XI(_vt_QMenu).mousePressEvent = XiQMenu::mousePressEvent;
    XI(_vt_QMenu).mouseReleaseEvent = XiQMenu::mouseReleaseEvent;
    XI(_vt_QMenu).mouseDoubleClickEvent = XiQMenu::mouseDoubleClickEvent;
    XI(_vt_QMenu).mouseMoveEvent = XiQMenu::mouseMoveEvent;
    XI(_vt_QMenu).wheelEvent = XiQMenu::wheelEvent;
    XI(_vt_QMenu).keyPressEvent = XiQMenu::keyPressEvent;
    XI(_vt_QMenu).keyReleaseEvent = XiQMenu::keyReleaseEvent;
    XI(_vt_QMenu).enterEvent = XiQMenu::enterEvent;
    XI(_vt_QMenu).leaveEvent = XiQMenu::leaveEvent;
    XI(_vt_QMenu).resizeEvent = XiQMenu::resizeEvent;
    XI(_vt_QMenu).closeEvent = XiQMenu::closeEvent;
    XI(_vt_QMenu).contextMenuEvent = XiQMenu::contextMenuEvent;
    XI(_vt_QMenu).showEvent = XiQMenu::showEvent;
    XI(_vt_QMenu).hideEvent = XiQMenu::hideEvent;
    XI(_vt_QMenu).defaultEvent = XiQMenu::defaultEvent;
    XI(_vt_QMenu).toPixmap = XiQMenu::toPixmap;
    XI(_vt_QMenu).toWidget = XiQMenu::toWidget;
    XI(_vt_QMenu).__classOp = XiQMenu::__classOp;
}

XiQMenu* XI(qmenu_o5QMenuo7QString)(XiQString* title)
{
    return toXi(new QMenu(fromXi(title)));
}

XiToolButtonStyle::XiToolButtonStyle()
{
    if (!vptr)
        vptr = &XI(_vt_ToolButtonStyle);
}

XiToolButtonStyle* XI(ToolButtonIconOnly_o15ToolButtonStyle)()
{
    static XiToolButtonStyle* c = gcNew<XiToolButtonStyle>();
    c->value = ToolButtonIconOnly;
    return c;
}

XiToolButtonStyle* XI(ToolButtonTextOnly_o15ToolButtonStyle)()
{
    static XiToolButtonStyle* c = gcNew<XiToolButtonStyle>();
    c->value = ToolButtonTextOnly;
    return c;
}

XiToolButtonStyle* XI(ToolButtonTextBesideIcon_o15ToolButtonStyle)()
{
    static XiToolButtonStyle* c = gcNew<XiToolButtonStyle>();
    c->value = ToolButtonTextBesideIcon;
    return c;
}

XiToolButtonStyle* XI(ToolButtonTextUnderIcon_o15ToolButtonStyle)()
{
    static XiToolButtonStyle* c = gcNew<XiToolButtonStyle>();
    c->value = ToolButtonTextUnderIcon;
    return c;
}

XiToolButtonStyle_vtable XI(_vt_ToolButtonStyle);
int XI(_size_ToolButtonStyle);
void XI(_init_ToolButtonStyle)()
{
    if (XI(_size_ToolButtonStyle)) return;
    XI(_size_ToolButtonStyle) = sizeof(XiToolButtonStyle);
}

QToolBar* XiQToolBar::impl()
{
    if (!initialized)
        static_cast<XiQToolBar_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQToolBar::invokeDtor(void* mePtr, void*)
{
    XiQToolBar* me = static_cast<XiQToolBar*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQToolBar::__classOp(ClassOp op, void* memory)
{
    XiQToolBar* me = static_cast<XiQToolBar*>(memory);
    if (op == CallCtor) {
        new (memory) XiQToolBar();
        me->createImpl();
    } else {
        me->~XiQToolBar();
    }
}

XiQToolBar::XiQToolBar()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QToolBar);
}

void XiQToolBar::addAction(XiQWidget* __thisPtr, XiQAction* a)
{
    XiQToolBar* __this = static_cast<XiQToolBar*>(__thisPtr);
     // non-virtual in QWidget somehow?
    QAction* qa = fromXi(a);
    __this->impl()->addAction(qa);
    __this->protectObject(a);
}

void XiQToolBar::addSeparator(XiQToolBar* __thisPtr)
{
    XiQToolBar* __this = static_cast<XiQToolBar*>(__thisPtr);
    __this->impl()->addSeparator();
}

XiToolButtonStyle* XiQToolBar::toolButtonStyle(XiQToolBar* __thisPtr)
{
    XiQToolBar* __this = static_cast<XiQToolBar*>(__thisPtr);
    return toXi(__this->impl()->toolButtonStyle());
}

void XiQToolBar::setToolButtonStyle(XiQToolBar* __thisPtr, XiToolButtonStyle* param0)
{
    XiQToolBar* __this = static_cast<XiQToolBar*>(__thisPtr);
    ToolButtonStyle param0__decode = fromXi(param0);
    __this->impl()->setToolButtonStyle(param0__decode);
}

void XiQToolBar::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQToolBar* __this = static_cast<XiQToolBar*>(__thisPtr);
    static_cast<Proxy<QToolBar>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

XiQToolBar_vtable XI(_vt_QToolBar);
int XI(_size_QToolBar);
void XI(_init_QToolBar)()
{
    if (XI(_size_QToolBar)) return;
    XI(_init_QWidget)();
    XI(_size_QToolBar) = sizeof(XiQToolBar);
    XI(_vt_QToolBar).addSeparator = XiQToolBar::addSeparator;
    XI(_vt_QToolBar).toolButtonStyle = XiQToolBar::toolButtonStyle;
    XI(_vt_QToolBar).setToolButtonStyle = XiQToolBar::setToolButtonStyle;
    XI(_vt_QToolBar).show = XiQToolBar::show;
    XI(_vt_QToolBar).hide = XiQToolBar::hide;
    XI(_vt_QToolBar).raise = XiQToolBar::raise;
    XI(_vt_QToolBar).lower = XiQToolBar::lower;
    XI(_vt_QToolBar).close = XiQToolBar::close;
    XI(_vt_QToolBar).isEnabled = XiQToolBar::isEnabled;
    XI(_vt_QToolBar).setEnabled = XiQToolBar::setEnabled;
    XI(_vt_QToolBar).setLayout = XiQToolBar::setLayout;
    XI(_vt_QToolBar).isWindowModified = XiQToolBar::isWindowModified;
    XI(_vt_QToolBar).setWindowModified = XiQToolBar::setWindowModified;
    XI(_vt_QToolBar).windowTitle = XiQToolBar::windowTitle;
    XI(_vt_QToolBar).setWindowTitle = XiQToolBar::setWindowTitle;
    XI(_vt_QToolBar).windowIcon = XiQToolBar::windowIcon;
    XI(_vt_QToolBar).setWindowIcon = XiQToolBar::setWindowIcon;
    XI(_vt_QToolBar).isActiveWindow = XiQToolBar::isActiveWindow;
    XI(_vt_QToolBar).activateWindow = XiQToolBar::activateWindow;
    XI(_vt_QToolBar).isMinimized = XiQToolBar::isMinimized;
    XI(_vt_QToolBar).isMaximized = XiQToolBar::isMaximized;
    XI(_vt_QToolBar).isFullScreen = XiQToolBar::isFullScreen;
    XI(_vt_QToolBar).showMinimized = XiQToolBar::showMinimized;
    XI(_vt_QToolBar).showMaximized = XiQToolBar::showMaximized;
    XI(_vt_QToolBar).showFullScreen = XiQToolBar::showFullScreen;
    XI(_vt_QToolBar).showNormal = XiQToolBar::showNormal;
    XI(_vt_QToolBar).update = XiQToolBar::update;
    XI(_vt_QToolBar).repaint = XiQToolBar::repaint;
    XI(_vt_QToolBar).setMinimumSize = XiQToolBar::setMinimumSize;
    XI(_vt_QToolBar).minimumSize = XiQToolBar::minimumSize;
    XI(_vt_QToolBar).setMaximumSize = XiQToolBar::setMaximumSize;
    XI(_vt_QToolBar).maximumSize = XiQToolBar::maximumSize;
    XI(_vt_QToolBar).setFixedSize = XiQToolBar::setFixedSize;
    XI(_vt_QToolBar).resize = XiQToolBar::resize;
    XI(_vt_QToolBar).adjustSize = XiQToolBar::adjustSize;
    XI(_vt_QToolBar).pos = XiQToolBar::pos;
    XI(_vt_QToolBar).move = XiQToolBar::move;
    XI(_vt_QToolBar).sizeHint = XiQToolBar::sizeHint;
    XI(_vt_QToolBar).minimumSizeHint = XiQToolBar::minimumSizeHint;
    XI(_vt_QToolBar).mapFrom = XiQToolBar::mapFrom;
    XI(_vt_QToolBar).mapFromGlobal = XiQToolBar::mapFromGlobal;
    XI(_vt_QToolBar).mapFromParent = XiQToolBar::mapFromParent;
    XI(_vt_QToolBar).mapTo = XiQToolBar::mapTo;
    XI(_vt_QToolBar).mapToGlobal = XiQToolBar::mapToGlobal;
    XI(_vt_QToolBar).mapToParent = XiQToolBar::mapToParent;
    XI(_vt_QToolBar).setFont = XiQToolBar::setFont;
    XI(_vt_QToolBar).font = XiQToolBar::font;
    XI(_vt_QToolBar).styleSheet = XiQToolBar::styleSheet;
    XI(_vt_QToolBar).setStyleSheet = XiQToolBar::setStyleSheet;
    XI(_vt_QToolBar).focusPolicy = XiQToolBar::focusPolicy;
    XI(_vt_QToolBar).setFocusPolicy = XiQToolBar::setFocusPolicy;
    XI(_vt_QToolBar).setFocus = XiQToolBar::setFocus;
    XI(_vt_QToolBar).clearFocus = XiQToolBar::clearFocus;
    XI(_vt_QToolBar).hasFocus = XiQToolBar::hasFocus;
    XI(_vt_QToolBar).toolTip = XiQToolBar::toolTip;
    XI(_vt_QToolBar).setToolTip = XiQToolBar::setToolTip;
    XI(_vt_QToolBar).whatsThis = XiQToolBar::whatsThis;
    XI(_vt_QToolBar).setWhatsThis = XiQToolBar::setWhatsThis;
    XI(_vt_QToolBar).hasMouseTracking = XiQToolBar::hasMouseTracking;
    XI(_vt_QToolBar).setMouseTracking = XiQToolBar::setMouseTracking;
    XI(_vt_QToolBar).addAction = XiQToolBar::addAction;
    XI(_vt_QToolBar).paintEvent = XiQToolBar::paintEvent;
    XI(_vt_QToolBar).mousePressEvent = XiQToolBar::mousePressEvent;
    XI(_vt_QToolBar).mouseReleaseEvent = XiQToolBar::mouseReleaseEvent;
    XI(_vt_QToolBar).mouseDoubleClickEvent = XiQToolBar::mouseDoubleClickEvent;
    XI(_vt_QToolBar).mouseMoveEvent = XiQToolBar::mouseMoveEvent;
    XI(_vt_QToolBar).wheelEvent = XiQToolBar::wheelEvent;
    XI(_vt_QToolBar).keyPressEvent = XiQToolBar::keyPressEvent;
    XI(_vt_QToolBar).keyReleaseEvent = XiQToolBar::keyReleaseEvent;
    XI(_vt_QToolBar).enterEvent = XiQToolBar::enterEvent;
    XI(_vt_QToolBar).leaveEvent = XiQToolBar::leaveEvent;
    XI(_vt_QToolBar).resizeEvent = XiQToolBar::resizeEvent;
    XI(_vt_QToolBar).closeEvent = XiQToolBar::closeEvent;
    XI(_vt_QToolBar).contextMenuEvent = XiQToolBar::contextMenuEvent;
    XI(_vt_QToolBar).showEvent = XiQToolBar::showEvent;
    XI(_vt_QToolBar).hideEvent = XiQToolBar::hideEvent;
    XI(_vt_QToolBar).defaultEvent = XiQToolBar::defaultEvent;
    XI(_vt_QToolBar).toPixmap = XiQToolBar::toPixmap;
    XI(_vt_QToolBar).toWidget = XiQToolBar::toWidget;
    XI(_vt_QToolBar).__classOp = XiQToolBar::__classOp;
}

XiQToolBar* XI(qtoolbar_o8QToolBar)()
{
    return toXi(new QToolBar());
}

QMenuBar* XiQMenuBar::impl()
{
    if (!initialized)
        static_cast<XiQMenuBar_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQMenuBar::invokeDtor(void* mePtr, void*)
{
    XiQMenuBar* me = static_cast<XiQMenuBar*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQMenuBar::__classOp(ClassOp op, void* memory)
{
    XiQMenuBar* me = static_cast<XiQMenuBar*>(memory);
    if (op == CallCtor) {
        new (memory) XiQMenuBar();
        me->createImpl();
    } else {
        me->~XiQMenuBar();
    }
}

XiQMenuBar::XiQMenuBar()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QMenuBar);
}

void XiQMenuBar::addMenu(XiQMenuBar* __thisPtr, XiQMenu* m)
{
    XiQMenuBar* __this = static_cast<XiQMenuBar*>(__thisPtr);
    QMenu* qm = fromXi(m);
    __this->impl()->addMenu(qm);
    __this->protectObject(m);
}

void XiQMenuBar::addSeparator(XiQMenuBar* __thisPtr)
{
    XiQMenuBar* __this = static_cast<XiQMenuBar*>(__thisPtr);
    __this->impl()->addSeparator();
}

void XiQMenuBar::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQMenuBar* __this = static_cast<XiQMenuBar*>(__thisPtr);
    static_cast<Proxy<QMenuBar>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

XiQMenuBar_vtable XI(_vt_QMenuBar);
int XI(_size_QMenuBar);
void XI(_init_QMenuBar)()
{
    if (XI(_size_QMenuBar)) return;
    XI(_init_QWidget)();
    XI(_size_QMenuBar) = sizeof(XiQMenuBar);
    XI(_vt_QMenuBar).addMenu = XiQMenuBar::addMenu;
    XI(_vt_QMenuBar).addSeparator = XiQMenuBar::addSeparator;
    XI(_vt_QMenuBar).show = XiQMenuBar::show;
    XI(_vt_QMenuBar).hide = XiQMenuBar::hide;
    XI(_vt_QMenuBar).raise = XiQMenuBar::raise;
    XI(_vt_QMenuBar).lower = XiQMenuBar::lower;
    XI(_vt_QMenuBar).close = XiQMenuBar::close;
    XI(_vt_QMenuBar).isEnabled = XiQMenuBar::isEnabled;
    XI(_vt_QMenuBar).setEnabled = XiQMenuBar::setEnabled;
    XI(_vt_QMenuBar).setLayout = XiQMenuBar::setLayout;
    XI(_vt_QMenuBar).isWindowModified = XiQMenuBar::isWindowModified;
    XI(_vt_QMenuBar).setWindowModified = XiQMenuBar::setWindowModified;
    XI(_vt_QMenuBar).windowTitle = XiQMenuBar::windowTitle;
    XI(_vt_QMenuBar).setWindowTitle = XiQMenuBar::setWindowTitle;
    XI(_vt_QMenuBar).windowIcon = XiQMenuBar::windowIcon;
    XI(_vt_QMenuBar).setWindowIcon = XiQMenuBar::setWindowIcon;
    XI(_vt_QMenuBar).isActiveWindow = XiQMenuBar::isActiveWindow;
    XI(_vt_QMenuBar).activateWindow = XiQMenuBar::activateWindow;
    XI(_vt_QMenuBar).isMinimized = XiQMenuBar::isMinimized;
    XI(_vt_QMenuBar).isMaximized = XiQMenuBar::isMaximized;
    XI(_vt_QMenuBar).isFullScreen = XiQMenuBar::isFullScreen;
    XI(_vt_QMenuBar).showMinimized = XiQMenuBar::showMinimized;
    XI(_vt_QMenuBar).showMaximized = XiQMenuBar::showMaximized;
    XI(_vt_QMenuBar).showFullScreen = XiQMenuBar::showFullScreen;
    XI(_vt_QMenuBar).showNormal = XiQMenuBar::showNormal;
    XI(_vt_QMenuBar).update = XiQMenuBar::update;
    XI(_vt_QMenuBar).repaint = XiQMenuBar::repaint;
    XI(_vt_QMenuBar).setMinimumSize = XiQMenuBar::setMinimumSize;
    XI(_vt_QMenuBar).minimumSize = XiQMenuBar::minimumSize;
    XI(_vt_QMenuBar).setMaximumSize = XiQMenuBar::setMaximumSize;
    XI(_vt_QMenuBar).maximumSize = XiQMenuBar::maximumSize;
    XI(_vt_QMenuBar).setFixedSize = XiQMenuBar::setFixedSize;
    XI(_vt_QMenuBar).resize = XiQMenuBar::resize;
    XI(_vt_QMenuBar).adjustSize = XiQMenuBar::adjustSize;
    XI(_vt_QMenuBar).pos = XiQMenuBar::pos;
    XI(_vt_QMenuBar).move = XiQMenuBar::move;
    XI(_vt_QMenuBar).sizeHint = XiQMenuBar::sizeHint;
    XI(_vt_QMenuBar).minimumSizeHint = XiQMenuBar::minimumSizeHint;
    XI(_vt_QMenuBar).mapFrom = XiQMenuBar::mapFrom;
    XI(_vt_QMenuBar).mapFromGlobal = XiQMenuBar::mapFromGlobal;
    XI(_vt_QMenuBar).mapFromParent = XiQMenuBar::mapFromParent;
    XI(_vt_QMenuBar).mapTo = XiQMenuBar::mapTo;
    XI(_vt_QMenuBar).mapToGlobal = XiQMenuBar::mapToGlobal;
    XI(_vt_QMenuBar).mapToParent = XiQMenuBar::mapToParent;
    XI(_vt_QMenuBar).setFont = XiQMenuBar::setFont;
    XI(_vt_QMenuBar).font = XiQMenuBar::font;
    XI(_vt_QMenuBar).styleSheet = XiQMenuBar::styleSheet;
    XI(_vt_QMenuBar).setStyleSheet = XiQMenuBar::setStyleSheet;
    XI(_vt_QMenuBar).focusPolicy = XiQMenuBar::focusPolicy;
    XI(_vt_QMenuBar).setFocusPolicy = XiQMenuBar::setFocusPolicy;
    XI(_vt_QMenuBar).setFocus = XiQMenuBar::setFocus;
    XI(_vt_QMenuBar).clearFocus = XiQMenuBar::clearFocus;
    XI(_vt_QMenuBar).hasFocus = XiQMenuBar::hasFocus;
    XI(_vt_QMenuBar).toolTip = XiQMenuBar::toolTip;
    XI(_vt_QMenuBar).setToolTip = XiQMenuBar::setToolTip;
    XI(_vt_QMenuBar).whatsThis = XiQMenuBar::whatsThis;
    XI(_vt_QMenuBar).setWhatsThis = XiQMenuBar::setWhatsThis;
    XI(_vt_QMenuBar).hasMouseTracking = XiQMenuBar::hasMouseTracking;
    XI(_vt_QMenuBar).setMouseTracking = XiQMenuBar::setMouseTracking;
    XI(_vt_QMenuBar).addAction = XiQMenuBar::addAction;
    XI(_vt_QMenuBar).paintEvent = XiQMenuBar::paintEvent;
    XI(_vt_QMenuBar).mousePressEvent = XiQMenuBar::mousePressEvent;
    XI(_vt_QMenuBar).mouseReleaseEvent = XiQMenuBar::mouseReleaseEvent;
    XI(_vt_QMenuBar).mouseDoubleClickEvent = XiQMenuBar::mouseDoubleClickEvent;
    XI(_vt_QMenuBar).mouseMoveEvent = XiQMenuBar::mouseMoveEvent;
    XI(_vt_QMenuBar).wheelEvent = XiQMenuBar::wheelEvent;
    XI(_vt_QMenuBar).keyPressEvent = XiQMenuBar::keyPressEvent;
    XI(_vt_QMenuBar).keyReleaseEvent = XiQMenuBar::keyReleaseEvent;
    XI(_vt_QMenuBar).enterEvent = XiQMenuBar::enterEvent;
    XI(_vt_QMenuBar).leaveEvent = XiQMenuBar::leaveEvent;
    XI(_vt_QMenuBar).resizeEvent = XiQMenuBar::resizeEvent;
    XI(_vt_QMenuBar).closeEvent = XiQMenuBar::closeEvent;
    XI(_vt_QMenuBar).contextMenuEvent = XiQMenuBar::contextMenuEvent;
    XI(_vt_QMenuBar).showEvent = XiQMenuBar::showEvent;
    XI(_vt_QMenuBar).hideEvent = XiQMenuBar::hideEvent;
    XI(_vt_QMenuBar).defaultEvent = XiQMenuBar::defaultEvent;
    XI(_vt_QMenuBar).toPixmap = XiQMenuBar::toPixmap;
    XI(_vt_QMenuBar).toWidget = XiQMenuBar::toWidget;
    XI(_vt_QMenuBar).__classOp = XiQMenuBar::__classOp;
}

QLabel* XiQLabel::impl()
{
    if (!initialized)
        static_cast<XiQLabel_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQLabel::invokeDtor(void* mePtr, void*)
{
    XiQLabel* me = static_cast<XiQLabel*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQLabel::__classOp(ClassOp op, void* memory)
{
    XiQLabel* me = static_cast<XiQLabel*>(memory);
    if (op == CallCtor) {
        new (memory) XiQLabel();
        me->createImpl();
    } else {
        me->~XiQLabel();
    }
}

XiQLabel::XiQLabel()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QLabel);
}

void XiQLabel::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    static_cast<Proxy<wrappedType>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

int XiQLabel::margin(XiQLabel* __thisPtr)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    return toXi(__this->impl()->margin());
}

void XiQLabel::setMargin(XiQLabel* __thisPtr, int param0)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setMargin(param0__decode);
}

int XiQLabel::indent(XiQLabel* __thisPtr)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    return toXi(__this->impl()->indent());
}

void XiQLabel::setIndent(XiQLabel* __thisPtr, int param0)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setIndent(param0__decode);
}

void XiQLabel::setBuddy(XiQLabel* __thisPtr, XiQWidget* buddy)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    QWidget* buddy__decode = fromXi(buddy);
    __this->impl()->setBuddy(buddy__decode);
}

XiQString* XiQLabel::text(XiQLabel* __thisPtr)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    return toXi(__this->impl()->text());
}

void XiQLabel::setText(XiQLabel* __thisPtr, XiQString* param0)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setText(param0__decode);
}

bool XiQLabel::wordWrap(XiQLabel* __thisPtr)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    return toXi(__this->impl()->wordWrap());
}

void XiQLabel::setWordWrap(XiQLabel* __thisPtr, bool param0)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setWordWrap(param0__decode);
}

void XiQLabel::setPixmap(XiQLabel* __thisPtr, XiQPixmap* p)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    QPixmap* qp = fromXi(p);
    __this->impl()->setPixmap(*qp);
}

XiQPixmap* XiQLabel::pixmap(XiQLabel* __thisPtr)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    const QPixmap* p = __this->impl()->pixmap();
    if (p)
        return toXi(*p);
    else
        return 0;
}

bool XiQLabel::hasScaledContents(XiQLabel* __thisPtr)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    return toXi(__this->impl()->hasScaledContents());
}

void XiQLabel::setScaledContents(XiQLabel* __thisPtr, bool param0)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setScaledContents(param0__decode);
}

bool XiQLabel::openExternalLinks(XiQLabel* __thisPtr)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    return toXi(__this->impl()->openExternalLinks());
}

void XiQLabel::setOpenExternalLinks(XiQLabel* __thisPtr, bool param0)
{
    XiQLabel* __this = static_cast<XiQLabel*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setOpenExternalLinks(param0__decode);
}

XiQLabel_vtable XI(_vt_QLabel);
int XI(_size_QLabel);
void XI(_init_QLabel)()
{
    if (XI(_size_QLabel)) return;
    XI(_init_QWidget)();
    XI(_size_QLabel) = sizeof(XiQLabel);
    XI(_vt_QLabel).margin = XiQLabel::margin;
    XI(_vt_QLabel).setMargin = XiQLabel::setMargin;
    XI(_vt_QLabel).indent = XiQLabel::indent;
    XI(_vt_QLabel).setIndent = XiQLabel::setIndent;
    XI(_vt_QLabel).setBuddy = XiQLabel::setBuddy;
    XI(_vt_QLabel).text = XiQLabel::text;
    XI(_vt_QLabel).setText = XiQLabel::setText;
    XI(_vt_QLabel).wordWrap = XiQLabel::wordWrap;
    XI(_vt_QLabel).setWordWrap = XiQLabel::setWordWrap;
    XI(_vt_QLabel).setPixmap = XiQLabel::setPixmap;
    XI(_vt_QLabel).pixmap = XiQLabel::pixmap;
    XI(_vt_QLabel).hasScaledContents = XiQLabel::hasScaledContents;
    XI(_vt_QLabel).setScaledContents = XiQLabel::setScaledContents;
    XI(_vt_QLabel).openExternalLinks = XiQLabel::openExternalLinks;
    XI(_vt_QLabel).setOpenExternalLinks = XiQLabel::setOpenExternalLinks;
    XI(_vt_QLabel).show = XiQLabel::show;
    XI(_vt_QLabel).hide = XiQLabel::hide;
    XI(_vt_QLabel).raise = XiQLabel::raise;
    XI(_vt_QLabel).lower = XiQLabel::lower;
    XI(_vt_QLabel).close = XiQLabel::close;
    XI(_vt_QLabel).isEnabled = XiQLabel::isEnabled;
    XI(_vt_QLabel).setEnabled = XiQLabel::setEnabled;
    XI(_vt_QLabel).setLayout = XiQLabel::setLayout;
    XI(_vt_QLabel).isWindowModified = XiQLabel::isWindowModified;
    XI(_vt_QLabel).setWindowModified = XiQLabel::setWindowModified;
    XI(_vt_QLabel).windowTitle = XiQLabel::windowTitle;
    XI(_vt_QLabel).setWindowTitle = XiQLabel::setWindowTitle;
    XI(_vt_QLabel).windowIcon = XiQLabel::windowIcon;
    XI(_vt_QLabel).setWindowIcon = XiQLabel::setWindowIcon;
    XI(_vt_QLabel).isActiveWindow = XiQLabel::isActiveWindow;
    XI(_vt_QLabel).activateWindow = XiQLabel::activateWindow;
    XI(_vt_QLabel).isMinimized = XiQLabel::isMinimized;
    XI(_vt_QLabel).isMaximized = XiQLabel::isMaximized;
    XI(_vt_QLabel).isFullScreen = XiQLabel::isFullScreen;
    XI(_vt_QLabel).showMinimized = XiQLabel::showMinimized;
    XI(_vt_QLabel).showMaximized = XiQLabel::showMaximized;
    XI(_vt_QLabel).showFullScreen = XiQLabel::showFullScreen;
    XI(_vt_QLabel).showNormal = XiQLabel::showNormal;
    XI(_vt_QLabel).update = XiQLabel::update;
    XI(_vt_QLabel).repaint = XiQLabel::repaint;
    XI(_vt_QLabel).setMinimumSize = XiQLabel::setMinimumSize;
    XI(_vt_QLabel).minimumSize = XiQLabel::minimumSize;
    XI(_vt_QLabel).setMaximumSize = XiQLabel::setMaximumSize;
    XI(_vt_QLabel).maximumSize = XiQLabel::maximumSize;
    XI(_vt_QLabel).setFixedSize = XiQLabel::setFixedSize;
    XI(_vt_QLabel).resize = XiQLabel::resize;
    XI(_vt_QLabel).adjustSize = XiQLabel::adjustSize;
    XI(_vt_QLabel).pos = XiQLabel::pos;
    XI(_vt_QLabel).move = XiQLabel::move;
    XI(_vt_QLabel).sizeHint = XiQLabel::sizeHint;
    XI(_vt_QLabel).minimumSizeHint = XiQLabel::minimumSizeHint;
    XI(_vt_QLabel).mapFrom = XiQLabel::mapFrom;
    XI(_vt_QLabel).mapFromGlobal = XiQLabel::mapFromGlobal;
    XI(_vt_QLabel).mapFromParent = XiQLabel::mapFromParent;
    XI(_vt_QLabel).mapTo = XiQLabel::mapTo;
    XI(_vt_QLabel).mapToGlobal = XiQLabel::mapToGlobal;
    XI(_vt_QLabel).mapToParent = XiQLabel::mapToParent;
    XI(_vt_QLabel).setFont = XiQLabel::setFont;
    XI(_vt_QLabel).font = XiQLabel::font;
    XI(_vt_QLabel).styleSheet = XiQLabel::styleSheet;
    XI(_vt_QLabel).setStyleSheet = XiQLabel::setStyleSheet;
    XI(_vt_QLabel).focusPolicy = XiQLabel::focusPolicy;
    XI(_vt_QLabel).setFocusPolicy = XiQLabel::setFocusPolicy;
    XI(_vt_QLabel).setFocus = XiQLabel::setFocus;
    XI(_vt_QLabel).clearFocus = XiQLabel::clearFocus;
    XI(_vt_QLabel).hasFocus = XiQLabel::hasFocus;
    XI(_vt_QLabel).toolTip = XiQLabel::toolTip;
    XI(_vt_QLabel).setToolTip = XiQLabel::setToolTip;
    XI(_vt_QLabel).whatsThis = XiQLabel::whatsThis;
    XI(_vt_QLabel).setWhatsThis = XiQLabel::setWhatsThis;
    XI(_vt_QLabel).hasMouseTracking = XiQLabel::hasMouseTracking;
    XI(_vt_QLabel).setMouseTracking = XiQLabel::setMouseTracking;
    XI(_vt_QLabel).addAction = XiQLabel::addAction;
    XI(_vt_QLabel).paintEvent = XiQLabel::paintEvent;
    XI(_vt_QLabel).mousePressEvent = XiQLabel::mousePressEvent;
    XI(_vt_QLabel).mouseReleaseEvent = XiQLabel::mouseReleaseEvent;
    XI(_vt_QLabel).mouseDoubleClickEvent = XiQLabel::mouseDoubleClickEvent;
    XI(_vt_QLabel).mouseMoveEvent = XiQLabel::mouseMoveEvent;
    XI(_vt_QLabel).wheelEvent = XiQLabel::wheelEvent;
    XI(_vt_QLabel).keyPressEvent = XiQLabel::keyPressEvent;
    XI(_vt_QLabel).keyReleaseEvent = XiQLabel::keyReleaseEvent;
    XI(_vt_QLabel).enterEvent = XiQLabel::enterEvent;
    XI(_vt_QLabel).leaveEvent = XiQLabel::leaveEvent;
    XI(_vt_QLabel).resizeEvent = XiQLabel::resizeEvent;
    XI(_vt_QLabel).closeEvent = XiQLabel::closeEvent;
    XI(_vt_QLabel).contextMenuEvent = XiQLabel::contextMenuEvent;
    XI(_vt_QLabel).showEvent = XiQLabel::showEvent;
    XI(_vt_QLabel).hideEvent = XiQLabel::hideEvent;
    XI(_vt_QLabel).defaultEvent = XiQLabel::defaultEvent;
    XI(_vt_QLabel).toPixmap = XiQLabel::toPixmap;
    XI(_vt_QLabel).toWidget = XiQLabel::toWidget;
    XI(_vt_QLabel).__classOp = XiQLabel::__classOp;
}

XiQLabel* XI(qlabel_o6QLabelo7QString)(XiQString* text)
{
    XiQLabel* l = gcNew<XiQLabel>();
    l->setObject(new QLabel(fromXi(text)));
    return l;
}

XiQLabel* XI(qlabelPixmap_o6QLabelo7QPixmap)(XiQPixmap* p)
{
    XiQLabel* l = gcNew<XiQLabel>();
    l->impl()->setPixmap(*fromXi(p));
    return l;
}

QMainWindow* XiQMainWindow::impl()
{
    if (!initialized)
        static_cast<XiQMainWindow_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQMainWindow::invokeDtor(void* mePtr, void*)
{
    XiQMainWindow* me = static_cast<XiQMainWindow*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQMainWindow::__classOp(ClassOp op, void* memory)
{
    XiQMainWindow* me = static_cast<XiQMainWindow*>(memory);
    if (op == CallCtor) {
        new (memory) XiQMainWindow();
        me->createImpl();
    } else {
        me->~XiQMainWindow();
    }
}

XiQMainWindow::XiQMainWindow()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QMainWindow);
}

void XiQMainWindow::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQMainWindow* __this = static_cast<XiQMainWindow*>(__thisPtr);
    static_cast<Proxy<wrappedType>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

void XiQMainWindow::addToolBar(XiQMainWindow* __thisPtr, XiQToolBar* t)
{
    XiQMainWindow* __this = static_cast<XiQMainWindow*>(__thisPtr);
    QToolBar* qt = fromXi(t);
    __this->impl()->addToolBar(qt);
    __this->protectObject(t);
}

XiQMenuBar* XiQMainWindow::menuBar(XiQMainWindow* __thisPtr)
{
    XiQMainWindow* __this = static_cast<XiQMainWindow*>(__thisPtr);
    return toXi(__this->impl()->menuBar());
}

void XiQMainWindow::setCentralWidget(XiQMainWindow* __thisPtr, XiQWidget* w)
{
    XiQMainWindow* __this = static_cast<XiQMainWindow*>(__thisPtr);
    QWidget* w__decode = fromXi(w);
    __this->impl()->setCentralWidget(w__decode);
}

XiQMainWindow_vtable XI(_vt_QMainWindow);
int XI(_size_QMainWindow);
void XI(_init_QMainWindow)()
{
    if (XI(_size_QMainWindow)) return;
    XI(_init_QWidget)();
    XI(_size_QMainWindow) = sizeof(XiQMainWindow);
    XI(_vt_QMainWindow).addToolBar = XiQMainWindow::addToolBar;
    XI(_vt_QMainWindow).menuBar = XiQMainWindow::menuBar;
    XI(_vt_QMainWindow).setCentralWidget = XiQMainWindow::setCentralWidget;
    XI(_vt_QMainWindow).show = XiQMainWindow::show;
    XI(_vt_QMainWindow).hide = XiQMainWindow::hide;
    XI(_vt_QMainWindow).raise = XiQMainWindow::raise;
    XI(_vt_QMainWindow).lower = XiQMainWindow::lower;
    XI(_vt_QMainWindow).close = XiQMainWindow::close;
    XI(_vt_QMainWindow).isEnabled = XiQMainWindow::isEnabled;
    XI(_vt_QMainWindow).setEnabled = XiQMainWindow::setEnabled;
    XI(_vt_QMainWindow).setLayout = XiQMainWindow::setLayout;
    XI(_vt_QMainWindow).isWindowModified = XiQMainWindow::isWindowModified;
    XI(_vt_QMainWindow).setWindowModified = XiQMainWindow::setWindowModified;
    XI(_vt_QMainWindow).windowTitle = XiQMainWindow::windowTitle;
    XI(_vt_QMainWindow).setWindowTitle = XiQMainWindow::setWindowTitle;
    XI(_vt_QMainWindow).windowIcon = XiQMainWindow::windowIcon;
    XI(_vt_QMainWindow).setWindowIcon = XiQMainWindow::setWindowIcon;
    XI(_vt_QMainWindow).isActiveWindow = XiQMainWindow::isActiveWindow;
    XI(_vt_QMainWindow).activateWindow = XiQMainWindow::activateWindow;
    XI(_vt_QMainWindow).isMinimized = XiQMainWindow::isMinimized;
    XI(_vt_QMainWindow).isMaximized = XiQMainWindow::isMaximized;
    XI(_vt_QMainWindow).isFullScreen = XiQMainWindow::isFullScreen;
    XI(_vt_QMainWindow).showMinimized = XiQMainWindow::showMinimized;
    XI(_vt_QMainWindow).showMaximized = XiQMainWindow::showMaximized;
    XI(_vt_QMainWindow).showFullScreen = XiQMainWindow::showFullScreen;
    XI(_vt_QMainWindow).showNormal = XiQMainWindow::showNormal;
    XI(_vt_QMainWindow).update = XiQMainWindow::update;
    XI(_vt_QMainWindow).repaint = XiQMainWindow::repaint;
    XI(_vt_QMainWindow).setMinimumSize = XiQMainWindow::setMinimumSize;
    XI(_vt_QMainWindow).minimumSize = XiQMainWindow::minimumSize;
    XI(_vt_QMainWindow).setMaximumSize = XiQMainWindow::setMaximumSize;
    XI(_vt_QMainWindow).maximumSize = XiQMainWindow::maximumSize;
    XI(_vt_QMainWindow).setFixedSize = XiQMainWindow::setFixedSize;
    XI(_vt_QMainWindow).resize = XiQMainWindow::resize;
    XI(_vt_QMainWindow).adjustSize = XiQMainWindow::adjustSize;
    XI(_vt_QMainWindow).pos = XiQMainWindow::pos;
    XI(_vt_QMainWindow).move = XiQMainWindow::move;
    XI(_vt_QMainWindow).sizeHint = XiQMainWindow::sizeHint;
    XI(_vt_QMainWindow).minimumSizeHint = XiQMainWindow::minimumSizeHint;
    XI(_vt_QMainWindow).mapFrom = XiQMainWindow::mapFrom;
    XI(_vt_QMainWindow).mapFromGlobal = XiQMainWindow::mapFromGlobal;
    XI(_vt_QMainWindow).mapFromParent = XiQMainWindow::mapFromParent;
    XI(_vt_QMainWindow).mapTo = XiQMainWindow::mapTo;
    XI(_vt_QMainWindow).mapToGlobal = XiQMainWindow::mapToGlobal;
    XI(_vt_QMainWindow).mapToParent = XiQMainWindow::mapToParent;
    XI(_vt_QMainWindow).setFont = XiQMainWindow::setFont;
    XI(_vt_QMainWindow).font = XiQMainWindow::font;
    XI(_vt_QMainWindow).styleSheet = XiQMainWindow::styleSheet;
    XI(_vt_QMainWindow).setStyleSheet = XiQMainWindow::setStyleSheet;
    XI(_vt_QMainWindow).focusPolicy = XiQMainWindow::focusPolicy;
    XI(_vt_QMainWindow).setFocusPolicy = XiQMainWindow::setFocusPolicy;
    XI(_vt_QMainWindow).setFocus = XiQMainWindow::setFocus;
    XI(_vt_QMainWindow).clearFocus = XiQMainWindow::clearFocus;
    XI(_vt_QMainWindow).hasFocus = XiQMainWindow::hasFocus;
    XI(_vt_QMainWindow).toolTip = XiQMainWindow::toolTip;
    XI(_vt_QMainWindow).setToolTip = XiQMainWindow::setToolTip;
    XI(_vt_QMainWindow).whatsThis = XiQMainWindow::whatsThis;
    XI(_vt_QMainWindow).setWhatsThis = XiQMainWindow::setWhatsThis;
    XI(_vt_QMainWindow).hasMouseTracking = XiQMainWindow::hasMouseTracking;
    XI(_vt_QMainWindow).setMouseTracking = XiQMainWindow::setMouseTracking;
    XI(_vt_QMainWindow).addAction = XiQMainWindow::addAction;
    XI(_vt_QMainWindow).paintEvent = XiQMainWindow::paintEvent;
    XI(_vt_QMainWindow).mousePressEvent = XiQMainWindow::mousePressEvent;
    XI(_vt_QMainWindow).mouseReleaseEvent = XiQMainWindow::mouseReleaseEvent;
    XI(_vt_QMainWindow).mouseDoubleClickEvent = XiQMainWindow::mouseDoubleClickEvent;
    XI(_vt_QMainWindow).mouseMoveEvent = XiQMainWindow::mouseMoveEvent;
    XI(_vt_QMainWindow).wheelEvent = XiQMainWindow::wheelEvent;
    XI(_vt_QMainWindow).keyPressEvent = XiQMainWindow::keyPressEvent;
    XI(_vt_QMainWindow).keyReleaseEvent = XiQMainWindow::keyReleaseEvent;
    XI(_vt_QMainWindow).enterEvent = XiQMainWindow::enterEvent;
    XI(_vt_QMainWindow).leaveEvent = XiQMainWindow::leaveEvent;
    XI(_vt_QMainWindow).resizeEvent = XiQMainWindow::resizeEvent;
    XI(_vt_QMainWindow).closeEvent = XiQMainWindow::closeEvent;
    XI(_vt_QMainWindow).contextMenuEvent = XiQMainWindow::contextMenuEvent;
    XI(_vt_QMainWindow).showEvent = XiQMainWindow::showEvent;
    XI(_vt_QMainWindow).hideEvent = XiQMainWindow::hideEvent;
    XI(_vt_QMainWindow).defaultEvent = XiQMainWindow::defaultEvent;
    XI(_vt_QMainWindow).toPixmap = XiQMainWindow::toPixmap;
    XI(_vt_QMainWindow).toWidget = XiQMainWindow::toWidget;
    XI(_vt_QMainWindow).__classOp = XiQMainWindow::__classOp;
}

XiQMainWindow* XI(qmainwindow_o11QMainWindow)()
{
    return toXi(new QMainWindow());
}

QGroupBox* XiQGroupBox::impl()
{
    if (!initialized)
        static_cast<XiQGroupBox_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQGroupBox::invokeDtor(void* mePtr, void*)
{
    XiQGroupBox* me = static_cast<XiQGroupBox*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQGroupBox::__classOp(ClassOp op, void* memory)
{
    XiQGroupBox* me = static_cast<XiQGroupBox*>(memory);
    if (op == CallCtor) {
        new (memory) XiQGroupBox();
        me->createImpl();
    } else {
        me->~XiQGroupBox();
    }
}

XiQGroupBox::XiQGroupBox()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QGroupBox);
}

void XiQGroupBox::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQGroupBox* __this = static_cast<XiQGroupBox*>(__thisPtr);
    static_cast<Proxy<wrappedType>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

XiQString* XiQGroupBox::title(XiQGroupBox* __thisPtr)
{
    XiQGroupBox* __this = static_cast<XiQGroupBox*>(__thisPtr);
    return toXi(__this->impl()->title());
}

void XiQGroupBox::setTitle(XiQGroupBox* __thisPtr, XiQString* t)
{
    XiQGroupBox* __this = static_cast<XiQGroupBox*>(__thisPtr);
    QString t__decode = fromXi(t);
    __this->impl()->setTitle(t__decode);
}

void XiQGroupBox::setFlat(XiQGroupBox* __thisPtr, bool param0)
{
    XiQGroupBox* __this = static_cast<XiQGroupBox*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setFlat(param0__decode);
}

bool XiQGroupBox::isFlat(XiQGroupBox* __thisPtr)
{
    XiQGroupBox* __this = static_cast<XiQGroupBox*>(__thisPtr);
    return toXi(__this->impl()->isFlat());
}

XiQGroupBox_vtable XI(_vt_QGroupBox);
int XI(_size_QGroupBox);
void XI(_init_QGroupBox)()
{
    if (XI(_size_QGroupBox)) return;
    XI(_init_QWidget)();
    XI(_size_QGroupBox) = sizeof(XiQGroupBox);
    XI(_vt_QGroupBox).title = XiQGroupBox::title;
    XI(_vt_QGroupBox).setTitle = XiQGroupBox::setTitle;
    XI(_vt_QGroupBox).setFlat = XiQGroupBox::setFlat;
    XI(_vt_QGroupBox).isFlat = XiQGroupBox::isFlat;
    XI(_vt_QGroupBox).show = XiQGroupBox::show;
    XI(_vt_QGroupBox).hide = XiQGroupBox::hide;
    XI(_vt_QGroupBox).raise = XiQGroupBox::raise;
    XI(_vt_QGroupBox).lower = XiQGroupBox::lower;
    XI(_vt_QGroupBox).close = XiQGroupBox::close;
    XI(_vt_QGroupBox).isEnabled = XiQGroupBox::isEnabled;
    XI(_vt_QGroupBox).setEnabled = XiQGroupBox::setEnabled;
    XI(_vt_QGroupBox).setLayout = XiQGroupBox::setLayout;
    XI(_vt_QGroupBox).isWindowModified = XiQGroupBox::isWindowModified;
    XI(_vt_QGroupBox).setWindowModified = XiQGroupBox::setWindowModified;
    XI(_vt_QGroupBox).windowTitle = XiQGroupBox::windowTitle;
    XI(_vt_QGroupBox).setWindowTitle = XiQGroupBox::setWindowTitle;
    XI(_vt_QGroupBox).windowIcon = XiQGroupBox::windowIcon;
    XI(_vt_QGroupBox).setWindowIcon = XiQGroupBox::setWindowIcon;
    XI(_vt_QGroupBox).isActiveWindow = XiQGroupBox::isActiveWindow;
    XI(_vt_QGroupBox).activateWindow = XiQGroupBox::activateWindow;
    XI(_vt_QGroupBox).isMinimized = XiQGroupBox::isMinimized;
    XI(_vt_QGroupBox).isMaximized = XiQGroupBox::isMaximized;
    XI(_vt_QGroupBox).isFullScreen = XiQGroupBox::isFullScreen;
    XI(_vt_QGroupBox).showMinimized = XiQGroupBox::showMinimized;
    XI(_vt_QGroupBox).showMaximized = XiQGroupBox::showMaximized;
    XI(_vt_QGroupBox).showFullScreen = XiQGroupBox::showFullScreen;
    XI(_vt_QGroupBox).showNormal = XiQGroupBox::showNormal;
    XI(_vt_QGroupBox).update = XiQGroupBox::update;
    XI(_vt_QGroupBox).repaint = XiQGroupBox::repaint;
    XI(_vt_QGroupBox).setMinimumSize = XiQGroupBox::setMinimumSize;
    XI(_vt_QGroupBox).minimumSize = XiQGroupBox::minimumSize;
    XI(_vt_QGroupBox).setMaximumSize = XiQGroupBox::setMaximumSize;
    XI(_vt_QGroupBox).maximumSize = XiQGroupBox::maximumSize;
    XI(_vt_QGroupBox).setFixedSize = XiQGroupBox::setFixedSize;
    XI(_vt_QGroupBox).resize = XiQGroupBox::resize;
    XI(_vt_QGroupBox).adjustSize = XiQGroupBox::adjustSize;
    XI(_vt_QGroupBox).pos = XiQGroupBox::pos;
    XI(_vt_QGroupBox).move = XiQGroupBox::move;
    XI(_vt_QGroupBox).sizeHint = XiQGroupBox::sizeHint;
    XI(_vt_QGroupBox).minimumSizeHint = XiQGroupBox::minimumSizeHint;
    XI(_vt_QGroupBox).mapFrom = XiQGroupBox::mapFrom;
    XI(_vt_QGroupBox).mapFromGlobal = XiQGroupBox::mapFromGlobal;
    XI(_vt_QGroupBox).mapFromParent = XiQGroupBox::mapFromParent;
    XI(_vt_QGroupBox).mapTo = XiQGroupBox::mapTo;
    XI(_vt_QGroupBox).mapToGlobal = XiQGroupBox::mapToGlobal;
    XI(_vt_QGroupBox).mapToParent = XiQGroupBox::mapToParent;
    XI(_vt_QGroupBox).setFont = XiQGroupBox::setFont;
    XI(_vt_QGroupBox).font = XiQGroupBox::font;
    XI(_vt_QGroupBox).styleSheet = XiQGroupBox::styleSheet;
    XI(_vt_QGroupBox).setStyleSheet = XiQGroupBox::setStyleSheet;
    XI(_vt_QGroupBox).focusPolicy = XiQGroupBox::focusPolicy;
    XI(_vt_QGroupBox).setFocusPolicy = XiQGroupBox::setFocusPolicy;
    XI(_vt_QGroupBox).setFocus = XiQGroupBox::setFocus;
    XI(_vt_QGroupBox).clearFocus = XiQGroupBox::clearFocus;
    XI(_vt_QGroupBox).hasFocus = XiQGroupBox::hasFocus;
    XI(_vt_QGroupBox).toolTip = XiQGroupBox::toolTip;
    XI(_vt_QGroupBox).setToolTip = XiQGroupBox::setToolTip;
    XI(_vt_QGroupBox).whatsThis = XiQGroupBox::whatsThis;
    XI(_vt_QGroupBox).setWhatsThis = XiQGroupBox::setWhatsThis;
    XI(_vt_QGroupBox).hasMouseTracking = XiQGroupBox::hasMouseTracking;
    XI(_vt_QGroupBox).setMouseTracking = XiQGroupBox::setMouseTracking;
    XI(_vt_QGroupBox).addAction = XiQGroupBox::addAction;
    XI(_vt_QGroupBox).paintEvent = XiQGroupBox::paintEvent;
    XI(_vt_QGroupBox).mousePressEvent = XiQGroupBox::mousePressEvent;
    XI(_vt_QGroupBox).mouseReleaseEvent = XiQGroupBox::mouseReleaseEvent;
    XI(_vt_QGroupBox).mouseDoubleClickEvent = XiQGroupBox::mouseDoubleClickEvent;
    XI(_vt_QGroupBox).mouseMoveEvent = XiQGroupBox::mouseMoveEvent;
    XI(_vt_QGroupBox).wheelEvent = XiQGroupBox::wheelEvent;
    XI(_vt_QGroupBox).keyPressEvent = XiQGroupBox::keyPressEvent;
    XI(_vt_QGroupBox).keyReleaseEvent = XiQGroupBox::keyReleaseEvent;
    XI(_vt_QGroupBox).enterEvent = XiQGroupBox::enterEvent;
    XI(_vt_QGroupBox).leaveEvent = XiQGroupBox::leaveEvent;
    XI(_vt_QGroupBox).resizeEvent = XiQGroupBox::resizeEvent;
    XI(_vt_QGroupBox).closeEvent = XiQGroupBox::closeEvent;
    XI(_vt_QGroupBox).contextMenuEvent = XiQGroupBox::contextMenuEvent;
    XI(_vt_QGroupBox).showEvent = XiQGroupBox::showEvent;
    XI(_vt_QGroupBox).hideEvent = XiQGroupBox::hideEvent;
    XI(_vt_QGroupBox).defaultEvent = XiQGroupBox::defaultEvent;
    XI(_vt_QGroupBox).toPixmap = XiQGroupBox::toPixmap;
    XI(_vt_QGroupBox).toWidget = XiQGroupBox::toWidget;
    XI(_vt_QGroupBox).__classOp = XiQGroupBox::__classOp;
}

XiQGroupBox* XI(qgroupbox_o9QGroupBoxo7QString)(XiQString* title)
{
    return toXi(new QGroupBox(fromXi(title)));
}

XiDialogCode::XiDialogCode()
{
    if (!vptr)
        vptr = &XI(_vt_DialogCode);
}

XiDialogCode* XI(Accepted_o10DialogCode)()
{
    static XiDialogCode* c = gcNew<XiDialogCode>();
    c->value = QDialog::Accepted;
    return c;
}

XiDialogCode* XI(Rejected_o10DialogCode)()
{
    static XiDialogCode* c = gcNew<XiDialogCode>();
    c->value = QDialog::Rejected;
    return c;
}

XiDialogCode_vtable XI(_vt_DialogCode);
int XI(_size_DialogCode);
void XI(_init_DialogCode)()
{
    if (XI(_size_DialogCode)) return;
    XI(_size_DialogCode) = sizeof(XiDialogCode);
}

QDialog* XiQDialog::impl()
{
    if (!initialized)
        static_cast<XiQDialog_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQDialog::invokeDtor(void* mePtr, void*)
{
    XiQDialog* me = static_cast<XiQDialog*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQDialog::__classOp(ClassOp op, void* memory)
{
    XiQDialog* me = static_cast<XiQDialog*>(memory);
    if (op == CallCtor) {
        new (memory) XiQDialog();
        me->createImpl();
    } else {
        me->~XiQDialog();
    }
}

XiQDialog::XiQDialog()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QDialog);
}

void XiQDialog::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQDialog* __this = static_cast<XiQDialog*>(__thisPtr);
    static_cast<Proxy<wrappedType>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

int XiQDialog::exec(XiQDialog* __thisPtr)
{
    XiQDialog* __this = static_cast<XiQDialog*>(__thisPtr);
    return toXi(__this->impl()->exec());
}

void XiQDialog::accept(XiQDialog* __thisPtr)
{
    XiQDialog* __this = static_cast<XiQDialog*>(__thisPtr);
    __this->impl()->accept();
}

void XiQDialog::reject(XiQDialog* __thisPtr)
{
    XiQDialog* __this = static_cast<XiQDialog*>(__thisPtr);
    __this->impl()->reject();
}

XiQDialog_vtable XI(_vt_QDialog);
int XI(_size_QDialog);
void XI(_init_QDialog)()
{
    if (XI(_size_QDialog)) return;
    XI(_init_QWidget)();
    XI(_size_QDialog) = sizeof(XiQDialog);
    XI(_vt_QDialog).exec = XiQDialog::exec;
    XI(_vt_QDialog).accept = XiQDialog::accept;
    XI(_vt_QDialog).reject = XiQDialog::reject;
    XI(_vt_QDialog).show = XiQDialog::show;
    XI(_vt_QDialog).hide = XiQDialog::hide;
    XI(_vt_QDialog).raise = XiQDialog::raise;
    XI(_vt_QDialog).lower = XiQDialog::lower;
    XI(_vt_QDialog).close = XiQDialog::close;
    XI(_vt_QDialog).isEnabled = XiQDialog::isEnabled;
    XI(_vt_QDialog).setEnabled = XiQDialog::setEnabled;
    XI(_vt_QDialog).setLayout = XiQDialog::setLayout;
    XI(_vt_QDialog).isWindowModified = XiQDialog::isWindowModified;
    XI(_vt_QDialog).setWindowModified = XiQDialog::setWindowModified;
    XI(_vt_QDialog).windowTitle = XiQDialog::windowTitle;
    XI(_vt_QDialog).setWindowTitle = XiQDialog::setWindowTitle;
    XI(_vt_QDialog).windowIcon = XiQDialog::windowIcon;
    XI(_vt_QDialog).setWindowIcon = XiQDialog::setWindowIcon;
    XI(_vt_QDialog).isActiveWindow = XiQDialog::isActiveWindow;
    XI(_vt_QDialog).activateWindow = XiQDialog::activateWindow;
    XI(_vt_QDialog).isMinimized = XiQDialog::isMinimized;
    XI(_vt_QDialog).isMaximized = XiQDialog::isMaximized;
    XI(_vt_QDialog).isFullScreen = XiQDialog::isFullScreen;
    XI(_vt_QDialog).showMinimized = XiQDialog::showMinimized;
    XI(_vt_QDialog).showMaximized = XiQDialog::showMaximized;
    XI(_vt_QDialog).showFullScreen = XiQDialog::showFullScreen;
    XI(_vt_QDialog).showNormal = XiQDialog::showNormal;
    XI(_vt_QDialog).update = XiQDialog::update;
    XI(_vt_QDialog).repaint = XiQDialog::repaint;
    XI(_vt_QDialog).setMinimumSize = XiQDialog::setMinimumSize;
    XI(_vt_QDialog).minimumSize = XiQDialog::minimumSize;
    XI(_vt_QDialog).setMaximumSize = XiQDialog::setMaximumSize;
    XI(_vt_QDialog).maximumSize = XiQDialog::maximumSize;
    XI(_vt_QDialog).setFixedSize = XiQDialog::setFixedSize;
    XI(_vt_QDialog).resize = XiQDialog::resize;
    XI(_vt_QDialog).adjustSize = XiQDialog::adjustSize;
    XI(_vt_QDialog).pos = XiQDialog::pos;
    XI(_vt_QDialog).move = XiQDialog::move;
    XI(_vt_QDialog).sizeHint = XiQDialog::sizeHint;
    XI(_vt_QDialog).minimumSizeHint = XiQDialog::minimumSizeHint;
    XI(_vt_QDialog).mapFrom = XiQDialog::mapFrom;
    XI(_vt_QDialog).mapFromGlobal = XiQDialog::mapFromGlobal;
    XI(_vt_QDialog).mapFromParent = XiQDialog::mapFromParent;
    XI(_vt_QDialog).mapTo = XiQDialog::mapTo;
    XI(_vt_QDialog).mapToGlobal = XiQDialog::mapToGlobal;
    XI(_vt_QDialog).mapToParent = XiQDialog::mapToParent;
    XI(_vt_QDialog).setFont = XiQDialog::setFont;
    XI(_vt_QDialog).font = XiQDialog::font;
    XI(_vt_QDialog).styleSheet = XiQDialog::styleSheet;
    XI(_vt_QDialog).setStyleSheet = XiQDialog::setStyleSheet;
    XI(_vt_QDialog).focusPolicy = XiQDialog::focusPolicy;
    XI(_vt_QDialog).setFocusPolicy = XiQDialog::setFocusPolicy;
    XI(_vt_QDialog).setFocus = XiQDialog::setFocus;
    XI(_vt_QDialog).clearFocus = XiQDialog::clearFocus;
    XI(_vt_QDialog).hasFocus = XiQDialog::hasFocus;
    XI(_vt_QDialog).toolTip = XiQDialog::toolTip;
    XI(_vt_QDialog).setToolTip = XiQDialog::setToolTip;
    XI(_vt_QDialog).whatsThis = XiQDialog::whatsThis;
    XI(_vt_QDialog).setWhatsThis = XiQDialog::setWhatsThis;
    XI(_vt_QDialog).hasMouseTracking = XiQDialog::hasMouseTracking;
    XI(_vt_QDialog).setMouseTracking = XiQDialog::setMouseTracking;
    XI(_vt_QDialog).addAction = XiQDialog::addAction;
    XI(_vt_QDialog).paintEvent = XiQDialog::paintEvent;
    XI(_vt_QDialog).mousePressEvent = XiQDialog::mousePressEvent;
    XI(_vt_QDialog).mouseReleaseEvent = XiQDialog::mouseReleaseEvent;
    XI(_vt_QDialog).mouseDoubleClickEvent = XiQDialog::mouseDoubleClickEvent;
    XI(_vt_QDialog).mouseMoveEvent = XiQDialog::mouseMoveEvent;
    XI(_vt_QDialog).wheelEvent = XiQDialog::wheelEvent;
    XI(_vt_QDialog).keyPressEvent = XiQDialog::keyPressEvent;
    XI(_vt_QDialog).keyReleaseEvent = XiQDialog::keyReleaseEvent;
    XI(_vt_QDialog).enterEvent = XiQDialog::enterEvent;
    XI(_vt_QDialog).leaveEvent = XiQDialog::leaveEvent;
    XI(_vt_QDialog).resizeEvent = XiQDialog::resizeEvent;
    XI(_vt_QDialog).closeEvent = XiQDialog::closeEvent;
    XI(_vt_QDialog).contextMenuEvent = XiQDialog::contextMenuEvent;
    XI(_vt_QDialog).showEvent = XiQDialog::showEvent;
    XI(_vt_QDialog).hideEvent = XiQDialog::hideEvent;
    XI(_vt_QDialog).defaultEvent = XiQDialog::defaultEvent;
    XI(_vt_QDialog).toPixmap = XiQDialog::toPixmap;
    XI(_vt_QDialog).toWidget = XiQDialog::toWidget;
    XI(_vt_QDialog).__classOp = XiQDialog::__classOp;
}

XiQDialog* XI(qdialog_o7QDialog)()
{
    return toXi(new QDialog);
}

QLineEdit* XiQLineEdit::impl()
{
    if (!initialized)
        static_cast<XiQLineEdit_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQLineEdit::invokeDtor(void* mePtr, void*)
{
    XiQLineEdit* me = static_cast<XiQLineEdit*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQLineEdit::__classOp(ClassOp op, void* memory)
{
    XiQLineEdit* me = static_cast<XiQLineEdit*>(memory);
    if (op == CallCtor) {
        new (memory) XiQLineEdit();
        me->createImpl();
    } else {
        me->~XiQLineEdit();
    }
}

XiQLineEdit::XiQLineEdit()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QLineEdit);
}

void XiQLineEdit::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQLineEdit* __this = static_cast<XiQLineEdit*>(__thisPtr);
    static_cast<Proxy<wrappedType>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

XiQString* XiQLineEdit::text(XiQLineEdit* __thisPtr)
{
    XiQLineEdit* __this = static_cast<XiQLineEdit*>(__thisPtr);
    return toXi(__this->impl()->text());
}

void XiQLineEdit::setText(XiQLineEdit* __thisPtr, XiQString* param0)
{
    XiQLineEdit* __this = static_cast<XiQLineEdit*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setText(param0__decode);
}

void XiQLineEdit::clear(XiQLineEdit* __thisPtr)
{
    XiQLineEdit* __this = static_cast<XiQLineEdit*>(__thisPtr);
    __this->impl()->clear();
}

bool XiQLineEdit::isReadOnly(XiQLineEdit* __thisPtr)
{
    XiQLineEdit* __this = static_cast<XiQLineEdit*>(__thisPtr);
    return toXi(__this->impl()->isReadOnly());
}

void XiQLineEdit::setReadOnly(XiQLineEdit* __thisPtr, bool param0)
{
    XiQLineEdit* __this = static_cast<XiQLineEdit*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setReadOnly(param0__decode);
}

bool XiQLineEdit::isModified(XiQLineEdit* __thisPtr)
{
    XiQLineEdit* __this = static_cast<XiQLineEdit*>(__thisPtr);
    return toXi(__this->impl()->isModified());
}

void XiQLineEdit::setModified(XiQLineEdit* __thisPtr, bool param0)
{
    XiQLineEdit* __this = static_cast<XiQLineEdit*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setModified(param0__decode);
}

XiQLineEdit_vtable XI(_vt_QLineEdit);
int XI(_size_QLineEdit);
void XI(_init_QLineEdit)()
{
    if (XI(_size_QLineEdit)) return;
    XI(_init_QWidget)();
    XI(_size_QLineEdit) = sizeof(XiQLineEdit);
    XI(_vt_QLineEdit).text = XiQLineEdit::text;
    XI(_vt_QLineEdit).setText = XiQLineEdit::setText;
    XI(_vt_QLineEdit).clear = XiQLineEdit::clear;
    XI(_vt_QLineEdit).isReadOnly = XiQLineEdit::isReadOnly;
    XI(_vt_QLineEdit).setReadOnly = XiQLineEdit::setReadOnly;
    XI(_vt_QLineEdit).isModified = XiQLineEdit::isModified;
    XI(_vt_QLineEdit).setModified = XiQLineEdit::setModified;
    XI(_vt_QLineEdit).show = XiQLineEdit::show;
    XI(_vt_QLineEdit).hide = XiQLineEdit::hide;
    XI(_vt_QLineEdit).raise = XiQLineEdit::raise;
    XI(_vt_QLineEdit).lower = XiQLineEdit::lower;
    XI(_vt_QLineEdit).close = XiQLineEdit::close;
    XI(_vt_QLineEdit).isEnabled = XiQLineEdit::isEnabled;
    XI(_vt_QLineEdit).setEnabled = XiQLineEdit::setEnabled;
    XI(_vt_QLineEdit).setLayout = XiQLineEdit::setLayout;
    XI(_vt_QLineEdit).isWindowModified = XiQLineEdit::isWindowModified;
    XI(_vt_QLineEdit).setWindowModified = XiQLineEdit::setWindowModified;
    XI(_vt_QLineEdit).windowTitle = XiQLineEdit::windowTitle;
    XI(_vt_QLineEdit).setWindowTitle = XiQLineEdit::setWindowTitle;
    XI(_vt_QLineEdit).windowIcon = XiQLineEdit::windowIcon;
    XI(_vt_QLineEdit).setWindowIcon = XiQLineEdit::setWindowIcon;
    XI(_vt_QLineEdit).isActiveWindow = XiQLineEdit::isActiveWindow;
    XI(_vt_QLineEdit).activateWindow = XiQLineEdit::activateWindow;
    XI(_vt_QLineEdit).isMinimized = XiQLineEdit::isMinimized;
    XI(_vt_QLineEdit).isMaximized = XiQLineEdit::isMaximized;
    XI(_vt_QLineEdit).isFullScreen = XiQLineEdit::isFullScreen;
    XI(_vt_QLineEdit).showMinimized = XiQLineEdit::showMinimized;
    XI(_vt_QLineEdit).showMaximized = XiQLineEdit::showMaximized;
    XI(_vt_QLineEdit).showFullScreen = XiQLineEdit::showFullScreen;
    XI(_vt_QLineEdit).showNormal = XiQLineEdit::showNormal;
    XI(_vt_QLineEdit).update = XiQLineEdit::update;
    XI(_vt_QLineEdit).repaint = XiQLineEdit::repaint;
    XI(_vt_QLineEdit).setMinimumSize = XiQLineEdit::setMinimumSize;
    XI(_vt_QLineEdit).minimumSize = XiQLineEdit::minimumSize;
    XI(_vt_QLineEdit).setMaximumSize = XiQLineEdit::setMaximumSize;
    XI(_vt_QLineEdit).maximumSize = XiQLineEdit::maximumSize;
    XI(_vt_QLineEdit).setFixedSize = XiQLineEdit::setFixedSize;
    XI(_vt_QLineEdit).resize = XiQLineEdit::resize;
    XI(_vt_QLineEdit).adjustSize = XiQLineEdit::adjustSize;
    XI(_vt_QLineEdit).pos = XiQLineEdit::pos;
    XI(_vt_QLineEdit).move = XiQLineEdit::move;
    XI(_vt_QLineEdit).sizeHint = XiQLineEdit::sizeHint;
    XI(_vt_QLineEdit).minimumSizeHint = XiQLineEdit::minimumSizeHint;
    XI(_vt_QLineEdit).mapFrom = XiQLineEdit::mapFrom;
    XI(_vt_QLineEdit).mapFromGlobal = XiQLineEdit::mapFromGlobal;
    XI(_vt_QLineEdit).mapFromParent = XiQLineEdit::mapFromParent;
    XI(_vt_QLineEdit).mapTo = XiQLineEdit::mapTo;
    XI(_vt_QLineEdit).mapToGlobal = XiQLineEdit::mapToGlobal;
    XI(_vt_QLineEdit).mapToParent = XiQLineEdit::mapToParent;
    XI(_vt_QLineEdit).setFont = XiQLineEdit::setFont;
    XI(_vt_QLineEdit).font = XiQLineEdit::font;
    XI(_vt_QLineEdit).styleSheet = XiQLineEdit::styleSheet;
    XI(_vt_QLineEdit).setStyleSheet = XiQLineEdit::setStyleSheet;
    XI(_vt_QLineEdit).focusPolicy = XiQLineEdit::focusPolicy;
    XI(_vt_QLineEdit).setFocusPolicy = XiQLineEdit::setFocusPolicy;
    XI(_vt_QLineEdit).setFocus = XiQLineEdit::setFocus;
    XI(_vt_QLineEdit).clearFocus = XiQLineEdit::clearFocus;
    XI(_vt_QLineEdit).hasFocus = XiQLineEdit::hasFocus;
    XI(_vt_QLineEdit).toolTip = XiQLineEdit::toolTip;
    XI(_vt_QLineEdit).setToolTip = XiQLineEdit::setToolTip;
    XI(_vt_QLineEdit).whatsThis = XiQLineEdit::whatsThis;
    XI(_vt_QLineEdit).setWhatsThis = XiQLineEdit::setWhatsThis;
    XI(_vt_QLineEdit).hasMouseTracking = XiQLineEdit::hasMouseTracking;
    XI(_vt_QLineEdit).setMouseTracking = XiQLineEdit::setMouseTracking;
    XI(_vt_QLineEdit).addAction = XiQLineEdit::addAction;
    XI(_vt_QLineEdit).paintEvent = XiQLineEdit::paintEvent;
    XI(_vt_QLineEdit).mousePressEvent = XiQLineEdit::mousePressEvent;
    XI(_vt_QLineEdit).mouseReleaseEvent = XiQLineEdit::mouseReleaseEvent;
    XI(_vt_QLineEdit).mouseDoubleClickEvent = XiQLineEdit::mouseDoubleClickEvent;
    XI(_vt_QLineEdit).mouseMoveEvent = XiQLineEdit::mouseMoveEvent;
    XI(_vt_QLineEdit).wheelEvent = XiQLineEdit::wheelEvent;
    XI(_vt_QLineEdit).keyPressEvent = XiQLineEdit::keyPressEvent;
    XI(_vt_QLineEdit).keyReleaseEvent = XiQLineEdit::keyReleaseEvent;
    XI(_vt_QLineEdit).enterEvent = XiQLineEdit::enterEvent;
    XI(_vt_QLineEdit).leaveEvent = XiQLineEdit::leaveEvent;
    XI(_vt_QLineEdit).resizeEvent = XiQLineEdit::resizeEvent;
    XI(_vt_QLineEdit).closeEvent = XiQLineEdit::closeEvent;
    XI(_vt_QLineEdit).contextMenuEvent = XiQLineEdit::contextMenuEvent;
    XI(_vt_QLineEdit).showEvent = XiQLineEdit::showEvent;
    XI(_vt_QLineEdit).hideEvent = XiQLineEdit::hideEvent;
    XI(_vt_QLineEdit).defaultEvent = XiQLineEdit::defaultEvent;
    XI(_vt_QLineEdit).toPixmap = XiQLineEdit::toPixmap;
    XI(_vt_QLineEdit).toWidget = XiQLineEdit::toWidget;
    XI(_vt_QLineEdit).__classOp = XiQLineEdit::__classOp;
}

XiQLineEdit* XI(qlineedit_o9QLineEdit)()
{
    return toXi(new QLineEdit);
}

QTextEdit* XiQTextEdit::impl()
{
    if (!initialized)
        static_cast<XiQTextEdit_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQTextEdit::invokeDtor(void* mePtr, void*)
{
    XiQTextEdit* me = static_cast<XiQTextEdit*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQTextEdit::__classOp(ClassOp op, void* memory)
{
    XiQTextEdit* me = static_cast<XiQTextEdit*>(memory);
    if (op == CallCtor) {
        new (memory) XiQTextEdit();
        me->createImpl();
    } else {
        me->~XiQTextEdit();
    }
}

XiQTextEdit::XiQTextEdit()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QTextEdit);
}

void XiQTextEdit::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQTextEdit* __this = static_cast<XiQTextEdit*>(__thisPtr);
    static_cast<Proxy<wrappedType>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

bool XiQTextEdit::isReadOnly(XiQTextEdit* __thisPtr)
{
    XiQTextEdit* __this = static_cast<XiQTextEdit*>(__thisPtr);
    return toXi(__this->impl()->isReadOnly());
}

void XiQTextEdit::setReadOnly(XiQTextEdit* __thisPtr, bool param0)
{
    XiQTextEdit* __this = static_cast<XiQTextEdit*>(__thisPtr);
    bool param0__decode = fromXi(param0);
    __this->impl()->setReadOnly(param0__decode);
}

XiQString* XiQTextEdit::toHtml(XiQTextEdit* __thisPtr)
{
    XiQTextEdit* __this = static_cast<XiQTextEdit*>(__thisPtr);
    return toXi(__this->impl()->toHtml());
}

XiQString* XiQTextEdit::toPlainText(XiQTextEdit* __thisPtr)
{
    XiQTextEdit* __this = static_cast<XiQTextEdit*>(__thisPtr);
    return toXi(__this->impl()->toPlainText());
}

void XiQTextEdit::setHtml(XiQTextEdit* __thisPtr, XiQString* param0)
{
    XiQTextEdit* __this = static_cast<XiQTextEdit*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setHtml(param0__decode);
}

void XiQTextEdit::setPlainText(XiQTextEdit* __thisPtr, XiQString* param0)
{
    XiQTextEdit* __this = static_cast<XiQTextEdit*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->setPlainText(param0__decode);
}

void XiQTextEdit::append(XiQTextEdit* __thisPtr, XiQString* param0)
{
    XiQTextEdit* __this = static_cast<XiQTextEdit*>(__thisPtr);
    QString param0__decode = fromXi(param0);
    __this->impl()->append(param0__decode);
}

void XiQTextEdit::clear(XiQTextEdit* __thisPtr)
{
    XiQTextEdit* __this = static_cast<XiQTextEdit*>(__thisPtr);
    __this->impl()->clear();
}

XiQTextEdit_vtable XI(_vt_QTextEdit);
int XI(_size_QTextEdit);
void XI(_init_QTextEdit)()
{
    if (XI(_size_QTextEdit)) return;
    XI(_init_QWidget)();
    XI(_size_QTextEdit) = sizeof(XiQTextEdit);
    XI(_vt_QTextEdit).isReadOnly = XiQTextEdit::isReadOnly;
    XI(_vt_QTextEdit).setReadOnly = XiQTextEdit::setReadOnly;
    XI(_vt_QTextEdit).toHtml = XiQTextEdit::toHtml;
    XI(_vt_QTextEdit).toPlainText = XiQTextEdit::toPlainText;
    XI(_vt_QTextEdit).setHtml = XiQTextEdit::setHtml;
    XI(_vt_QTextEdit).setPlainText = XiQTextEdit::setPlainText;
    XI(_vt_QTextEdit).append = XiQTextEdit::append;
    XI(_vt_QTextEdit).clear = XiQTextEdit::clear;
    XI(_vt_QTextEdit).show = XiQTextEdit::show;
    XI(_vt_QTextEdit).hide = XiQTextEdit::hide;
    XI(_vt_QTextEdit).raise = XiQTextEdit::raise;
    XI(_vt_QTextEdit).lower = XiQTextEdit::lower;
    XI(_vt_QTextEdit).close = XiQTextEdit::close;
    XI(_vt_QTextEdit).isEnabled = XiQTextEdit::isEnabled;
    XI(_vt_QTextEdit).setEnabled = XiQTextEdit::setEnabled;
    XI(_vt_QTextEdit).setLayout = XiQTextEdit::setLayout;
    XI(_vt_QTextEdit).isWindowModified = XiQTextEdit::isWindowModified;
    XI(_vt_QTextEdit).setWindowModified = XiQTextEdit::setWindowModified;
    XI(_vt_QTextEdit).windowTitle = XiQTextEdit::windowTitle;
    XI(_vt_QTextEdit).setWindowTitle = XiQTextEdit::setWindowTitle;
    XI(_vt_QTextEdit).windowIcon = XiQTextEdit::windowIcon;
    XI(_vt_QTextEdit).setWindowIcon = XiQTextEdit::setWindowIcon;
    XI(_vt_QTextEdit).isActiveWindow = XiQTextEdit::isActiveWindow;
    XI(_vt_QTextEdit).activateWindow = XiQTextEdit::activateWindow;
    XI(_vt_QTextEdit).isMinimized = XiQTextEdit::isMinimized;
    XI(_vt_QTextEdit).isMaximized = XiQTextEdit::isMaximized;
    XI(_vt_QTextEdit).isFullScreen = XiQTextEdit::isFullScreen;
    XI(_vt_QTextEdit).showMinimized = XiQTextEdit::showMinimized;
    XI(_vt_QTextEdit).showMaximized = XiQTextEdit::showMaximized;
    XI(_vt_QTextEdit).showFullScreen = XiQTextEdit::showFullScreen;
    XI(_vt_QTextEdit).showNormal = XiQTextEdit::showNormal;
    XI(_vt_QTextEdit).update = XiQTextEdit::update;
    XI(_vt_QTextEdit).repaint = XiQTextEdit::repaint;
    XI(_vt_QTextEdit).setMinimumSize = XiQTextEdit::setMinimumSize;
    XI(_vt_QTextEdit).minimumSize = XiQTextEdit::minimumSize;
    XI(_vt_QTextEdit).setMaximumSize = XiQTextEdit::setMaximumSize;
    XI(_vt_QTextEdit).maximumSize = XiQTextEdit::maximumSize;
    XI(_vt_QTextEdit).setFixedSize = XiQTextEdit::setFixedSize;
    XI(_vt_QTextEdit).resize = XiQTextEdit::resize;
    XI(_vt_QTextEdit).adjustSize = XiQTextEdit::adjustSize;
    XI(_vt_QTextEdit).pos = XiQTextEdit::pos;
    XI(_vt_QTextEdit).move = XiQTextEdit::move;
    XI(_vt_QTextEdit).sizeHint = XiQTextEdit::sizeHint;
    XI(_vt_QTextEdit).minimumSizeHint = XiQTextEdit::minimumSizeHint;
    XI(_vt_QTextEdit).mapFrom = XiQTextEdit::mapFrom;
    XI(_vt_QTextEdit).mapFromGlobal = XiQTextEdit::mapFromGlobal;
    XI(_vt_QTextEdit).mapFromParent = XiQTextEdit::mapFromParent;
    XI(_vt_QTextEdit).mapTo = XiQTextEdit::mapTo;
    XI(_vt_QTextEdit).mapToGlobal = XiQTextEdit::mapToGlobal;
    XI(_vt_QTextEdit).mapToParent = XiQTextEdit::mapToParent;
    XI(_vt_QTextEdit).setFont = XiQTextEdit::setFont;
    XI(_vt_QTextEdit).font = XiQTextEdit::font;
    XI(_vt_QTextEdit).styleSheet = XiQTextEdit::styleSheet;
    XI(_vt_QTextEdit).setStyleSheet = XiQTextEdit::setStyleSheet;
    XI(_vt_QTextEdit).focusPolicy = XiQTextEdit::focusPolicy;
    XI(_vt_QTextEdit).setFocusPolicy = XiQTextEdit::setFocusPolicy;
    XI(_vt_QTextEdit).setFocus = XiQTextEdit::setFocus;
    XI(_vt_QTextEdit).clearFocus = XiQTextEdit::clearFocus;
    XI(_vt_QTextEdit).hasFocus = XiQTextEdit::hasFocus;
    XI(_vt_QTextEdit).toolTip = XiQTextEdit::toolTip;
    XI(_vt_QTextEdit).setToolTip = XiQTextEdit::setToolTip;
    XI(_vt_QTextEdit).whatsThis = XiQTextEdit::whatsThis;
    XI(_vt_QTextEdit).setWhatsThis = XiQTextEdit::setWhatsThis;
    XI(_vt_QTextEdit).hasMouseTracking = XiQTextEdit::hasMouseTracking;
    XI(_vt_QTextEdit).setMouseTracking = XiQTextEdit::setMouseTracking;
    XI(_vt_QTextEdit).addAction = XiQTextEdit::addAction;
    XI(_vt_QTextEdit).paintEvent = XiQTextEdit::paintEvent;
    XI(_vt_QTextEdit).mousePressEvent = XiQTextEdit::mousePressEvent;
    XI(_vt_QTextEdit).mouseReleaseEvent = XiQTextEdit::mouseReleaseEvent;
    XI(_vt_QTextEdit).mouseDoubleClickEvent = XiQTextEdit::mouseDoubleClickEvent;
    XI(_vt_QTextEdit).mouseMoveEvent = XiQTextEdit::mouseMoveEvent;
    XI(_vt_QTextEdit).wheelEvent = XiQTextEdit::wheelEvent;
    XI(_vt_QTextEdit).keyPressEvent = XiQTextEdit::keyPressEvent;
    XI(_vt_QTextEdit).keyReleaseEvent = XiQTextEdit::keyReleaseEvent;
    XI(_vt_QTextEdit).enterEvent = XiQTextEdit::enterEvent;
    XI(_vt_QTextEdit).leaveEvent = XiQTextEdit::leaveEvent;
    XI(_vt_QTextEdit).resizeEvent = XiQTextEdit::resizeEvent;
    XI(_vt_QTextEdit).closeEvent = XiQTextEdit::closeEvent;
    XI(_vt_QTextEdit).contextMenuEvent = XiQTextEdit::contextMenuEvent;
    XI(_vt_QTextEdit).showEvent = XiQTextEdit::showEvent;
    XI(_vt_QTextEdit).hideEvent = XiQTextEdit::hideEvent;
    XI(_vt_QTextEdit).defaultEvent = XiQTextEdit::defaultEvent;
    XI(_vt_QTextEdit).toPixmap = XiQTextEdit::toPixmap;
    XI(_vt_QTextEdit).toWidget = XiQTextEdit::toWidget;
    XI(_vt_QTextEdit).__classOp = XiQTextEdit::__classOp;
}

XiQTextEdit* XI(qtextedit_o9QTextEdit)()
{
    return toXi(new QTextEdit);
}

XiSliderListener::XiSliderListener()
{
    if (!vptr)
        vptr = &XI(_vt_SliderListener);
}

void XiSliderListener::sliderMoved(XiSliderListener* __thisPtr, XiQWidget* slider, int val)
{
    XiSliderListener* __this = static_cast<XiSliderListener*>(__thisPtr);
}

XiSliderListener_vtable XI(_vt_SliderListener);
int XI(_size_SliderListener);
void XI(_init_SliderListener)()
{
    if (XI(_size_SliderListener)) return;
    XI(_size_SliderListener) = sizeof(XiSliderListener);
    XI(_vt_SliderListener).sliderMoved = XiSliderListener::sliderMoved;
}

QAbstractSlider* XiQAbstractSlider::impl()
{
    if (!initialized)
        static_cast<XiQAbstractSlider_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQAbstractSlider::invokeDtor(void* mePtr, void*)
{
    XiQAbstractSlider* me = static_cast<XiQAbstractSlider*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQAbstractSlider::__classOp(ClassOp op, void* memory)
{
    XiQAbstractSlider* me = static_cast<XiQAbstractSlider*>(memory);
    if (op == CallCtor) {
        new (memory) XiQAbstractSlider();
        me->createImpl();
    } else {
        me->~XiQAbstractSlider();
    }
}

XiQAbstractSlider::XiQAbstractSlider()
{
    if (vptr == &XI(_vt_QWidget))
        vptr = &XI(_vt_QAbstractSlider);
}

void XiQAbstractSlider::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    static_cast<Proxy<wrappedType>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

XiOrientation* XiQAbstractSlider::orientation(XiQAbstractSlider* __thisPtr)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    return toXi(__this->impl()->orientation());
}

void XiQAbstractSlider::setOrientation(XiQAbstractSlider* __thisPtr, XiOrientation* param0)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    Orientation param0__decode = fromXi(param0);
    __this->impl()->setOrientation(param0__decode);
}

int XiQAbstractSlider::getValue(XiQAbstractSlider* __thisPtr)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    return __this->impl()->value();
}

void XiQAbstractSlider::setValue(XiQAbstractSlider* __thisPtr, int param0)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setValue(param0__decode);
}

void XiQAbstractSlider::setRange(XiQAbstractSlider* __thisPtr, int min, int max)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    int min__decode = fromXi(min);
    int max__decode = fromXi(max);
    __this->impl()->setRange(min__decode, max__decode);
}

int XiQAbstractSlider::minimum(XiQAbstractSlider* __thisPtr)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    return toXi(__this->impl()->minimum());
}

void XiQAbstractSlider::setMinimum(XiQAbstractSlider* __thisPtr, int param0)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setMinimum(param0__decode);
}

int XiQAbstractSlider::maximum(XiQAbstractSlider* __thisPtr)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    return toXi(__this->impl()->maximum());
}

void XiQAbstractSlider::setMaximum(XiQAbstractSlider* __thisPtr, int param0)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setMaximum(param0__decode);
}

int XiQAbstractSlider::pageStep(XiQAbstractSlider* __thisPtr)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    return toXi(__this->impl()->pageStep());
}

void XiQAbstractSlider::setPageStep(XiQAbstractSlider* __thisPtr, int param0)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setPageStep(param0__decode);
}

void XiQAbstractSlider::sliderMoved(XiQAbstractSlider* __thisPtr, int param0)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
}

void XiQAbstractSlider::addSliderListener(XiQAbstractSlider* __thisPtr, XiSliderListener* l)
{
    XiQAbstractSlider* __this = static_cast<XiQAbstractSlider*>(__thisPtr);
    __this->sliderListeners.append(l);
}

XiQAbstractSlider_vtable XI(_vt_QAbstractSlider);
int XI(_size_QAbstractSlider);
void XI(_init_QAbstractSlider)()
{
    if (XI(_size_QAbstractSlider)) return;
    XI(_init_QWidget)();
    XI(_size_QAbstractSlider) = sizeof(XiQAbstractSlider);
    XI(_vt_QAbstractSlider).orientation = XiQAbstractSlider::orientation;
    XI(_vt_QAbstractSlider).setOrientation = XiQAbstractSlider::setOrientation;
    XI(_vt_QAbstractSlider).getValue = XiQAbstractSlider::getValue;
    XI(_vt_QAbstractSlider).setValue = XiQAbstractSlider::setValue;
    XI(_vt_QAbstractSlider).setRange = XiQAbstractSlider::setRange;
    XI(_vt_QAbstractSlider).minimum = XiQAbstractSlider::minimum;
    XI(_vt_QAbstractSlider).setMinimum = XiQAbstractSlider::setMinimum;
    XI(_vt_QAbstractSlider).maximum = XiQAbstractSlider::maximum;
    XI(_vt_QAbstractSlider).setMaximum = XiQAbstractSlider::setMaximum;
    XI(_vt_QAbstractSlider).pageStep = XiQAbstractSlider::pageStep;
    XI(_vt_QAbstractSlider).setPageStep = XiQAbstractSlider::setPageStep;
    XI(_vt_QAbstractSlider).sliderMoved = XiQAbstractSlider::sliderMoved;
    XI(_vt_QAbstractSlider).addSliderListener = XiQAbstractSlider::addSliderListener;
    XI(_vt_QAbstractSlider).show = XiQAbstractSlider::show;
    XI(_vt_QAbstractSlider).hide = XiQAbstractSlider::hide;
    XI(_vt_QAbstractSlider).raise = XiQAbstractSlider::raise;
    XI(_vt_QAbstractSlider).lower = XiQAbstractSlider::lower;
    XI(_vt_QAbstractSlider).close = XiQAbstractSlider::close;
    XI(_vt_QAbstractSlider).isEnabled = XiQAbstractSlider::isEnabled;
    XI(_vt_QAbstractSlider).setEnabled = XiQAbstractSlider::setEnabled;
    XI(_vt_QAbstractSlider).setLayout = XiQAbstractSlider::setLayout;
    XI(_vt_QAbstractSlider).isWindowModified = XiQAbstractSlider::isWindowModified;
    XI(_vt_QAbstractSlider).setWindowModified = XiQAbstractSlider::setWindowModified;
    XI(_vt_QAbstractSlider).windowTitle = XiQAbstractSlider::windowTitle;
    XI(_vt_QAbstractSlider).setWindowTitle = XiQAbstractSlider::setWindowTitle;
    XI(_vt_QAbstractSlider).windowIcon = XiQAbstractSlider::windowIcon;
    XI(_vt_QAbstractSlider).setWindowIcon = XiQAbstractSlider::setWindowIcon;
    XI(_vt_QAbstractSlider).isActiveWindow = XiQAbstractSlider::isActiveWindow;
    XI(_vt_QAbstractSlider).activateWindow = XiQAbstractSlider::activateWindow;
    XI(_vt_QAbstractSlider).isMinimized = XiQAbstractSlider::isMinimized;
    XI(_vt_QAbstractSlider).isMaximized = XiQAbstractSlider::isMaximized;
    XI(_vt_QAbstractSlider).isFullScreen = XiQAbstractSlider::isFullScreen;
    XI(_vt_QAbstractSlider).showMinimized = XiQAbstractSlider::showMinimized;
    XI(_vt_QAbstractSlider).showMaximized = XiQAbstractSlider::showMaximized;
    XI(_vt_QAbstractSlider).showFullScreen = XiQAbstractSlider::showFullScreen;
    XI(_vt_QAbstractSlider).showNormal = XiQAbstractSlider::showNormal;
    XI(_vt_QAbstractSlider).update = XiQAbstractSlider::update;
    XI(_vt_QAbstractSlider).repaint = XiQAbstractSlider::repaint;
    XI(_vt_QAbstractSlider).setMinimumSize = XiQAbstractSlider::setMinimumSize;
    XI(_vt_QAbstractSlider).minimumSize = XiQAbstractSlider::minimumSize;
    XI(_vt_QAbstractSlider).setMaximumSize = XiQAbstractSlider::setMaximumSize;
    XI(_vt_QAbstractSlider).maximumSize = XiQAbstractSlider::maximumSize;
    XI(_vt_QAbstractSlider).setFixedSize = XiQAbstractSlider::setFixedSize;
    XI(_vt_QAbstractSlider).resize = XiQAbstractSlider::resize;
    XI(_vt_QAbstractSlider).adjustSize = XiQAbstractSlider::adjustSize;
    XI(_vt_QAbstractSlider).pos = XiQAbstractSlider::pos;
    XI(_vt_QAbstractSlider).move = XiQAbstractSlider::move;
    XI(_vt_QAbstractSlider).sizeHint = XiQAbstractSlider::sizeHint;
    XI(_vt_QAbstractSlider).minimumSizeHint = XiQAbstractSlider::minimumSizeHint;
    XI(_vt_QAbstractSlider).mapFrom = XiQAbstractSlider::mapFrom;
    XI(_vt_QAbstractSlider).mapFromGlobal = XiQAbstractSlider::mapFromGlobal;
    XI(_vt_QAbstractSlider).mapFromParent = XiQAbstractSlider::mapFromParent;
    XI(_vt_QAbstractSlider).mapTo = XiQAbstractSlider::mapTo;
    XI(_vt_QAbstractSlider).mapToGlobal = XiQAbstractSlider::mapToGlobal;
    XI(_vt_QAbstractSlider).mapToParent = XiQAbstractSlider::mapToParent;
    XI(_vt_QAbstractSlider).setFont = XiQAbstractSlider::setFont;
    XI(_vt_QAbstractSlider).font = XiQAbstractSlider::font;
    XI(_vt_QAbstractSlider).styleSheet = XiQAbstractSlider::styleSheet;
    XI(_vt_QAbstractSlider).setStyleSheet = XiQAbstractSlider::setStyleSheet;
    XI(_vt_QAbstractSlider).focusPolicy = XiQAbstractSlider::focusPolicy;
    XI(_vt_QAbstractSlider).setFocusPolicy = XiQAbstractSlider::setFocusPolicy;
    XI(_vt_QAbstractSlider).setFocus = XiQAbstractSlider::setFocus;
    XI(_vt_QAbstractSlider).clearFocus = XiQAbstractSlider::clearFocus;
    XI(_vt_QAbstractSlider).hasFocus = XiQAbstractSlider::hasFocus;
    XI(_vt_QAbstractSlider).toolTip = XiQAbstractSlider::toolTip;
    XI(_vt_QAbstractSlider).setToolTip = XiQAbstractSlider::setToolTip;
    XI(_vt_QAbstractSlider).whatsThis = XiQAbstractSlider::whatsThis;
    XI(_vt_QAbstractSlider).setWhatsThis = XiQAbstractSlider::setWhatsThis;
    XI(_vt_QAbstractSlider).hasMouseTracking = XiQAbstractSlider::hasMouseTracking;
    XI(_vt_QAbstractSlider).setMouseTracking = XiQAbstractSlider::setMouseTracking;
    XI(_vt_QAbstractSlider).addAction = XiQAbstractSlider::addAction;
    XI(_vt_QAbstractSlider).paintEvent = XiQAbstractSlider::paintEvent;
    XI(_vt_QAbstractSlider).mousePressEvent = XiQAbstractSlider::mousePressEvent;
    XI(_vt_QAbstractSlider).mouseReleaseEvent = XiQAbstractSlider::mouseReleaseEvent;
    XI(_vt_QAbstractSlider).mouseDoubleClickEvent = XiQAbstractSlider::mouseDoubleClickEvent;
    XI(_vt_QAbstractSlider).mouseMoveEvent = XiQAbstractSlider::mouseMoveEvent;
    XI(_vt_QAbstractSlider).wheelEvent = XiQAbstractSlider::wheelEvent;
    XI(_vt_QAbstractSlider).keyPressEvent = XiQAbstractSlider::keyPressEvent;
    XI(_vt_QAbstractSlider).keyReleaseEvent = XiQAbstractSlider::keyReleaseEvent;
    XI(_vt_QAbstractSlider).enterEvent = XiQAbstractSlider::enterEvent;
    XI(_vt_QAbstractSlider).leaveEvent = XiQAbstractSlider::leaveEvent;
    XI(_vt_QAbstractSlider).resizeEvent = XiQAbstractSlider::resizeEvent;
    XI(_vt_QAbstractSlider).closeEvent = XiQAbstractSlider::closeEvent;
    XI(_vt_QAbstractSlider).contextMenuEvent = XiQAbstractSlider::contextMenuEvent;
    XI(_vt_QAbstractSlider).showEvent = XiQAbstractSlider::showEvent;
    XI(_vt_QAbstractSlider).hideEvent = XiQAbstractSlider::hideEvent;
    XI(_vt_QAbstractSlider).defaultEvent = XiQAbstractSlider::defaultEvent;
    XI(_vt_QAbstractSlider).toPixmap = XiQAbstractSlider::toPixmap;
    XI(_vt_QAbstractSlider).toWidget = XiQAbstractSlider::toWidget;
    XI(_vt_QAbstractSlider).__classOp = XiQAbstractSlider::__classOp;
}

QScrollBar* XiQScrollBar::impl()
{
    if (!initialized)
        static_cast<XiQScrollBar_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQScrollBar::invokeDtor(void* mePtr, void*)
{
    XiQScrollBar* me = static_cast<XiQScrollBar*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQScrollBar::__classOp(ClassOp op, void* memory)
{
    XiQScrollBar* me = static_cast<XiQScrollBar*>(memory);
    if (op == CallCtor) {
        new (memory) XiQScrollBar();
        me->createImpl();
    } else {
        me->~XiQScrollBar();
    }
}

XiQScrollBar::XiQScrollBar()
{
    if (vptr == &XI(_vt_QAbstractSlider))
        vptr = &XI(_vt_QScrollBar);
}

void XiQScrollBar::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQScrollBar* __this = static_cast<XiQScrollBar*>(__thisPtr);
    static_cast<Proxy<wrappedType>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

XiQScrollBar_vtable XI(_vt_QScrollBar);
int XI(_size_QScrollBar);
void XI(_init_QScrollBar)()
{
    if (XI(_size_QScrollBar)) return;
    XI(_init_QAbstractSlider)();
    XI(_size_QScrollBar) = sizeof(XiQScrollBar);
    XI(_vt_QScrollBar).orientation = XiQScrollBar::orientation;
    XI(_vt_QScrollBar).setOrientation = XiQScrollBar::setOrientation;
    XI(_vt_QScrollBar).getValue = XiQScrollBar::getValue;
    XI(_vt_QScrollBar).setValue = XiQScrollBar::setValue;
    XI(_vt_QScrollBar).setRange = XiQScrollBar::setRange;
    XI(_vt_QScrollBar).minimum = XiQScrollBar::minimum;
    XI(_vt_QScrollBar).setMinimum = XiQScrollBar::setMinimum;
    XI(_vt_QScrollBar).maximum = XiQScrollBar::maximum;
    XI(_vt_QScrollBar).setMaximum = XiQScrollBar::setMaximum;
    XI(_vt_QScrollBar).pageStep = XiQScrollBar::pageStep;
    XI(_vt_QScrollBar).setPageStep = XiQScrollBar::setPageStep;
    XI(_vt_QScrollBar).sliderMoved = XiQScrollBar::sliderMoved;
    XI(_vt_QScrollBar).addSliderListener = XiQScrollBar::addSliderListener;
    XI(_vt_QScrollBar).show = XiQScrollBar::show;
    XI(_vt_QScrollBar).hide = XiQScrollBar::hide;
    XI(_vt_QScrollBar).raise = XiQScrollBar::raise;
    XI(_vt_QScrollBar).lower = XiQScrollBar::lower;
    XI(_vt_QScrollBar).close = XiQScrollBar::close;
    XI(_vt_QScrollBar).isEnabled = XiQScrollBar::isEnabled;
    XI(_vt_QScrollBar).setEnabled = XiQScrollBar::setEnabled;
    XI(_vt_QScrollBar).setLayout = XiQScrollBar::setLayout;
    XI(_vt_QScrollBar).isWindowModified = XiQScrollBar::isWindowModified;
    XI(_vt_QScrollBar).setWindowModified = XiQScrollBar::setWindowModified;
    XI(_vt_QScrollBar).windowTitle = XiQScrollBar::windowTitle;
    XI(_vt_QScrollBar).setWindowTitle = XiQScrollBar::setWindowTitle;
    XI(_vt_QScrollBar).windowIcon = XiQScrollBar::windowIcon;
    XI(_vt_QScrollBar).setWindowIcon = XiQScrollBar::setWindowIcon;
    XI(_vt_QScrollBar).isActiveWindow = XiQScrollBar::isActiveWindow;
    XI(_vt_QScrollBar).activateWindow = XiQScrollBar::activateWindow;
    XI(_vt_QScrollBar).isMinimized = XiQScrollBar::isMinimized;
    XI(_vt_QScrollBar).isMaximized = XiQScrollBar::isMaximized;
    XI(_vt_QScrollBar).isFullScreen = XiQScrollBar::isFullScreen;
    XI(_vt_QScrollBar).showMinimized = XiQScrollBar::showMinimized;
    XI(_vt_QScrollBar).showMaximized = XiQScrollBar::showMaximized;
    XI(_vt_QScrollBar).showFullScreen = XiQScrollBar::showFullScreen;
    XI(_vt_QScrollBar).showNormal = XiQScrollBar::showNormal;
    XI(_vt_QScrollBar).update = XiQScrollBar::update;
    XI(_vt_QScrollBar).repaint = XiQScrollBar::repaint;
    XI(_vt_QScrollBar).setMinimumSize = XiQScrollBar::setMinimumSize;
    XI(_vt_QScrollBar).minimumSize = XiQScrollBar::minimumSize;
    XI(_vt_QScrollBar).setMaximumSize = XiQScrollBar::setMaximumSize;
    XI(_vt_QScrollBar).maximumSize = XiQScrollBar::maximumSize;
    XI(_vt_QScrollBar).setFixedSize = XiQScrollBar::setFixedSize;
    XI(_vt_QScrollBar).resize = XiQScrollBar::resize;
    XI(_vt_QScrollBar).adjustSize = XiQScrollBar::adjustSize;
    XI(_vt_QScrollBar).pos = XiQScrollBar::pos;
    XI(_vt_QScrollBar).move = XiQScrollBar::move;
    XI(_vt_QScrollBar).sizeHint = XiQScrollBar::sizeHint;
    XI(_vt_QScrollBar).minimumSizeHint = XiQScrollBar::minimumSizeHint;
    XI(_vt_QScrollBar).mapFrom = XiQScrollBar::mapFrom;
    XI(_vt_QScrollBar).mapFromGlobal = XiQScrollBar::mapFromGlobal;
    XI(_vt_QScrollBar).mapFromParent = XiQScrollBar::mapFromParent;
    XI(_vt_QScrollBar).mapTo = XiQScrollBar::mapTo;
    XI(_vt_QScrollBar).mapToGlobal = XiQScrollBar::mapToGlobal;
    XI(_vt_QScrollBar).mapToParent = XiQScrollBar::mapToParent;
    XI(_vt_QScrollBar).setFont = XiQScrollBar::setFont;
    XI(_vt_QScrollBar).font = XiQScrollBar::font;
    XI(_vt_QScrollBar).styleSheet = XiQScrollBar::styleSheet;
    XI(_vt_QScrollBar).setStyleSheet = XiQScrollBar::setStyleSheet;
    XI(_vt_QScrollBar).focusPolicy = XiQScrollBar::focusPolicy;
    XI(_vt_QScrollBar).setFocusPolicy = XiQScrollBar::setFocusPolicy;
    XI(_vt_QScrollBar).setFocus = XiQScrollBar::setFocus;
    XI(_vt_QScrollBar).clearFocus = XiQScrollBar::clearFocus;
    XI(_vt_QScrollBar).hasFocus = XiQScrollBar::hasFocus;
    XI(_vt_QScrollBar).toolTip = XiQScrollBar::toolTip;
    XI(_vt_QScrollBar).setToolTip = XiQScrollBar::setToolTip;
    XI(_vt_QScrollBar).whatsThis = XiQScrollBar::whatsThis;
    XI(_vt_QScrollBar).setWhatsThis = XiQScrollBar::setWhatsThis;
    XI(_vt_QScrollBar).hasMouseTracking = XiQScrollBar::hasMouseTracking;
    XI(_vt_QScrollBar).setMouseTracking = XiQScrollBar::setMouseTracking;
    XI(_vt_QScrollBar).addAction = XiQScrollBar::addAction;
    XI(_vt_QScrollBar).paintEvent = XiQScrollBar::paintEvent;
    XI(_vt_QScrollBar).mousePressEvent = XiQScrollBar::mousePressEvent;
    XI(_vt_QScrollBar).mouseReleaseEvent = XiQScrollBar::mouseReleaseEvent;
    XI(_vt_QScrollBar).mouseDoubleClickEvent = XiQScrollBar::mouseDoubleClickEvent;
    XI(_vt_QScrollBar).mouseMoveEvent = XiQScrollBar::mouseMoveEvent;
    XI(_vt_QScrollBar).wheelEvent = XiQScrollBar::wheelEvent;
    XI(_vt_QScrollBar).keyPressEvent = XiQScrollBar::keyPressEvent;
    XI(_vt_QScrollBar).keyReleaseEvent = XiQScrollBar::keyReleaseEvent;
    XI(_vt_QScrollBar).enterEvent = XiQScrollBar::enterEvent;
    XI(_vt_QScrollBar).leaveEvent = XiQScrollBar::leaveEvent;
    XI(_vt_QScrollBar).resizeEvent = XiQScrollBar::resizeEvent;
    XI(_vt_QScrollBar).closeEvent = XiQScrollBar::closeEvent;
    XI(_vt_QScrollBar).contextMenuEvent = XiQScrollBar::contextMenuEvent;
    XI(_vt_QScrollBar).showEvent = XiQScrollBar::showEvent;
    XI(_vt_QScrollBar).hideEvent = XiQScrollBar::hideEvent;
    XI(_vt_QScrollBar).defaultEvent = XiQScrollBar::defaultEvent;
    XI(_vt_QScrollBar).toPixmap = XiQScrollBar::toPixmap;
    XI(_vt_QScrollBar).toWidget = XiQScrollBar::toWidget;
    XI(_vt_QScrollBar).__classOp = XiQScrollBar::__classOp;
}

XiQScrollBar* XI(qscrollbar_o10QScrollBaro11Orientation)(XiOrientation* o)
{
    return toXi(new QScrollBar(fromXi(o)));
}

XiSliderTickPosition::XiSliderTickPosition()
{
    if (!vptr)
        vptr = &XI(_vt_SliderTickPosition);
}

XiSliderTickPosition* XI(TicksBothSides_o18SliderTickPosition)()
{
    static XiSliderTickPosition* c = gcNew<XiSliderTickPosition>();
    c->value = QSlider::TicksBothSides;
    return c;
}

XiSliderTickPosition* XI(TicksAbove_o18SliderTickPosition)()
{
    static XiSliderTickPosition* c = gcNew<XiSliderTickPosition>();
    c->value = QSlider::TicksAbove;
    return c;
}

XiSliderTickPosition* XI(TicksBelow_o18SliderTickPosition)()
{
    static XiSliderTickPosition* c = gcNew<XiSliderTickPosition>();
    c->value = QSlider::TicksBelow;
    return c;
}

XiSliderTickPosition_vtable XI(_vt_SliderTickPosition);
int XI(_size_SliderTickPosition);
void XI(_init_SliderTickPosition)()
{
    if (XI(_size_SliderTickPosition)) return;
    XI(_size_SliderTickPosition) = sizeof(XiSliderTickPosition);
}

QSlider* XiQSlider::impl()
{
    if (!initialized)
        static_cast<XiQSlider_vtable*>(vptr)->__classOp(CallCtor, this);
    return getImpl();
}

void XiQSlider::invokeDtor(void* mePtr, void*)
{
    XiQSlider* me = static_cast<XiQSlider*>(mePtr);
    if (me->initialized)
        me->vtable()->__classOp(CallDtor, me);
}

void XiQSlider::__classOp(ClassOp op, void* memory)
{
    XiQSlider* me = static_cast<XiQSlider*>(memory);
    if (op == CallCtor) {
        new (memory) XiQSlider();
        me->createImpl();
    } else {
        me->~XiQSlider();
    }
}

XiQSlider::XiQSlider()
{
    if (vptr == &XI(_vt_QAbstractSlider))
        vptr = &XI(_vt_QSlider);
}

void XiQSlider::defaultEvent(XiQWidget* __thisPtr, XiQEvent* e)
{
    XiQSlider* __this = static_cast<XiQSlider*>(__thisPtr);
    static_cast<Proxy<wrappedType>*>(__this->getImpl())->defaultEvent(fromXi(e));
}

int XiQSlider::tickInterval(XiQSlider* __thisPtr)
{
    XiQSlider* __this = static_cast<XiQSlider*>(__thisPtr);
    return toXi(__this->impl()->tickInterval());
}

void XiQSlider::setTickInterval(XiQSlider* __thisPtr, int param0)
{
    XiQSlider* __this = static_cast<XiQSlider*>(__thisPtr);
    int param0__decode = fromXi(param0);
    __this->impl()->setTickInterval(param0__decode);
}

void XiQSlider::setTickPosition(XiQSlider* __thisPtr, XiSliderTickPosition* param0)
{
    XiQSlider* __this = static_cast<XiQSlider*>(__thisPtr);
    SliderTickPosition param0__decode = fromXi(param0);
    __this->impl()->setTickPosition(param0__decode);
}

XiSliderTickPosition* XiQSlider::tickPosition(XiQSlider* __thisPtr)
{
    XiQSlider* __this = static_cast<XiQSlider*>(__thisPtr);
    return toXi(__this->impl()->tickPosition());
}

XiQSlider_vtable XI(_vt_QSlider);
int XI(_size_QSlider);
void XI(_init_QSlider)()
{
    if (XI(_size_QSlider)) return;
    XI(_init_QAbstractSlider)();
    XI(_size_QSlider) = sizeof(XiQSlider);
    XI(_vt_QSlider).tickInterval = XiQSlider::tickInterval;
    XI(_vt_QSlider).setTickInterval = XiQSlider::setTickInterval;
    XI(_vt_QSlider).setTickPosition = XiQSlider::setTickPosition;
    XI(_vt_QSlider).tickPosition = XiQSlider::tickPosition;
    XI(_vt_QSlider).orientation = XiQSlider::orientation;
    XI(_vt_QSlider).setOrientation = XiQSlider::setOrientation;
    XI(_vt_QSlider).getValue = XiQSlider::getValue;
    XI(_vt_QSlider).setValue = XiQSlider::setValue;
    XI(_vt_QSlider).setRange = XiQSlider::setRange;
    XI(_vt_QSlider).minimum = XiQSlider::minimum;
    XI(_vt_QSlider).setMinimum = XiQSlider::setMinimum;
    XI(_vt_QSlider).maximum = XiQSlider::maximum;
    XI(_vt_QSlider).setMaximum = XiQSlider::setMaximum;
    XI(_vt_QSlider).pageStep = XiQSlider::pageStep;
    XI(_vt_QSlider).setPageStep = XiQSlider::setPageStep;
    XI(_vt_QSlider).sliderMoved = XiQSlider::sliderMoved;
    XI(_vt_QSlider).addSliderListener = XiQSlider::addSliderListener;
    XI(_vt_QSlider).show = XiQSlider::show;
    XI(_vt_QSlider).hide = XiQSlider::hide;
    XI(_vt_QSlider).raise = XiQSlider::raise;
    XI(_vt_QSlider).lower = XiQSlider::lower;
    XI(_vt_QSlider).close = XiQSlider::close;
    XI(_vt_QSlider).isEnabled = XiQSlider::isEnabled;
    XI(_vt_QSlider).setEnabled = XiQSlider::setEnabled;
    XI(_vt_QSlider).setLayout = XiQSlider::setLayout;
    XI(_vt_QSlider).isWindowModified = XiQSlider::isWindowModified;
    XI(_vt_QSlider).setWindowModified = XiQSlider::setWindowModified;
    XI(_vt_QSlider).windowTitle = XiQSlider::windowTitle;
    XI(_vt_QSlider).setWindowTitle = XiQSlider::setWindowTitle;
    XI(_vt_QSlider).windowIcon = XiQSlider::windowIcon;
    XI(_vt_QSlider).setWindowIcon = XiQSlider::setWindowIcon;
    XI(_vt_QSlider).isActiveWindow = XiQSlider::isActiveWindow;
    XI(_vt_QSlider).activateWindow = XiQSlider::activateWindow;
    XI(_vt_QSlider).isMinimized = XiQSlider::isMinimized;
    XI(_vt_QSlider).isMaximized = XiQSlider::isMaximized;
    XI(_vt_QSlider).isFullScreen = XiQSlider::isFullScreen;
    XI(_vt_QSlider).showMinimized = XiQSlider::showMinimized;
    XI(_vt_QSlider).showMaximized = XiQSlider::showMaximized;
    XI(_vt_QSlider).showFullScreen = XiQSlider::showFullScreen;
    XI(_vt_QSlider).showNormal = XiQSlider::showNormal;
    XI(_vt_QSlider).update = XiQSlider::update;
    XI(_vt_QSlider).repaint = XiQSlider::repaint;
    XI(_vt_QSlider).setMinimumSize = XiQSlider::setMinimumSize;
    XI(_vt_QSlider).minimumSize = XiQSlider::minimumSize;
    XI(_vt_QSlider).setMaximumSize = XiQSlider::setMaximumSize;
    XI(_vt_QSlider).maximumSize = XiQSlider::maximumSize;
    XI(_vt_QSlider).setFixedSize = XiQSlider::setFixedSize;
    XI(_vt_QSlider).resize = XiQSlider::resize;
    XI(_vt_QSlider).adjustSize = XiQSlider::adjustSize;
    XI(_vt_QSlider).pos = XiQSlider::pos;
    XI(_vt_QSlider).move = XiQSlider::move;
    XI(_vt_QSlider).sizeHint = XiQSlider::sizeHint;
    XI(_vt_QSlider).minimumSizeHint = XiQSlider::minimumSizeHint;
    XI(_vt_QSlider).mapFrom = XiQSlider::mapFrom;
    XI(_vt_QSlider).mapFromGlobal = XiQSlider::mapFromGlobal;
    XI(_vt_QSlider).mapFromParent = XiQSlider::mapFromParent;
    XI(_vt_QSlider).mapTo = XiQSlider::mapTo;
    XI(_vt_QSlider).mapToGlobal = XiQSlider::mapToGlobal;
    XI(_vt_QSlider).mapToParent = XiQSlider::mapToParent;
    XI(_vt_QSlider).setFont = XiQSlider::setFont;
    XI(_vt_QSlider).font = XiQSlider::font;
    XI(_vt_QSlider).styleSheet = XiQSlider::styleSheet;
    XI(_vt_QSlider).setStyleSheet = XiQSlider::setStyleSheet;
    XI(_vt_QSlider).focusPolicy = XiQSlider::focusPolicy;
    XI(_vt_QSlider).setFocusPolicy = XiQSlider::setFocusPolicy;
    XI(_vt_QSlider).setFocus = XiQSlider::setFocus;
    XI(_vt_QSlider).clearFocus = XiQSlider::clearFocus;
    XI(_vt_QSlider).hasFocus = XiQSlider::hasFocus;
    XI(_vt_QSlider).toolTip = XiQSlider::toolTip;
    XI(_vt_QSlider).setToolTip = XiQSlider::setToolTip;
    XI(_vt_QSlider).whatsThis = XiQSlider::whatsThis;
    XI(_vt_QSlider).setWhatsThis = XiQSlider::setWhatsThis;
    XI(_vt_QSlider).hasMouseTracking = XiQSlider::hasMouseTracking;
    XI(_vt_QSlider).setMouseTracking = XiQSlider::setMouseTracking;
    XI(_vt_QSlider).addAction = XiQSlider::addAction;
    XI(_vt_QSlider).paintEvent = XiQSlider::paintEvent;
    XI(_vt_QSlider).mousePressEvent = XiQSlider::mousePressEvent;
    XI(_vt_QSlider).mouseReleaseEvent = XiQSlider::mouseReleaseEvent;
    XI(_vt_QSlider).mouseDoubleClickEvent = XiQSlider::mouseDoubleClickEvent;
    XI(_vt_QSlider).mouseMoveEvent = XiQSlider::mouseMoveEvent;
    XI(_vt_QSlider).wheelEvent = XiQSlider::wheelEvent;
    XI(_vt_QSlider).keyPressEvent = XiQSlider::keyPressEvent;
    XI(_vt_QSlider).keyReleaseEvent = XiQSlider::keyReleaseEvent;
    XI(_vt_QSlider).enterEvent = XiQSlider::enterEvent;
    XI(_vt_QSlider).leaveEvent = XiQSlider::leaveEvent;
    XI(_vt_QSlider).resizeEvent = XiQSlider::resizeEvent;
    XI(_vt_QSlider).closeEvent = XiQSlider::closeEvent;
    XI(_vt_QSlider).contextMenuEvent = XiQSlider::contextMenuEvent;
    XI(_vt_QSlider).showEvent = XiQSlider::showEvent;
    XI(_vt_QSlider).hideEvent = XiQSlider::hideEvent;
    XI(_vt_QSlider).defaultEvent = XiQSlider::defaultEvent;
    XI(_vt_QSlider).toPixmap = XiQSlider::toPixmap;
    XI(_vt_QSlider).toWidget = XiQSlider::toWidget;
    XI(_vt_QSlider).__classOp = XiQSlider::__classOp;
}

XiQSlider* XI(qslider_o7QSlider)()
{
    return toXi(new QSlider);
}

XiStandardIcon::XiStandardIcon()
{
    if (!vptr)
        vptr = &XI(_vt_StandardIcon);
}

XiStandardIcon* XI(TitleBarMenuButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_TitleBarMenuButton;
    return c;
}

XiStandardIcon* XI(TitleBarMinButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_TitleBarMinButton;
    return c;
}

XiStandardIcon* XI(TitleBarMaxButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_TitleBarMaxButton;
    return c;
}

XiStandardIcon* XI(TitleBarCloseButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_TitleBarCloseButton;
    return c;
}

XiStandardIcon* XI(TitleBarNormalButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_TitleBarNormalButton;
    return c;
}

XiStandardIcon* XI(TitleBarShadeButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_TitleBarShadeButton;
    return c;
}

XiStandardIcon* XI(TitleBarUnshadeButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_TitleBarUnshadeButton;
    return c;
}

XiStandardIcon* XI(TitleBarContextHelpButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_TitleBarContextHelpButton;
    return c;
}

XiStandardIcon* XI(DockWidgetCloseButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DockWidgetCloseButton;
    return c;
}

XiStandardIcon* XI(MessageBoxInformation_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MessageBoxInformation;
    return c;
}

XiStandardIcon* XI(MessageBoxWarning_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MessageBoxWarning;
    return c;
}

XiStandardIcon* XI(MessageBoxCritical_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MessageBoxCritical;
    return c;
}

XiStandardIcon* XI(MessageBoxQuestion_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MessageBoxQuestion;
    return c;
}

XiStandardIcon* XI(DesktopIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DesktopIcon;
    return c;
}

XiStandardIcon* XI(TrashIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_TrashIcon;
    return c;
}

XiStandardIcon* XI(ComputerIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_ComputerIcon;
    return c;
}

XiStandardIcon* XI(DriveFDIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DriveFDIcon;
    return c;
}

XiStandardIcon* XI(DriveHDIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DriveHDIcon;
    return c;
}

XiStandardIcon* XI(DriveCDIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DriveCDIcon;
    return c;
}

XiStandardIcon* XI(DriveDVDIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DriveDVDIcon;
    return c;
}

XiStandardIcon* XI(DriveNetIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DriveNetIcon;
    return c;
}

XiStandardIcon* XI(DirOpenIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DirOpenIcon;
    return c;
}

XiStandardIcon* XI(DirClosedIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DirClosedIcon;
    return c;
}

XiStandardIcon* XI(DirLinkIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DirLinkIcon;
    return c;
}

XiStandardIcon* XI(FileIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileIcon;
    return c;
}

XiStandardIcon* XI(FileLinkIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileLinkIcon;
    return c;
}

XiStandardIcon* XI(ToolBarHorizontalExtensionButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_ToolBarHorizontalExtensionButton;
    return c;
}

XiStandardIcon* XI(ToolBarVerticalExtensionButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_ToolBarVerticalExtensionButton;
    return c;
}

XiStandardIcon* XI(FileDialogStart_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileDialogStart;
    return c;
}

XiStandardIcon* XI(FileDialogEnd_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileDialogEnd;
    return c;
}

XiStandardIcon* XI(FileDialogToParent_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileDialogToParent;
    return c;
}

XiStandardIcon* XI(FileDialogNewFolder_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileDialogNewFolder;
    return c;
}

XiStandardIcon* XI(FileDialogDetailedView_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileDialogDetailedView;
    return c;
}

XiStandardIcon* XI(FileDialogInfoView_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileDialogInfoView;
    return c;
}

XiStandardIcon* XI(FileDialogContentsView_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileDialogContentsView;
    return c;
}

XiStandardIcon* XI(FileDialogListView_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileDialogListView;
    return c;
}

XiStandardIcon* XI(FileDialogBack_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_FileDialogBack;
    return c;
}

XiStandardIcon* XI(DirIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DirIcon;
    return c;
}

XiStandardIcon* XI(DialogOkButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogOkButton;
    return c;
}

XiStandardIcon* XI(DialogCancelButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogCancelButton;
    return c;
}

XiStandardIcon* XI(DialogHelpButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogHelpButton;
    return c;
}

XiStandardIcon* XI(DialogOpenButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogOpenButton;
    return c;
}

XiStandardIcon* XI(DialogSaveButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogSaveButton;
    return c;
}

XiStandardIcon* XI(DialogCloseButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogCloseButton;
    return c;
}

XiStandardIcon* XI(DialogApplyButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogApplyButton;
    return c;
}

XiStandardIcon* XI(DialogResetButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogResetButton;
    return c;
}

XiStandardIcon* XI(DialogDiscardButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogDiscardButton;
    return c;
}

XiStandardIcon* XI(DialogYesButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogYesButton;
    return c;
}

XiStandardIcon* XI(DialogNoButton_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DialogNoButton;
    return c;
}

XiStandardIcon* XI(ArrowUp_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_ArrowUp;
    return c;
}

XiStandardIcon* XI(ArrowDown_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_ArrowDown;
    return c;
}

XiStandardIcon* XI(ArrowLeft_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_ArrowLeft;
    return c;
}

XiStandardIcon* XI(ArrowRight_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_ArrowRight;
    return c;
}

XiStandardIcon* XI(ArrowBack_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_ArrowBack;
    return c;
}

XiStandardIcon* XI(ArrowForward_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_ArrowForward;
    return c;
}

XiStandardIcon* XI(DirHomeIcon_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_DirHomeIcon;
    return c;
}

XiStandardIcon* XI(CommandLink_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_CommandLink;
    return c;
}

XiStandardIcon* XI(VistaShield_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_VistaShield;
    return c;
}

XiStandardIcon* XI(BrowserReload_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_BrowserReload;
    return c;
}

XiStandardIcon* XI(BrowserStop_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_BrowserStop;
    return c;
}

XiStandardIcon* XI(MediaPlay_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MediaPlay;
    return c;
}

XiStandardIcon* XI(MediaStop_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MediaStop;
    return c;
}

XiStandardIcon* XI(MediaPause_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MediaPause;
    return c;
}

XiStandardIcon* XI(MediaSkipForward_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MediaSkipForward;
    return c;
}

XiStandardIcon* XI(MediaSkipBackward_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MediaSkipBackward;
    return c;
}

XiStandardIcon* XI(MediaSeekForward_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MediaSeekForward;
    return c;
}

XiStandardIcon* XI(MediaSeekBackward_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MediaSeekBackward;
    return c;
}

XiStandardIcon* XI(MediaVolume_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MediaVolume;
    return c;
}

XiStandardIcon* XI(MediaVolumeMuted_o12StandardIcon)()
{
    static XiStandardIcon* c = gcNew<XiStandardIcon>();
    c->value = QStyle::SP_MediaVolumeMuted;
    return c;
}

XiStandardIcon_vtable XI(_vt_StandardIcon);
int XI(_size_StandardIcon);
void XI(_init_StandardIcon)()
{
    if (XI(_size_StandardIcon)) return;
    XI(_size_StandardIcon) = sizeof(XiStandardIcon);
}

int XI(ButtonOk_i)()
{
    return QMessageBox::Ok; 
}

int XI(ButtonSave_i)()
{
    return QMessageBox::Save; 
}

int XI(ButtonSaveAll_i)()
{
    return QMessageBox::SaveAll; 
}

int XI(ButtonOpen_i)()
{
    return QMessageBox::Open; 
}

int XI(ButtonYes_i)()
{
    return QMessageBox::Yes; 
}

int XI(ButtonYesToAll_i)()
{
    return QMessageBox::YesToAll; 
}

int XI(ButtonNo_i)()
{
    return QMessageBox::No; 
}

int XI(ButtonNoToAll_i)()
{
    return QMessageBox::NoToAll; 
}

int XI(ButtonAbort_i)()
{
    return QMessageBox::Abort; 
}

int XI(ButtonRetry_i)()
{
    return QMessageBox::Retry; 
}

int XI(ButtonIgnore_i)()
{
    return QMessageBox::Ignore; 
}

int XI(ButtonClose_i)()
{
    return QMessageBox::Close; 
}

int XI(ButtonCancel_i)()
{
    return QMessageBox::Cancel; 
}

int XI(ButtonDiscard_i)()
{
    return QMessageBox::Discard; 
}

int XI(ButtonHelp_i)()
{
    return QMessageBox::Help; 
}

int XI(ButtonApply_i)()
{
    return QMessageBox::Apply; 
}

int XI(ButtonReset_i)()
{
    return QMessageBox::Reset; 
}

int XI(ButtonRestoreDefaults_i)()
{
    return QMessageBox::RestoreDefaults; 
}

int XI(qmessageBoxCritical_io7QWidgeto7QStringo7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons)
{
    return QMessageBox::critical(fromXi(parent), fromXi(title), fromXi(text),
                                 QMessageBox::StandardButtons(buttons));
}

int XI(qmessageBoxInformation_io7QWidgeto7QStringo7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons)
{
    return QMessageBox::information(fromXi(parent), fromXi(title), fromXi(text),
                                 QMessageBox::StandardButtons(buttons));
}

int XI(qmessageBoxWarning_io7QWidgeto7QStringo7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons)
{
    return QMessageBox::warning(fromXi(parent), fromXi(title), fromXi(text),
                                 QMessageBox::StandardButtons(buttons));
}

int XI(qmessageBoxQuestion_io7QWidgeto7QStringo7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons)
{
    return QMessageBox::question(fromXi(parent), fromXi(title), fromXi(text),
                                 QMessageBox::StandardButtons(buttons));
}

XiQWidget* XI(NO__WIDGET_o7QWidget)()
{
    return 0;
}


