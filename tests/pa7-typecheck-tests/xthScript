# xth test script
#
# This file is a test script for xth (xic Test Harness).  It
# conforms to the following grammar:
#
#   ScriptFile      ::= Commands+
#   Command         ::= build
#                     | CompilerTest
#   CompilerTest    ::= TestKind (\(TestName\))? ([TestPath])? ("CmdLineArgs")?
#                           { (FileTest;)* }
#   TestKind        ::= xic
#   TestName        ::= LitString
#   FileTest        ::= Filenames Description? FailureSet?
#   Filenames       ::= Filename+
#   Description     ::= LitString
#   FailureSet      ::= Failure (, Failure)*
#   Failure         ::= \( ErrorKind \)
#                     | \( ErrorKind, LitString \)
#
#   TestPath        :   the path to the test files, enclosed in quotes,
#                       relative to the path given in xth's -testpath flag.
#   CmdLineArgs     :   command-line arguments for xic
#   Filename        :   the name of a file, interpreted from TestPath.
#   LitString       :   a literal string, enclosed in quotes.
#   ErrorKind       :   one of, or a unique prefix of one of the following
#                       strings: "Lexical Error", "Syntax Error", or
#                       "Semantic Error".
#
# xth runs the commands in order of appearance.

xic ("Test --typecheck") "-libpath $(testpath) --typecheck" {
    appel_prog14_1.xi;
    appel_prog14_2.xi;
    appel_prog14_3.xi;
    array_subtyping_invariance.xi;
    break_creates_unreachable_stmt.xi;
    break_in_loop_multiple_places.xi;
    break_outside_loop.xi;
    class_decl_defn_dont_match_error0.xi;
    class_decl_defn_dont_match_error1.xi;
    class_decl_defn_dont_match_error2.xi;
    class_decl_defn_dont_match_error3.xi;
    class_decl_defn_dont_match_error4.xi;
    class_dup_def.xi;
    class_field_init_by_methods.xi;
    class_field_not_found.xi;
    class_field_shadow_by_field.xi;
    class_field_shadow_by_method.xi;
    class_implements_interface.xi;
    class_incorrect_override_diff_params.xi;
    class_incorrect_override_diff_ret.xi;
    class_inherit_itself_error.xi;
    class_method_not_found.xi;
    class_method_shadow_by_method.xi;
    class_method_use_super_method.xi;
    class_multiple_field_method_access.xi;
    class_mutually_recursive_methods.xi;
    class_nested_interface_imports.xi;
    class_override_field_error.xi;
    class_recursive_method.xi;
    class_same_field_methods_multiple_classes.xi;
    class_subtyping_assign.xi;
    class_subtyping_assign_error0.xi;
    class_subtyping_assign_error1.xi;
    interface_cyclic_import0.ixi;
    interface_cyclic_import1.ixi;
    lang_spec_color_colored_point_example.xi;
    lang_spec_point_example.xi;
    lang_spec_point_interface.ixi;
}
