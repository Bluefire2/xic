# xth test script
#
# This file is a test script for xth (xic Test Harness).  It
# conforms to the following grammar:
#
#   ScriptFile      ::= Commands+
#   Command         ::= build
#                     | CompilerTest
#   CompilerTest    ::= TestKind (\(TestName\))? ([TestPath])? ("CmdLineArgs")?
#                           { (FileTest;)* }
#   TestKind        ::= xic
#   TestName        ::= LitString
#   FileTest        ::= Filenames Description? FailureSet?
#   Filenames       ::= Filename+
#   Description     ::= LitString
#   FailureSet      ::= Failure (, Failure)*
#   Failure         ::= \( ErrorKind \)
#                     | \( ErrorKind, LitString \)
#
#   TestPath        :   the path to the test files, enclosed in quotes,
#                       relative to the path given in xth's -testpath flag.
#   CmdLineArgs     :   command-line arguments for xic
#   Filename        :   the name of a file, interpreted from TestPath.
#   LitString       :   a literal string, enclosed in quotes.
#   ErrorKind       :   one of, or a unique prefix of one of the following
#                       strings: "Lexical Error", "Syntax Error", or
#                       "Semantic Error".
#
# xth runs the commands in order of appearance.

xic ("Test --lex") "--lex" {
    catch_long_int_error_largeintliteral.xi;
    consecutive_double_quotes_string07.xi;
    dangling_backslash_space_string06.xi;
    dangling_backslash_string05.xi;
    escape_char03.xi;
    escape_string08.xi;
    ill_char_char02.xi;
    illegal_escape_string03.xi;
    illegal_hex_string04.xi;
    incorrect_lexing_string05.xi;
    min_int_int06.xi;
    split_string_string01.xi;
    split_string_string02.xi;
    string_in_char_char04.xi;
    true_false_keyword09_others.xi;
    unclosed_double_quotes_string02.xi;
    unclosed_double_quotes_string_string02.xi;
    unclosed_sing_quotes_char03.xi;
    unclosed_sing_quotes_char06.xi;
    unclosed_sing_quotes_sing_letter_char06.xi;
    unescaped_backslash_string01.xi;
}
