# xth test script
#
# This file is a test script for xth (xic Test Harness).  It
# conforms to the following grammar:
#
#   ScriptFile      ::= Commands+
#   Command         ::= build
#                     | CompilerTest
#   CompilerTest    ::= TestKind (\(TestName\))? ([TestPath])? ("CmdLineArgs")?
#                           { (FileTest;)* }
#   TestKind        ::= xic
#   TestName        ::= LitString
#   FileTest        ::= Filenames Description? FailureSet?
#   Filenames       ::= Filename+
#   Description     ::= LitString
#   FailureSet      ::= Failure (, Failure)*
#   Failure         ::= \( ErrorKind \)
#                     | \( ErrorKind, LitString \)
#
#   TestPath        :   the path to the test files, enclosed in quotes,
#                       relative to the path given in xth's -testpath flag.
#   CmdLineArgs     :   command-line arguments for xic
#   Filename        :   the name of a file, interpreted from TestPath.
#   LitString       :   a literal string, enclosed in quotes.
#   ErrorKind       :   one of, or a unique prefix of one of the following
#                       strings: "Lexical Error", "Syntax Error", or
#                       "Semantic Error".
#
# xth runs the commands in order of appearance.

xic ("Test --typecheck") "-libpath $(testpath) --typecheck" {
  returntypes0.xi;
  returntypes0error.xi (Semantic, ".* return values expected, but got .*");
  returntypes1.xi;
  returntypes1error.xi (Semantic, ".* return values expected, but got .*");
  returntypes2.xi;
  returntypes2error.xi (Semantic, ".* return values expected, but got .*");
  returntypeserror3.xi (Semantic, ".* return values expected, but got .*");
  returntypeserror4.xi (Semantic, ".* return values expected, but got .*");
  scope0.xi;
  scopeerror0.xi (Semantic, "Name .* cannot be resolved");
  scopeerror1.xi (Semantic, "Name .* cannot be resolved");
  scopeerror2.xi (Semantic, "Name .* cannot be resolved");
}
